<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Davis&#39; Blog</title>
  <subtitle>专注于Golang、Node.js技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dpfblog.com/"/>
  <updated>2017-09-30T15:18:30.000Z</updated>
  <id>http://dpfblog.com/</id>
  
  <author>
    <name>没事放放牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript数组方法总结</title>
    <link href="http://dpfblog.com/2017/09/20/array/"/>
    <id>http://dpfblog.com/2017/09/20/array/</id>
    <published>2017-09-20T14:02:52.000Z</published>
    <updated>2017-09-30T15:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><p>第一种，使用 Array 构造函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//创建一个空数组</span></div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// 创建一个包含10项的数组</span></div><div class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>,<span class="string">"c"</span>); <span class="comment">// 创建一个包含3个字符串的数组</span></div></pre></td></tr></table></figure></p>
<p>第二种，使用数组字面量表示法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">//创建一个空数组</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]; <span class="comment">// 创建一个包含3个字符串的数组</span></div></pre></td></tr></table></figure></p>
<p>在读取和设置数组的值时，要使用方括号并提供相应值的基于 0 的数字索引：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// a</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"d"</span>; <span class="comment">// 将下标为2的 c 修改为 d</span></div><div class="line">arr[<span class="number">3</span>] = <span class="string">"e"</span>; <span class="comment">// 增加第四项为e</span></div></pre></td></tr></table></figure></p>
<p>JavaScript中数组的length属性是可以修改的，看下面的示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">arr[arr.length] = <span class="string">"d"</span>; <span class="comment">// 在数组尾部添加一项"d"</span></div><div class="line">arr.length = arr.length<span class="number">-1</span>; <span class="comment">//将最后一项删除</span></div></pre></td></tr></table></figure></p>
<p>如何判断一个变量是不是数组对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="comment">// ES5之前</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</div><div class="line"><span class="comment">// ES5新增</span></div><div class="line">arr.isArray();</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> arr;  <span class="comment">// object</span></div></pre></td></tr></table></figure></p>
<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p><code>join()</code>：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">// a, b, c</span></div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>)); <span class="comment">// a-b-c</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [a, b, c]（原数组不变）</span></div></pre></td></tr></table></figure></p>
<p>应用：通过join()方法可以实现重复字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatString</span>(<span class="params">str, n</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).join(str);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"a"</span>, <span class="number">3</span>)); <span class="comment">// aaa</span></div></pre></td></tr></table></figure></p>
<h3 id="push-和pop"><a href="#push-和pop" class="headerlink" title="push()和pop()"></a>push()和pop()</h3><p><code>push()</code>：可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<br><code>pop()</code>：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">var</span> count = arr.push(<span class="string">"d"</span>, <span class="string">"e"</span>);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d", "e"]</span></div><div class="line"><span class="keyword">var</span> item = arr.pop();</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">// e</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d"]</span></div></pre></td></tr></table></figure></p>
<h3 id="shift-和-unshift"><a href="#shift-和-unshift" class="headerlink" title="shift() 和 unshift()"></a>shift() 和 unshift()</h3><p><code>shift()</code>：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。<br><code>unshift()</code>：将参数添加到原数组开头，并返回数组的长度 。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</div><div class="line"><span class="keyword">var</span> count = arr.unshift(<span class="string">"a"</span>,<span class="string">"b"</span>);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d", "e"]</span></div><div class="line"><span class="keyword">var</span> item = arr.shift();</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">// a</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["b", "c", "d", "e"]</span></div></pre></td></tr></table></figure></p>
<h3 id="sort-（原数组改变）"><a href="#sort-（原数组改变）" class="headerlink" title="sort()（原数组改变）"></a>sort()（原数组改变）</h3><p><code>sort()</code>：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。</p>
<p>在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">"a"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr1.sort()); <span class="comment">// ["a", "b", "c", "d"]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">// ["a", "b", "c", "d"]</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort()); <span class="comment">// [15, 22, 3, 46]</span></div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [15, 22, 3, 46]</span></div></pre></td></tr></table></figure></p>
<p>解决方法：sort()方法可以接收一个比较函数作为参数，比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort(compare)); <span class="comment">// [3, 15, 22, 46]</span></div></pre></td></tr></table></figure></p>
<p>如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort(compare)); <span class="comment">// [46, 22, 15, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="reverse-（原数组改变）"><a href="#reverse-（原数组改变）" class="headerlink" title="reverse()（原数组改变）"></a>reverse()（原数组改变）</h3><p><code>reverse()</code>：反转数组项的顺序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [3, 46, 22, 15]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [3, 46, 22, 15]</span></div></pre></td></tr></table></figure></p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code>：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。</p>
<p>传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.concat(<span class="number">9</span>, [<span class="number">11</span>, <span class="number">13</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 3, 5, 7, 9, 11, 13]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 3, 5, 7]</span></div></pre></td></tr></table></figure></p>
<p>若传入的是一个二维数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr2 = arr.concat([<span class="number">9</span>, [<span class="number">11</span>, <span class="number">13</span>]]);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 3, 5, 7, 9, Array[2]]</span></div><div class="line"><span class="built_in">console</span>.log(arr2[<span class="number">5</span>]); <span class="comment">// [11, 13]</span></div></pre></td></tr></table></figure></p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code>：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.slice(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> arr2 = arr.slice(<span class="number">1</span>, <span class="number">4</span>);</div><div class="line"><span class="keyword">var</span> arr3 = arr.slice(<span class="number">1</span>, <span class="number">-2</span>);</div><div class="line"><span class="keyword">var</span> arr4 = arr.slice(<span class="number">-4</span>, <span class="number">-1</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 3, 5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [3, 5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [3, 5, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [3, 5, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [5, 7, 9]</span></div></pre></td></tr></table></figure></p>
<p>arr1只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。<br>arr2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。<br>arr3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。<br>arr4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2, 5)。</p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>splice()</code>：可以实现删除、插入和替换。</p>
<p><strong>删除</strong>：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。</p>
<p><strong>插入</strong>：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。</p>
<p><strong>替换</strong>：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。</p>
<p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.splice(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[1, 3]</span></div><div class="line"><span class="keyword">var</span> arr2 = arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 7, 4, 6, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arrR2); <span class="comment">// []</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 2, 4, 4, 6, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arrR3); <span class="comment">// [7]</span></div></pre></td></tr></table></figure></p>
<h3 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf()和 lastIndexOf()"></a>indexOf()和 lastIndexOf()</h3><p><code>indexOf()</code>：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。<br><code>lastIndexOf()</code>：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。<br>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">5</span>));  <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">5</span>)); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">5</span>,<span class="number">2</span>)); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">5</span>, <span class="number">4</span>)); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">"5"</span>)); <span class="comment">// -1</span></div></pre></td></tr></table></figure></p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p><code>forEach()</code>：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：值，索引。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(index, item);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0, 1</span></div><div class="line"><span class="comment">// 1, 2</span></div><div class="line"><span class="comment">// 2, 3</span></div></pre></td></tr></table></figure></p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p><code>map()</code>：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。<br>下面代码利用map方法实现数组中每个数求平方。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> item*item;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 4, 9, 16]</span></div></pre></td></tr></table></figure></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code>：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x, index</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> index % <span class="number">3</span> === <span class="number">0</span> || x &gt;= <span class="number">8</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 4, 7, 8, 9, 10]</span></div></pre></td></tr></table></figure></p>
<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p><code>every()</code>：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p><code>some()</code>：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h3 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce()和 reduceRight()"></a>reduce()和 reduceRight()</h3><p>这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。<br><code>reduce()</code>方法从数组的第一项开始，逐个遍历到最后。<code>reduceRight()</code>则从数组的最后一项开始，向前遍历到第一项。<br>这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。<br>传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。<br>这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。<br>下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum = values.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">&#125;, <span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//25</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组创建&quot;&gt;&lt;a href=&quot;#数组创建&quot; class=&quot;headerlink&quot; title=&quot;数组创建&quot;&gt;&lt;/a&gt;数组创建&lt;/h2&gt;&lt;p&gt;第一种，使用 Array 构造函数：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://dpfblog.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://dpfblog.com/2017/09/10/MongoDB/"/>
    <id>http://dpfblog.com/2017/09/10/MongoDB/</id>
    <published>2017-09-10T13:58:21.000Z</published>
    <updated>2017-09-27T09:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL?"></a>什么是NoSQL?</h3><p>NoSQL，指的是非关系型的数据库。</p>
<p>没有行、列的概念。用 JSON 来存储数据。集合就相当于 SQL 数据库中的“表”，文档就相当于“行”。</p>
<p>适用于：</p>
<ol>
<li><p>数据模型比较简单；</p>
</li>
<li><p>需要灵活性更强的IT系统；</p>
</li>
<li><p>对数据库性能要求较高；</p>
</li>
<li><p>不需要高度的数据一致性；</p>
</li>
<li><p>对于给定key，比较容易映射复杂值的环境。</p>
</li>
</ol>
<h3 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB?"></a>什么是MongoDB?</h3><p>官网：<a href="https://www.mongodb.com" target="_blank" rel="external">https://www.mongodb.com</a></p>
<p>手册：<a href="https://docs.mongodb.org/manual" target="_blank" rel="external">https://docs.mongodb.org/manual</a></p>
<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<h2 id="MongoDB安装及运行"><a href="#MongoDB安装及运行" class="headerlink" title="MongoDB安装及运行"></a>MongoDB安装及运行</h2><p>下载最新的stable版：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a></p>
<p>安装好之后，我们看一下安装的文件夹，例如：<br>C:\Program Files\MongoDB\Server\3.0\bin，将其加入到系统的path环境变量中，那么我们就能在系统的任何盘符，使用mongo命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongo   使用数据库</div><div class="line">mongod  开机</div><div class="line">mongoimport  导入数据</div></pre></td></tr></table></figure>
<ol>
<li>启动mongod服务</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-15/3164111.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>–dbpath就是选择数据库文档所在的文件夹。</p>
<ol>
<li>管理数据库（新开一个cmd）</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-15/685892.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>那么，运行环境就是mongo语法了。</p>
<h2 id="MongoDB常用操作"><a href="#MongoDB常用操作" class="headerlink" title="MongoDB常用操作"></a>MongoDB常用操作</h2><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure>
<h3 id="使用数据库、创建数据库"><a href="#使用数据库、创建数据库" class="headerlink" title="使用数据库、创建数据库"></a>使用数据库、创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use test</div></pre></td></tr></table></figure>
<p>use一个不存在的，就是新建。</p>
<h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库"></a>查看当前所在数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>数据库中不能直接插入数据，只能往集合(collections)中插入数据。不需要创建集合，只需要写点语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.insert(&#123;&quot;name&quot;:&quot;Davis&quot;,&quot;age&quot;:&quot;22&quot;,&quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
<p>db.student  系统发现student是一个陌生的集合名字，所以就自动创建了集合。</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>删除当前数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase();</div></pre></td></tr></table></figure></p>
<h2 id="数据库使用"><a href="#数据库使用" class="headerlink" title="数据库使用"></a>数据库使用</h2><h3 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据，随着数据的插入，数据库创建成功了，集合也创建成功了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.insert(&#123;&quot;name&quot;:&quot;Davis&quot;,&quot;age&quot;:&quot;22&quot;,&quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
<p>我们不可能一条一条的insert。所以，我们希望用sublime在外部写好数据库的形式，然后导入数据库：</p>
<p>导入json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoimport --db test --collection student --drop --file data.json</div></pre></td></tr></table></figure></p>
<p>导入json数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoimport --db test --collection student --drop --file data.json --jsonArray</div></pre></td></tr></table></figure></p>
<p><code>-db test</code>  想往哪个数据库里面导入<br><code>--collection student</code>  想往哪个集合中导入<br><code>--drop</code> 把已存在数据清空<br><code>--file data.json</code>  哪个文件</p>
<p>这样，我们就能用sublime创建一个json文件，然后用mongoimport命令导入。</p>
<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><ol>
<li><p>查找数据，用find。find中没有参数，那么将列出这个集合的所有文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find()</div></pre></td></tr></table></figure>
</li>
<li><p>精确匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:22&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>多个条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:12, &quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>大于条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>或者（寻找所有年龄是20岁，或者22岁的学生）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:22&#125;]&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>查找完毕之后，打点调用sort，表示升（1）降（-1）排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find().sort(&#123;&quot;age&quot;:1, &quot;score.English&quot;:1&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前Mongodb运行状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.stats();</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>分页查询</strong></p>
<p>通过 <code>sike()</code> 与 <code>limit()</code> 方法</p>
<p>假如，第一页是page=0。每页10条，所以当前页的查询语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&#125;).limit(10).skip(page*10)</div></pre></td></tr></table></figure></p>
<p><code>limit()</code>表示读取的条数，sike()表示略过的条数。</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ol>
<li>修改里面还有查询条件</li>
</ol>
<p>查找名字叫做Davis的，把年龄更改为20岁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;name&quot;:&quot;Davis&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:20&#125;&#125;)</div></pre></td></tr></table></figure></p>
<ol>
<li><p>更改所有匹配项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:20&#125;&#125;,&#123;multi: true&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>完整替换，不出现$set关键字了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;name&quot;:&quot;Davis&quot;&#125;,&#123;&quot;name&quot;:&quot;dpf&quot;,&quot;age&quot;:20&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ol>
<li><p>删除集合中高数成绩为 60 的学生</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.remove(&#123;&apos;score.English&apos;:60&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>删除第一条找到的记录可以设置 justOne 为 1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.remove(&#123;&apos;score.English&apos;:60&#125;,1);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><p>Mongoose，是一个将JavaScript对象与数据库产生关系的一个框架，object related model。所有的操作都不是对数据库进行的。而是对类、实例进行的，对象产生了，同时也持久化了。</p>
<p>官网：<a href="http://mongoosejs.com/" target="_blank" rel="external">http://mongoosejs.com/</a></p>
<h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="comment">//创建数据库连接</span></div><div class="line"><span class="keyword">var</span> db = mongoose.createConnection(<span class="string">'mongodb://127.0.0.1:27017/test'</span>);</div><div class="line"><span class="comment">//监听open事件</span></div><div class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"数据库成功连接"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-24/7201811.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>创造schema → 定义一些schema的静态方法 → 创造模型</p>
<p>创造schema<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new mongoose.schema(&#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>创造模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.model(“Student”,schema名字);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建了一个schema结构。</span></div><div class="line"><span class="keyword">var</span> studentSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">name</span>     :  &#123;<span class="attr">type</span> : <span class="built_in">String</span>&#125;,</div><div class="line">    <span class="attr">age</span>      :  &#123;<span class="attr">type</span> : <span class="built_in">Number</span>&#125;,</div><div class="line">    <span class="attr">sex</span>      :  &#123;<span class="attr">type</span> : <span class="built_in">String</span>&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//创建静态方法</span></div><div class="line">studentSchema.statics.zhaoren = <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.model(<span class="string">'Student'</span>).find(&#123;<span class="attr">name</span>: name&#125;, callback);   <span class="comment">//this.model('Student')指的是当前这个类</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//创建修改的静态方法</span></div><div class="line">studentSchema.statics.xiugai = <span class="function"><span class="keyword">function</span>(<span class="params">conditions,update,options,callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.model(<span class="string">"Student"</span>).update(conditions, update, options, callback);</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建了一个模型，就是学生模型，就是学生类。</span></div><div class="line"><span class="comment">//类是基于schema创建的。</span></div><div class="line"><span class="keyword">var</span> studentModel = db.model(<span class="string">'Student'</span>, studentSchema);</div></pre></td></tr></table></figure>
<h2 id="MongoVUE连接MongoDB"><a href="#MongoVUE连接MongoDB" class="headerlink" title="MongoVUE连接MongoDB"></a>MongoVUE连接MongoDB</h2><p><strong>不显示数据问题</strong></p>
<p>mongoDB3.2版本之后默认开启的存储引擎是 <code>wiredTiger</code>，使用这种存储引擎存储的数据只能在命令行中看到，在 mongoVUE 中看不到。</p>
<p>所以，需要换成 <code>mmapv1</code> 操作引擎，此时就可以在 mongoVUE 中看到 Collections 下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --storageEngine mmapv1 --dbpath D:\mongo(路径)</div></pre></td></tr></table></figure></p>
<p>选择 <code>mmapv1</code>存储引擎后，<code>ns</code> 后缀文件就是数据库</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;什么是NoSQL&quot;&gt;&lt;a href=&quot;#什么是NoSQL&quot; class=&quot;headerlink&quot; title=&quot;什么是NoSQL?
    
    </summary>
    
    
      <category term="Node.js" scheme="http://dpfblog.com/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="http://dpfblog.com/tags/MongoDB/"/>
    
      <category term="mongoose" scheme="http://dpfblog.com/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>在线竞拍网站</title>
    <link href="http://dpfblog.com/2017/08/25/auction-angular/"/>
    <id>http://dpfblog.com/2017/08/25/auction-angular/</id>
    <published>2017-08-25T14:49:53.000Z</published>
    <updated>2017-10-16T04:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>👉 GitHub: <a href="https://github.com/pengfeidai/auction-Angular" target="_blank" rel="external">https://github.com/pengfeidai/auction-Angular</a></p>
<p>这一个基于 Angular4.0 、Nodejs 和 Express 的小型电子产品售卖平台，使用了 Http 通讯，路由，服务，依赖注入，pipe管道，响应式表单等技术。</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-2/72946124.jpg" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></center><br><center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-2/4740444.jpg" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></center>


<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>【前端】</p>
<ul>
<li>ES6：ECMAScript 新一代语法，这也是以后的趋势</li>
<li>Bootstrap：界面框架</li>
<li>Angular: 前端开发框架</li>
<li>Angular 路由器： 包含多种服务(RouterModule)、多种指令(RouterOutlet、RouterLink、RouterLinkActive)、 和一套配置(Routes)等。</li>
<li>http通讯：通过http通讯获取服务端数据</li>
<li>pipe 管道：负责处理原始值到显示值的转化</li>
<li>响应式表单：使用特定指令，将模板上的html元素与底层的数据模型连接在一起</li>
</ul>
<p>【后端】</p>
<ul>
<li><p>Nodejs: 使用Nodejs创建服务器</p>
</li>
<li><p>Express: 使用Express创建restful的http服务</p>
</li>
</ul>
<p>【自动化构建】</p>
<ul>
<li>Angular CLI: 全新命令行界面工具</li>
</ul>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p><strong>首页</strong></p>
<p>左侧为搜索表单，主要使用了 <code>FormBuilder</code>, <code>FormControl</code>,<code>FormGroup</code>，使用filter实现搜索效果。</p>
<p>右侧为一个轮播图组件，利用bootstrap框架实现。下面产品列表的数据来自后端模拟的数据，通过http通讯来获取，并将其展示在页面。</p>
<p><strong>产品详情页</strong></p>
<p>通过产品 id 来获取参数，将产品信息以及评论列表展示在页面，可实现关注、发表评论、评分功能。</p>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol>
<li>对 Angular 的组件、指令、依赖注入、http通讯、数据绑定等有了基本了解</li>
<li>了解了 Angular 组件之间的交互、传值</li>
<li>熟悉了在 Angular 项目中使用第三方插件（如jQuery,bootstrap）</li>
<li>熟悉了组件化、模块化的开发思维</li>
<li>再次熟悉项目开发流程：项目分析设计 -&gt; 项目环境搭建 -&gt; 依赖安装 -&gt; 页面架构设计 -&gt; 组件开发 -&gt; 测试联调 -&gt; 发布上线</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;👉 GitHub: &lt;a href=&quot;https://github.com/pengfeidai/auction-Angular&quot; tar
    
    </summary>
    
    
      <category term="Angular" scheme="http://dpfblog.com/tags/Angular/"/>
    
      <category term="Bootstrap" scheme="http://dpfblog.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Angular4.0http通讯，nodejs搭建服务器</title>
    <link href="http://dpfblog.com/2017/08/25/Angular4-0http%EF%BC%8Cnodejs/"/>
    <id>http://dpfblog.com/2017/08/25/Angular4-0http，nodejs/</id>
    <published>2017-08-25T08:54:14.000Z</published>
    <updated>2017-09-02T09:00:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习 Angular4.0，在学习过程中学到一些 http 服务端通讯以及跨域知识，将之记录下来。下面将附上实现步骤以及项目源码。</p>
<h2 id="搭建一个服务器"><a href="#搭建一个服务器" class="headerlink" title="搭建一个服务器"></a>搭建一个服务器</h2><p>第一步：创建一个新的文件夹，取名为 server。</p>
<p>第二步： 右键打开 <code>Git Bash Here</code>，然后 <code>npm init -y</code>, ide自动生成一个package.json文件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;server&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [],</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三步： 生成node_modules文件夹和package-lock.json文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i @types/node --save</div></pre></td></tr></table></figure>
<p>作用：引入 node 的类型定义文件，可以在typesscript里用JavaScript的库</p>
<p>第四步： 创建一个新的tsconfig.json文件，用来告诉编译器如何将typesscript编译成javascript</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "compilerOptions": &#123;</div><div class="line">    "target": "es5",    // 编译成 es5 规范的脚本</div><div class="line">    "module": "commonjs",   //  用的 commonjs 模块规范</div><div class="line">    "emitDecoratorMetadata": true,</div><div class="line">    "experimentalDecorators": true,</div><div class="line">    "outDir": "build",   // 编译完后 js 文件存放的目录是 build</div><div class="line">    "lib": ["es6"]  //</div><div class="line">  &#125;,</div><div class="line">  "exclude": [</div><div class="line">    "node_modules"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第五步： 安装 express 框架，简化配置操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install espress --save</div></pre></td></tr></table></figure>
<p>第六步： 引入 espress 的类型定义文件，可以使用 typesscript 来开发</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install @types/espress --save</div></pre></td></tr></table></figure>
<p>此时，package.json 文件下会多出安装的几个依赖，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;server&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [],</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;@types/express&quot;: &quot;^4.0.37&quot;,</div><div class="line">    &quot;@types/node&quot;: &quot;^8.0.25&quot;,</div><div class="line">    &quot;express&quot;: &quot;^4.15.4&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第七步： 配置好了，就开始写一个简单的程序，创建一个server文件夹，auction_server.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> Product &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span></div><div class="line">    <span class="keyword">public</span> id: <span class="built_in">number</span>,</div><div class="line">    <span class="keyword">public</span> title: <span class="built_in">string</span>,</div><div class="line">    <span class="keyword">public</span> price: <span class="built_in">number</span>,</div><div class="line">    <span class="keyword">public</span> rating: <span class="built_in">number</span>,</div><div class="line">    <span class="keyword">public</span> desc: <span class="built_in">string</span>,</div><div class="line">    <span class="keyword">public</span> imgUrl: <span class="built_in">string</span>,</div><div class="line">    <span class="keyword">public</span> categories: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</div><div class="line">  ) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> products: Product [] = [</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">1</span>, <span class="string">'华为荣耀8'</span>, <span class="number">1999</span>, <span class="number">3.5</span>, <span class="string">'这是第一部手机，是我在学习Angular入门实战时创的'</span>, <span class="string">'../assets/images/1.jpg'</span>, [<span class="string">'电子产品'</span>, <span class="string">'手机'</span>]),</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">2</span>, <span class="string">'vivo x9s'</span>, <span class="number">2999</span>, <span class="number">2.5</span>, <span class="string">'这是第二部手机，是我在学习Angular入门实战时创建的'</span>, <span class="string">'../assets/images/2.jpg'</span>, [<span class="string">'手机'</span>,<span class="string">'硬件设备'</span>]),</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">3</span>, <span class="string">'魅蓝note6'</span>, <span class="number">3999</span>, <span class="number">4.5</span>, <span class="string">'这是第三部手机，是我在学习Angular入门实战时创建的'</span>, <span class="string">'../assets/images/3.jpg'</span>, [<span class="string">'电子产品'</span>]),</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">4</span>, <span class="string">'Iphone 8'</span>, <span class="number">1899</span>, <span class="number">3.5</span>, <span class="string">'这是第四部手机，是我在学习Angular入门实战时创建的'</span>, <span class="string">'../assets/images/4.jpg'</span>, [<span class="string">'电子产品'</span>, <span class="string">'手机'</span>]),</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">5</span>, <span class="string">'红米4X'</span>, <span class="number">5999</span>, <span class="number">3.5</span>, <span class="string">'这是第五部手机，是我在学习Angular入门实战时创建的'</span>, <span class="string">'../assets/images/5.jpg'</span>, [<span class="string">'硬件设备'</span>]),</div><div class="line">  <span class="keyword">new</span> Product(<span class="number">6</span>, <span class="string">'三星 S8'</span>, <span class="number">3899</span>, <span class="number">2.5</span>, <span class="string">'这是第六部手机，是我在学习Angular入门实战时创建的'</span>, <span class="string">'../assets/images/6.jpg'</span>, [<span class="string">'电子产品'</span>])</div><div class="line">];</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.send(<span class="string">'Hello Express!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/api/products'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.json(products);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/api/product/:id'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.json(products.find(<span class="function">(<span class="params">product</span>) =&gt;</span> product.id == req.params.id));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = app.listen(<span class="number">8000</span>, <span class="string">"localhost"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器已启动！'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>编译会自动生成一个build文件夹下的 auction_server.js文件，只修改ts文件就可以了。</p>
<p>第八步： 启动服务器（普通）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node build/auction_server.js</div></pre></td></tr></table></figure>
<p>第九步： 安装 nodemon（简便）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodemon</div></pre></td></tr></table></figure>
<p>作用：监控代码，自动重启node服务器，更新浏览器页面，不用每次更改代码都启动</p>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon  build/auction_server.js</div></pre></td></tr></table></figure>
<ol>
<li>效果图展示</li>
</ol>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-31/39251611.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>


<h2 id="创建Angular应用"><a href="#创建Angular应用" class="headerlink" title="创建Angular应用"></a>创建Angular应用</h2><p>利用命令行工具 Angular CLI 创建一个名为 client 的 Angular 项目，并使用 <code>ng g</code> 命令自动生成模板文件。</p>
<p>如何生成 Angular 项目，请看另一篇文章：<a href="http://www.dpfblog.com/2017/08/15/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8Angular-CLI%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/" target="_blank" rel="external">学会使用Angular CLI命令行工具</a></p>
<ol>
<li>首先app.module.ts里要引入http模块</li>
</ol>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ProductComponent &#125; <span class="keyword">from</span> <span class="string">'./product/product.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  declarations: [</div><div class="line">    AppComponent,</div><div class="line">    ProductComponent</div><div class="line">  ],</div><div class="line">  imports: [</div><div class="line">    BrowserModule,</div><div class="line">    FormsModule,</div><div class="line">    HttpModule</div><div class="line">  ],</div><div class="line">  providers: [],</div><div class="line">  bootstrap: [AppComponent]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure>
<p>2.product.component.ts<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Http, Headers &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-product'</span>,</div><div class="line">  templateUrl: <span class="string">'./product.component.html'</span>,</div><div class="line">  styleUrls: [<span class="string">'./product.component.css'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductComponent <span class="keyword">implements</span> OnInit &#123;</div><div class="line"></div><div class="line">  products: Observable&lt;<span class="built_in">any</span>&gt;;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) &#123;</div><div class="line">      <span class="keyword">let</span> myHeaders: Headers = <span class="keyword">new</span> Headers();</div><div class="line">      myHeaders.append(<span class="string">'Authorization'</span>, <span class="string">'Basic 123456'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.products = <span class="keyword">this</span>.http.get(<span class="string">'/api/products'</span>, &#123;headers: myHeaders&#125;)</div><div class="line">        .map(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json());</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.product.compoent.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  商品信息</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li *ngFor=&quot;let product of products | async&quot;&gt;</div><div class="line">    &#123;&#123;product.title&#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>以上应用已经完成，这时候你启动服务器，商品信息并没有出来，商品请求报了 404 问题，这是什么原因呢？</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-31/93195515.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<p>这是因为服务的请求发往的是当前应用的相对路径，默认发送的请求是 <a href="http://localhost:4200，而服务运行在" target="_blank" rel="external">http://localhost:4200，而服务运行在</a> 8000 端口，为了让 http 发送的请求发往一个指定的路径，则需要以下配置。</p>
<h2 id="Angular实现跨域请求"><a href="#Angular实现跨域请求" class="headerlink" title="Angular实现跨域请求"></a>Angular实现跨域请求</h2><p>1.在 client 目录下中，创建一个 proxy.conf.json 的文件，配置如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"/api"</span>: &#123;</div><div class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:8000"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当应用发出去的请求是以 <code>/api</code> 开头时，把这些请求全部转发到 <code>http://localhost:8000</code> 这个地址。</p>
<p>2.在package.json文件的start里添一段代码<code>--proxy-config proxy.conf.json</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;start&quot;: &quot;ng serve --proxy-config proxy.conf.json&quot;,</div></pre></td></tr></table></figure>
<p>3.启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run start</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>切勿使用 <code>ng s</code>。</p>
<p>这时候，商品信息都能显示出来，以上问题得到解决。</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-31/10721156.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本篇文章涉及到的 http 通讯和搭建 nodejs 服务器内容可能只是一些初级知识，但希望对新手有所帮助，各位大佬们不喜勿喷。</p>
<p>项目源码：<a href="https://github.com/pengfeidai/auction-Angular" target="_blank" rel="external">https://github.com/pengfeidai/auction-Angular</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学习 Angular4.0，在学习过程中学到一些 http 服务端通讯以及跨域知识，将之记录下来。下面将附上实现步骤以及项目源码。&lt;/
    
    </summary>
    
    
      <category term="Angular" scheme="http://dpfblog.com/tags/Angular/"/>
    
      <category term="http" scheme="http://dpfblog.com/tags/http/"/>
    
      <category term="Node.js" scheme="http://dpfblog.com/tags/Node-js/"/>
    
      <category term="跨域" scheme="http://dpfblog.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>学会使用Angular CLI命令行工具</title>
    <link href="http://dpfblog.com/2017/08/20/Angular-CLI/"/>
    <id>http://dpfblog.com/2017/08/20/Angular-CLI/</id>
    <published>2017-08-20T08:26:24.000Z</published>
    <updated>2017-08-31T08:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方文档：<a href="https://angular.cn/guide/quickstart" target="_blank" rel="external">https://angular.cn/guide/quickstart</a></p>
<h2 id="步骤1-设置开发环境"><a href="#步骤1-设置开发环境" class="headerlink" title="步骤1. 设置开发环境"></a>步骤1. 设置开发环境</h2><p>如果你的机器上还没有 <code>Node.js</code> 和 <code>npm</code>，请先安装它们。</p>
<p>全局安装 Angular CLI<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g @angular/cli</div></pre></td></tr></table></figure></p>
<h2 id="步骤2-创建新项目"><a href="#步骤2-创建新项目" class="headerlink" title="步骤2. 创建新项目"></a>步骤2. 创建新项目</h2><p>打开终端窗口。</p>
<p>运行下列命令来生成一个新项目以及应用的骨架代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new my-app</div></pre></td></tr></table></figure></p>
<h2 id="步骤3-启动开发服务器"><a href="#步骤3-启动开发服务器" class="headerlink" title="步骤3. 启动开发服务器"></a>步骤3. 启动开发服务器</h2><p>进入项目目录，并启动服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd my-app</div><div class="line">ng serve --open</div><div class="line"></div><div class="line">// 或者</div><div class="line">npm run start</div></pre></td></tr></table></figure></p>
<p>ng serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。</p>
<p>使用 <code>--open</code>（或-o）参数可以自动打开浏览器并访问 <a href="http://localhost:4200/。" target="_blank" rel="external">http://localhost:4200/。</a></p>
<h2 id="步骤4-编辑我们的第一个Angular组件"><a href="#步骤4-编辑我们的第一个Angular组件" class="headerlink" title="步骤4. 编辑我们的第一个Angular组件"></a>步骤4. 编辑我们的第一个Angular组件</h2><p>这个CLI为我们创建了第一个 Angular 组件。 它就是名叫 app-root 的根组件。 你可以在<code>./src/app/app.component.ts</code> 目录下找到它。</p>
<ol>
<li>打开这个组件文件，可以修改 title 属性，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export class AppComponent &#123;</div><div class="line">  title = &apos;My First Angular App&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>浏览器会自动刷新，而我们会看到修改之后的标题。</p>
<ol>
<li>打开 src/app/app.component.css 可以给这个组件设置一些样式，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">h1 &#123;</div><div class="line">  color: #369;</div><div class="line">  font-family: Arial, Helvetica, sans-serif;</div><div class="line">  font-size: 250%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="步骤5-打包测试"><a href="#步骤5-打包测试" class="headerlink" title="步骤5. 打包测试"></a>步骤5. 打包测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ng build --prod    //默认生成/dist目录，并将打包后的结果存放在此</div><div class="line"></div><div class="line">ng test  //使用 karma 运行单元测试。</div></pre></td></tr></table></figure>
<h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>==打包编译后 html 空白问题解决：==</p>
<ol>
<li><p>在package.json文件的scripts中修改命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;build&quot;:&quot;ng build --base-href ./&quot;   //–base-href后面替换成打包后的base路径</div></pre></td></tr></table></figure>
</li>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>： 切勿使用 <code>ng s</code>启动。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>ng new</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new my-app --routing   // 路由</div></pre></td></tr></table></figure></p>
<p><strong>ng g</strong></p>
<p>==自动生成组件==，在 src/app 目录下生成4个 xx 模板文件，并更新 app.module.ts 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng g component xx</div></pre></td></tr></table></figure></p>
<p>==生成服务：==<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng g service productService</div></pre></td></tr></table></figure></p>
<p>==自定义管道，生成管道：==<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng g pipe pipe/multiple</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://angular.cn/guide/quickstart&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
    
      <category term="Angular" scheme="http://dpfblog.com/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="http://dpfblog.com/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript最全设计模式详解</title>
    <link href="http://dpfblog.com/2017/08/10/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://dpfblog.com/2017/08/10/JavaScript设计模式/</id>
    <published>2017-08-10T07:29:04.000Z</published>
    <updated>2017-08-21T02:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>让系统代码可重用、可扩展、可解耦、更容易被人理解且保证代码可靠性。设计模式使代码真正工程化。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-20/53954459.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>设计原则：</p>
<ol>
<li><p>开闭原则： 对扩展开放，对修改关闭</p>
</li>
<li><p>里氏转换原则： 子类继承父类，单独完全可以运行</p>
</li>
<li><p>依赖倒转原则： 引用一个对象，如果这个对象有底层类型，直接引用底层类型</p>
</li>
<li><p>接口隔离原则： 每一个接口应该是一种角色</p>
</li>
<li><p>合成/聚合复用原则： 新的对象应使用一些已有的对象，使之成为新对象的一部分</p>
</li>
<li><p>迪米特原则： 一个对象应对其他对象有尽可能少的了解</p>
</li>
</ol>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>保证一个类只有一个实例，实现方法是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，确保一个类只有一个实例对象。</p>
<p>在 JavaScript 中，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instantiated;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*这里定义单例代码*/</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">publicProperty</span>: <span class="string">'test'</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getInstance</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!instantiated) &#123;     <span class="comment">//确保只有一个实例</span></div><div class="line">                instantiated = init();  <span class="comment">//使用init方法，是使publicMethod和publicProperty只在要使用的时候才初始化;</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instantiated;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">/*调用公有的方法来获取实例:*/</span></div><div class="line">Singleton.getInstance().publicMethod();  <span class="comment">// hello world</span></div></pre></td></tr></table></figure>
<h3 id="作用和注意事项"><a href="#作用和注意事项" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>模块间通信</p>
</li>
<li><p>系统中某个类的对象只能存在一个</p>
</li>
<li><p>保护自己的属性和方法</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>注意this的使用</p>
</li>
<li><p>闭包容易造成内存泄露，不需要的要赶快清除</p>
</li>
<li><p>注意new的成本。（继承）</p>
</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在网页上实现一个登陆弹框，无论我们点击多少次登陆按钮，界面上始终只会显示一个登陆弹框，无法再创建第二个。</p>
<p><a href="https://github.com/pengfeidai/JavaScript" target="_blank" rel="external">源码下载</a> &nbsp;&nbsp;&nbsp; <a href="http://www.dpfblog.com/JavaScript/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="external">demo演示</a></p>
<p>（1）获取DOM对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">'string'</span> ? <span class="built_in">document</span>.getElementById(id) : id;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为了便于之后关于DOM的一些操作，我们这里利用函数式编程的原理将获取目标 id 的元素对象方法封装了一下，直接利用 $(id) 就可以获取。</p>
<p>（2）弹框构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Modal = <span class="function"><span class="keyword">function</span>(<span class="params">id, html</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.html = html;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.open = <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这里我们声明了一个 Modal 作为弹框的构造函数，并且再其内部定义了公有属性 html、id 和 open。html 用来定义弹框内部的内容，id 用来给弹框定义 id 名称，open 用于判断弹框是否打开。</p>
<p>（3）open方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Modal.prototype.create = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.open) &#123;</div><div class="line">        <span class="keyword">var</span> modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">        modal.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">        modal.id = <span class="keyword">this</span>.id;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(modal);</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            modal.classList.add(<span class="string">'show'</span>);</div><div class="line">        &#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.open = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在 Modal 的原型链上定义了 create 方法，方法内部我们创建并向 DOM 中插入弹框，同时给弹框加上一个 class 为 “show” 的动画效果。</p>
<p>（4）close方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Modal.prototype.delete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.open) &#123;</div><div class="line">        <span class="keyword">var</span> modal = $(<span class="keyword">this</span>.id);</div><div class="line"></div><div class="line">        modal.classList.add(<span class="string">'hide'</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.removeChild(modal);</div><div class="line">        &#125;, <span class="number">200</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.open = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>定义了 open 方法后我们这里定义关闭弹框的方法，在其内部给弹框对象添加 hide 类动画效果，最后在页面上移除弹框对象。</p>
<p>（5）创建实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> createIntance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance || (instance = <span class="keyword">new</span> Modal(<span class="string">'modal'</span>, <span class="string">'这是一个弹框'</span>))</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>这是实现单例模式的重要部分:</p>
<ol>
<li>使用闭包封装了 instance 私有变量并返回一个函数</li>
<li>利用 || 语法判断如果 instance 不存在则执行后者的实例化 Modal 方法，存在则直接返回 instance，确保了只存在一个弹框实例</li>
</ol>
<p>（6）按钮操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> operate = &#123;</div><div class="line">    <span class="attr">setModal</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">open</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setModal = createIntance();</div><div class="line">        <span class="keyword">this</span>.setModal.create();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setModal ? <span class="keyword">this</span>.setModal.delete() : <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这里我们将按钮操作放在 operate 对象里，使得打开和关闭操作可以通过this获取实例setModal。</p>
<p>（7）绑定事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'open'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    operate.open();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="string">'delete'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    operate.delete();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>最后我们将打开和删除方法绑定到两个按钮上去，至此我们用单例模式实现的弹框demo就实现了。</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p> 构造函数用于创建特定类型的对象——不仅声明了使用过的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。</p>
<h3 id="作用和注意事项-1"><a href="#作用和注意事项-1" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>用于创建特定类型的对象</p>
</li>
<li><p>第一次声明的时候给对象赋值</p>
</li>
<li><p>自己声明构造函数，赋予属性和方法</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>声明函数的时候处理业务逻辑</p>
</li>
<li><p>区分和单例的区别，配合单例实现初始化</p>
</li>
<li><p>构造函数大写字母开头</p>
</li>
<li><p>注意 new 的成本 （继承）</p>
</li>
</ol>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>强制使用new<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'is'</span> +  <span class="keyword">this</span>.age + <span class="string">'years old'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Davis"</span>, <span class="number">22</span>, <span class="string">"student"</span>);</div><div class="line"><span class="keyword">var</span> person2 = Person(<span class="string">"Faker"</span>, <span class="number">21</span>, <span class="string">"player"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.sayName());  <span class="comment">// Davis is 22 years old</span></div><div class="line"><span class="built_in">console</span>.log(person2.sayName());  <span class="comment">// Faker is 21 years old</span></div></pre></td></tr></table></figure></p>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p> 建造者模式可以将一个复杂的对象的构建与其表示相分离，使同样的构建过程可以创建不同的表示。如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。建造者模式实际就是一个指挥者，一个建造者，一个使用指挥者调用具体建造者工作得出结果的客户。主要用于“分步骤构建一个复杂的对象”。</p>
<h3 id="作用和注意事项-2"><a href="#作用和注意事项-2" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>分步创建一个复杂的对象</p>
</li>
<li><p>解耦封装过程和具体创建组件</p>
</li>
<li><p>无需关心组件如何组装</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>一定要一个稳定的算法进行支持（“分步骤”是一个稳定的算法）</p>
</li>
<li><p>加工工艺是暴露的</p>
</li>
</ol>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>一个土豪需要建一个别墅，然后直接找包工头，包工头再找工人把别墅建好。这里土豪不用直接一个一个工人的去找。只需包工头知道土豪需求，然后去找工人，工人干活，土豪也不需要知道房子具体怎么建，最后能拿到房就可以了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.产出东西是房子</span></div><div class="line"><span class="comment">//2.包工头调用工人进行开工而且他要很清楚工人们具体的某一个大项</span></div><div class="line"><span class="comment">//3.工人是盖房子的 工人可以建厨房、卧室、建客厅</span></div><div class="line"><span class="comment">//4.包工头只是一个接口而已 他不干活 他只对外说我能建房子</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">House</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.kitchen = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.bedroom = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.livingroom = <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Contractor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.construct = <span class="function"><span class="keyword">function</span>(<span class="params">worker</span>) </span>&#123;</div><div class="line">        worker.construct_kitchen();</div><div class="line">        worker.construct_bedroom();</div><div class="line">        worker.construct_livingroom();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.construct_kitchen =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"厨房建好了"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.construct_bedroom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"卧室建好了"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.construct_livingroom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"客厅建好了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.submit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _house = <span class="keyword">new</span> House();</div><div class="line">        _house.kitchen = <span class="string">"finished"</span>;</div><div class="line">        _house.bedroom = <span class="string">"finished"</span>;</div><div class="line">        _house.livingroom = <span class="string">"finished"</span>;</div><div class="line">        <span class="keyword">return</span> _house;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker();</div><div class="line"><span class="keyword">var</span> contractor = <span class="keyword">new</span> Contractor();</div><div class="line">contractor.construct(worker);</div><div class="line"><span class="comment">// 主人要房子</span></div><div class="line"><span class="keyword">var</span> myhouse = worker.submit();</div><div class="line"><span class="built_in">console</span>.log(myhouse);</div></pre></td></tr></table></figure>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型（抽象工厂）。</p>
<h3 id="作用和注意事项-3"><a href="#作用和注意事项-3" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>对象构建十分复杂</p>
</li>
<li><p>需要依赖具体的环境创建不同的实例</p>
</li>
<li><p>处理大量具有相同属性的小对象</p>
</li>
</ol>
<p>注意事项：</p>
<p>1、不能滥用工厂，有时候仅仅是给代码增加复杂度</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>简单工厂模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> XMLHttpFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">XMLHttpFactory.createXMLHttp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = <span class="literal">null</span>;</div><div class="line">    <span class="comment">// XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XMLHttp;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> AjaxHander = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class="line">    <span class="comment">/*...具体操作... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象工厂模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> XMLHttpFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">XMLHttpFactory.prototype = &#123;</div><div class="line"><span class="comment">// 如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类</span></div><div class="line">    createFactory:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This is an abstract class"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> XHRHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    XMLHttpFactory.call(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line">XHRHandler.prototype = <span class="keyword">new</span> XMLHttpFactory();</div><div class="line">XHRHandler.prototype.constructor = XHRHandler;  <span class="comment">// 重新定义 createFactory 方法</span></div><div class="line"></div><div class="line">XHRHandler.prototype.createFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XMLHttp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> AjaxHander = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class="line">    <span class="comment">/*...具体操作... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象工厂只留一个接口，不做具体的事，让别的子类来继承我这个类，然后做它自己的事。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>代理模式（Proxy），为其他对象提供一种代理以控制对这个对象的访问。代理模式使得代理对象控制具体对象的引用。代理几乎可以是任何对象：文件，资源，内存中的对象，或者是一些难以复制的东西。</p>
<h3 id="作用和注意事项-4"><a href="#作用和注意事项-4" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>远程代理（一个对象将不同空间的对象进行局部代理）</p>
</li>
<li><p>虚拟代理（根据需要创建开销很大的对象，如图片预加载）</p>
</li>
<li><p>安全代理（控制真实对象的访问权限）</p>
</li>
<li><p>智能指引（调用对象代理处理另外一些事情，如垃圾回收机制）</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li>不能滥用代理，有时候仅仅是给代码增加复杂度</li>
</ol>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理模式需要三方</span></div><div class="line"><span class="comment">// 1.买家</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buyer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Davis"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2.中介</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">agent</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">agent.prototype.sell = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">new</span> seller(<span class="keyword">new</span> buyer()).sell(<span class="string">"50万"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.卖家  收钱</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">seller</span>(<span class="params">buyer</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.buyer_name = buyer.name;</div><div class="line">    <span class="keyword">this</span>.sell = <span class="function"><span class="keyword">function</span>(<span class="params">money</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"收到了来自"</span> +  <span class="keyword">this</span>.buyer_name + money + <span class="string">"人民币"</span>);  <span class="comment">// 收到了来自Davis50万人民币</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">(<span class="keyword">new</span> agent).sell();</div></pre></td></tr></table></figure>
<p>虚拟代理实现图片预加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图片加载函数</span></div><div class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;   <span class="comment">//  提供一个对外的setSrc接口，外界调用这个接口，可以给该img标签设置src属性</span></div><div class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">      imgNode.src = src;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 引入代理对象</span></div><div class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image;</div><div class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 图片加载完成，正式加载图片</span></div><div class="line">    myImage.setSrc(<span class="keyword">this</span>.src);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">setSrc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">      <span class="comment">// 图片未被载入时，加载一张提示图片</span></div><div class="line">      myImage.setSrc(<span class="string">"file://c:/loading.png"</span>);</div><div class="line">      img.src = src;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 调用代理对象加载图片</span></div><div class="line">proxyImage.setSrc(<span class="string">"http://images/water.jpg"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>将请求封装成对象，分离命令接受者和发起者之间的耦合。命令执行之前在执行对象中传入接受者，主要目的相互之间的解耦。简单而言分为三个对象：</p>
<ol>
<li><p>发起者：发出调用命令即可，具体如何执行，谁执行并不需要清楚。</p>
</li>
<li><p>接受者：有对应的接口处理不同的命令，至于命令是什么，谁发出的，不用关心。</p>
</li>
<li><p>命令对象：上面讲发起者和接受者分开了，二者之间需要个连接桥梁。这就是命令对象。命令对象接受发送者的调用，然后调用接受者的相应接口。</p>
</li>
</ol>
<h3 id="作用和注意事项-5"><a href="#作用和注意事项-5" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>将函数的封装、请求、调用结合为一体</p>
</li>
<li><p>调用具体的函数解耦命令对象与接收对象</p>
</li>
<li><p>提高程序模块化的灵活性</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li>不需要借口一致，直接调用函数即可，以免造成浪费</li>
</ol>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>场景如下：有个按钮button，点击之后，调用menu对象的refresh方法，输出“刷新”的内容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发送者</span></div><div class="line"><span class="keyword">var</span> setCommond = <span class="function"><span class="keyword">function</span>(<span class="params">button, fn</span>) </span>&#123;</div><div class="line">    button.onClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn()</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 执行命令者</span></div><div class="line"><span class="keyword">var</span> menu = &#123;</div><div class="line">    <span class="attr">reFresh</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"刷新"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"增加"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"删除"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 命令对象</span></div><div class="line"><span class="keyword">var</span> commondObj = <span class="function"><span class="keyword">function</span>(<span class="params">reciver</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        reciver.reFresh();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> commondObj1 = commondObj(menu);</div><div class="line">setCommond(btn1, commondObj1);</div></pre></td></tr></table></figure>
<p>发送者(setCommond)：不关心给哪个button，以及绑定什么事件，只要通过参数传入就好。</p>
<p>命令对象(commondObj):只需要接收到接受者的参数，当发送者发出命令时，执行就好。</p>
<p>接受者(menu):不用关心在哪里被调用被谁调用，只需要按需执行就好了。</p>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h3><p>定义一系列方法，封装起来使他们可以相互替换。也就是将策略封装在策略类中，当发起请求时管理类将请求委托给对应策略类。</p>
<ol>
<li><p>发起者：发出调用命令即可，具体如何执行，谁执行并不需要清楚。</p>
</li>
<li><p>接受者：有对应的接口处理不同的命令，至于命令是什么，谁发出的，不用关心。</p>
</li>
<li><p>命令对象：上面讲发起者和接受者分开了，二者之间需要个连接桥梁。这就是命令对象。命令对象接受发送者的调用，然后调用接受者的相应接口。</p>
</li>
</ol>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>模式作用：</p>
<ol>
<li><p>策略模式利用组合，委托等技术和思想，有效的避免很多if条件语句。</p>
</li>
<li><p>策略模式提供了开放-封闭原则，使代码更容易理解和扩展。</p>
</li>
<li><p>策略模式中的代码可以复用。</p>
</li>
</ol>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>假设我们现在有这样一个需求：需要根据form表单元素的不同类型，当点击的时候输出对应的表单元素类型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * 针对不同情况的策略算法封装在策略类fucs中，</div><div class="line">  * 从调用事件中去除繁琐的if或者switch逻辑判断。达到解耦的目的</div><div class="line">  * 加入后面再增加‘select’的选项增加对应的方法即可</div><div class="line">  */</div><div class="line"> <span class="keyword">var</span> funcs = &#123;</div><div class="line">   <span class="attr">text</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is text'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">radio</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is radio'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">checkbox</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is checkbox'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is default'</span>)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> renderDom = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 只需要根据不同的入参，自行匹配策略类中的接口即可。</div><div class="line">      */</div><div class="line">     <span class="keyword">return</span> (funcs[type] || funcs[<span class="string">'default'</span>])()</div><div class="line"> &#125;</div><div class="line">renderDom(<span class="string">'checkbox'</span>)</div></pre></td></tr></table></figure>
<ol>
<li><p>策略对象就是funcs对象，里面的不同属性接口对应的方法就是策略。与逻辑判断分离开，如果有不同的情况的出现，对应的增加属性接口即可。</p>
</li>
<li><p>renderDom方法就是对应的管理类，只需要根据不同的type，去调用funcs不同的方法就ok了。如果type没有对应的接口，那就调用默认的default对应接口。</p>
</li>
<li><p>调用事件，就保持不变。将tyoe类型传过去就好了。</p>
</li>
</ol>
<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><h3 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h3><p>职责链由多个不同的对象组成，发送者是发送请求的对象，而接收者则是链中那些接收请求并且对其进行处理或传递的对象。请求本身有时候也可以是一个对象，它封装了和操作有关的所有数据，基本实现流程如下：</p>
<ol>
<li><p>发送者知道链中的第一个接收者，它向这个接收者发送该请求。</p>
</li>
<li><p>每一个接收者都对请求进行分析，然后要么处理它，要么它往下传递。</p>
</li>
<li><p>每一个接收者知道其他的对象只有一个，即它在链中的下家(successor)。</p>
</li>
<li><p>如果没有任何接收者处理请求，那么请求会从链中离开。</p>
</li>
</ol>
<h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>现有A、B、C、D四个生产线，生产总量为2100，每个生产线的生产量未知且在0~2100(包括0和2100，保证总量为2100即可)，生产完毕后，分6次进行运输，规定每台车辆只能运350，且装满后才能够出发，装车顺序为ABCD,即上一个生产线生产的东西装完后才能够装下一个生产线的东西，要求根据每条生产线的生产量，给出每台车辆的托运安排。</p>
<p>例如： A：100 ， B：1400 ，C：500 ， D：100<br>托运安排：<br>第一辆车： A：100 ， B：250<br>第二辆车： A：0 ， B：350<br>第三辆车： A：0 ， B：350<br>第四辆车： A：0 ， B：350<br>第五辆车： A：0 ， B：100 ，C：250<br>第六辆车： A：0 ， B：0 ， C：250 ，D：100</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(volume,wearHouse)&#123;</div><div class="line">            <span class="keyword">this</span>.volume=volume;</div><div class="line">            <span class="keyword">this</span>.wearHouse=wearHouse;</div><div class="line">            <span class="keyword">this</span>.outString=[];</div><div class="line">        &#125;</div><div class="line">        next(take)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.wearHouse!=<span class="literal">undefined</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">this</span>.wearHouse.takeOut(take).forEach(<span class="function">(<span class="params">subT</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.outString.push(subT)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        takeOut(num)&#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;<span class="keyword">this</span>.volume)&#123;</div><div class="line">                num-=<span class="keyword">this</span>.volume;</div><div class="line">                <span class="keyword">var</span> temp=<span class="keyword">this</span>.volume;</div><div class="line">                <span class="keyword">this</span>.volume=<span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.outString.push(<span class="keyword">this</span>.print(<span class="number">0</span>,temp));</div><div class="line">                <span class="keyword">this</span>.next(num);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">this</span>.volume-=num;</div><div class="line">                <span class="keyword">this</span>.outString.push(<span class="keyword">this</span>.print(<span class="keyword">this</span>.volume,num));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> temOut=<span class="keyword">this</span>.outString;</div><div class="line">            <span class="keyword">this</span>.outString=[];</div><div class="line">            <span class="keyword">return</span> temOut;</div><div class="line">        &#125;</div><div class="line">        print(volumn,takeNum)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseA</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'A'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseB</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'B'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseC</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'C'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseD</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'D'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> D=<span class="keyword">new</span> WearHouseD(<span class="number">100</span>,<span class="literal">undefined</span>);</div><div class="line">    <span class="keyword">var</span> C=<span class="keyword">new</span> WearHouseC(<span class="number">500</span>,D);</div><div class="line">    <span class="keyword">var</span> B=<span class="keyword">new</span> WearHouseB(<span class="number">1400</span>,C);</div><div class="line">    <span class="keyword">var</span> A=<span class="keyword">new</span> WearHouseA(<span class="number">100</span>,B);</div><div class="line">    <span class="keyword">var</span> strSet=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)&#123;</div><div class="line">        strSet.push(...A.takeOut(<span class="number">350</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(strSet);</div></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>使用设计模式的是为了提高我们解决问题的效率，不同的设计模式也是针对不同环境的特定方案，不仅仅是单独的某一种设计模式，大多数情况下都是多个模式共存的。切勿为了使用设计模式而强行引入，增加代码复杂度。</p>
<p>学习资源：链接：<a href="http://pan.baidu.com/s/1i5BYiGH" target="_blank" rel="external">http://pan.baidu.com/s/1i5BYiGH</a> 密码：3s4v</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;让系统代码可重用、可扩展、可解耦、更容易被人理解且保证代码可靠性。设计模式使代码真正工程化。&lt;/p&gt;
&lt;figure class=&quot;imag
    
    </summary>
    
    
      <category term="Javascript" scheme="http://dpfblog.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://dpfblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>cubic-bezier(贝塞尔曲线)</title>
    <link href="http://dpfblog.com/2017/08/05/cubic-bezier/"/>
    <id>http://dpfblog.com/2017/08/05/cubic-bezier/</id>
    <published>2017-08-05T08:58:46.000Z</published>
    <updated>2017-08-18T14:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>cubic-bezier</code> 又称三次贝塞尔，主要是为 animation 生成速度曲线的函数, CSS3 动画速度的控制通过三次贝塞尔曲线函数实现，定义规则为： <code>cubic-bezier (x1, y1, x2, y2)</code>。</p>
<p><strong>cubic-bezier：</strong><a href="http://cubic-bezier.com/" target="_blank" rel="external">http://cubic-bezier.com/</a></p>
<p>css3中常用的几个动画效果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)   // 开始和结束慢，中间快</div><div class="line">linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)   // 匀速</div><div class="line">ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)   // 开始慢</div><div class="line">ease-out: cubic-bezier(0, 0, 0.58, 1.0)   // 结速慢</div><div class="line">ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)  // 与ease类似，但比ease幅度大</div></pre></td></tr></table></figure>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>贝塞尔曲线通过控制曲线上的四个点（起始点、终止点以及两个相互分离的中间点）来创造、编辑图形，绘制出一条光滑曲线并以曲线的状态来反映动画过程中速度的变化。</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-18/96108401.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<p>从上图我们知道的是 <code>cubic-bezier</code> 的取值范围:</p>
<ul>
<li>A：默认值 (0, 0)</li>
<li>B：动态取值 (x1, y1)</li>
<li>C：动态取值 (x2, y2)</li>
<li>D：默认值 (1, 1)</li>
</ul>
<p>其中 X 轴的取值范围是 [0, 1]，当取值超出范围时 cubic-bezier 将失效；Y 轴的取值没有规定，当然也毋须超过 [0, 1] 过大。</p>
<p>我们需要关注的是 B 和 C 两点的取值，这两点就是所要动态操控的两个点了,对应cubic-bezier (x1,y1,x2,y2)中的四个参数。</p>
<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>下面用一个简单的实例来看看效果：<a href="http://www.dpfblog.com/CSS3-demo/cubic-bezier" target="_blank" rel="external">demo演示</a></p>
<p>html 部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.normal</span> &#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>:  all <span class="number">2s</span>;</div><div class="line">     <span class="attribute">-moz-transition</span>:  all <span class="number">2s</span>;</div><div class="line">       <span class="attribute">-o-transition</span>:  all <span class="number">2s</span>;</div><div class="line">          <span class="attribute">transition</span>:  all <span class="number">2s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.normal</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">     <span class="attribute">-moz-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">       <span class="attribute">-o-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">          <span class="attribute">transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.custom</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">-webkit-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">     <span class="attribute">-moz-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">       <span class="attribute">-o-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">          <span class="attribute">transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.custom</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">     <span class="attribute">-moz-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">       <span class="attribute">-o-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">          <span class="attribute">transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>红色小球采用默认的速度曲线是 ease，蓝色小球采用自定义cubic-bezier(.94,-0.25,.32,1.31),呈现蓄力加速效果。</p>
<h2 id="transition（过渡）"><a href="#transition（过渡）" class="headerlink" title="transition（过渡）"></a>transition（过渡）</h2><p>transition属性</p>
<ul>
<li><p><code>transition-property</code>: 过渡属性(默认值为all)</p>
</li>
<li><p><code>transition-duration</code>: 过渡持续时间(默认值为0s)</p>
</li>
<li><p><code>transiton-timing-function</code>: 过渡函数(默认值为ease函数)</p>
</li>
<li><p><code>transition-delay</code>: 过渡延迟时间(默认值为0s)</p>
</li>
</ul>
<p>语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">property</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span>;</div></pre></td></tr></table></figure></p>
<h2 id="animation（动画）"><a href="#animation（动画）" class="headerlink" title="animation（动画）"></a>animation（动画）</h2><p>animation属性结合@ keyframes使用，animation中的animation-name需要设置成@ keyframes的name一致。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid black;</div><div class="line">    <span class="attribute">animation</span>: changebox <span class="number">10s</span> ease-in-out <span class="number">3</span> alternate paused;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> changebox &#123;</div><div class="line">    10% &#123;</div><div class="line">        <span class="attribute">background</span>: red;</div><div class="line">    &#125;</div><div class="line">    50% &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">    &#125;</div><div class="line">    70% &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">15px</span> solid yellow;</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">180px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>animation属性</p>
<ul>
<li><p><code>animation-name</code>: 指定要绑定到选择器的关键帧的名称</p>
</li>
<li><p><code>animation-duration</code>: 动画指定需要多少秒或毫秒完成</p>
</li>
<li><p><code>animation-timing-function</code>: 设置动画将如何完成一个周期</p>
</li>
<li><p><code>animation-delay</code>: 设置动画在启动前的延迟间隔</p>
</li>
<li><p><code>animation-iteration-count</code>: 定义动画的播放次数</p>
</li>
<li><p><code>animation-direction</code>: 指定是否应该轮流反向播放动画</p>
</li>
<li><p><code>animation-fill-mode</code>:规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式</p>
</li>
<li><p><code>animation-play-state</code>: 指定动画是否正在运行或已暂停。<br>语法</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span> <span class="selector-tag">fill-mode</span> <span class="selector-tag">play-state</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="transform（变形）"><a href="#transform（变形）" class="headerlink" title="transform（变形）"></a>transform（变形）</h2><p>transform 分为2D 和 3D，其主要包含以下几种变换：translate位移，scale缩放，rotate旋转，skew扭曲等。</p>
<p><strong>2D变形：</strong></p>
<p><code>translate位移</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: translate(50px, 100px);</div><div class="line">transform: translateX(50px);  // x方向移动50px</div><div class="line">transform: translateY(100px);</div></pre></td></tr></table></figure></p>
<p><code>scale缩放</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: scale(2, .5);</div><div class="line">transform: scaleX(2);   // x方向增加一倍</div><div class="line">transform: scaleY(.5);  // y方向缩小一倍</div></pre></td></tr></table></figure></p>
<p><code>rotate旋转</code>：rotate（正数表示顺时针旋转，负数表示逆时针旋转）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(30<span class="selector-tag">deg</span>);</div></pre></td></tr></table></figure></p>
<p><code>skew扭曲</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>, 30<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(30<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(30<span class="selector-tag">deg</span>);</div></pre></td></tr></table></figure></p>
<p><strong>3D变形：</strong></p>
<p><code>translate位移</code>： translate(x, y, z);</p>
<p><code>scale缩放</code>： scale(x, y, z);</p>
<p><code>rotate旋转</code>：rotate3d(x, y, z, angle)  (angle:表示3D舞台上旋转的角度)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cubic-bezier&lt;/code&gt; 又称三次贝塞尔，主要是为 animation 生成速度曲线的函数, CSS3 动画速度的
    
    </summary>
    
    
      <category term="CSS3" scheme="http://dpfblog.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Javascript面向对象</title>
    <link href="http://dpfblog.com/2017/07/28/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://dpfblog.com/2017/07/28/JS面向对象编程/</id>
    <published>2017-07-28T06:52:56.000Z</published>
    <updated>2017-08-21T02:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript 是一门基于对象的编程语言，在 JavaScript 中一切都是对象，包括函数，也是被当成第一等的对象对待，这正是 JavaScript 极其富有表现力的原因。</p>
<p><center><img src="http://ot4esom84.bkt.clouddn.com/17-7-28/87918823.jpg" style="width: 350;height: 250px;"></center><br></p>
<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>ECMA-262 关于对象的定义是：“无序属性的集合，其属性可以包含基本值、对象或者函数。” 严格说，对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>
<ol>
<li><p>早期，创建对象就是创建一个 Object的实例，并为它添加属性( name、age )和方法( sayName() )，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Davis"</span>;</div><div class="line">person.age = <span class="number">22</span>;</div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>现在，对象字面量成为创建对象的首选模式，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    name = <span class="string">"Davis"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line"></div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这两个例子中 person 对象事一样的，有相同的属性和方法。这些属性在创建时都有一些特征值(characteristic),JavaScript 通过这些特征值来定义他们的行为。</p>
<h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><p>ECMAScript 中有两种属性：数据属性和访问器属性。</p>
<ul>
<li>数据属性<br>数据属性包含一个数据值的位置，在这个位置可以读取和写入值，具有如下4个特性：</li>
</ul>
<p><code>[[Configurable]]:</code>  表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属<br>性修改为访问器属性。直接在对象上定义的属性，默认为 true。<br><code>[[Enumerable]]:</code> 表示能否通过for-in循环返回属性。直接在对象上定义的属性，默认为true。<br><code>[[Writable]]:</code> 表示能否修改属性的值。直接在对象上定义的属性，默认为true。<br><code>[[Value]]:</code> 包含这个属性的数据值；读取属性值的时候，从这个位置读取；写入属性值的时候，把值保存在这里。这个特性默认为undefined</p>
<p>要修改数据属性默认的特性，必须使用ECMAScript5中的Object.defineProperty()方法；接受三个参数：属性所在的对象、属性的名字、描述符对象；其中，数据属性描述符对象的属性必须是：configurable、enumerable、writable和value。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;&#125;;</div><div class="line">Object.defineProperty(person, &quot;name&quot;, &#123;</div><div class="line">   writable: false,</div><div class="line">   value: &quot;Davis&quot;</div><div class="line">&#125;);</div><div class="line">alert(person.name);    //&quot;Davis&quot;</div><div class="line">person.name = &quot;XX&quot;;</div><div class="line">alert(person.name);    //&quot;Davis&quot;</div></pre></td></tr></table></figure></p>
<ul>
<li>访问器属性<br>访问器属性包含一对 getter 和 setter 函数。在读取访问器属性时，会调用 getter 函数，负责返回有效的值；在写入时，会调用 setter 函数并传入新值,负责决定如何处理数据。具有如下4个特性：</li>
</ul>
<p><code>[[Configurable]]:</code>  表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属<br>性修改为访问器属性。直接在对象上定义的属性，默认为 true。<br><code>[[Enumerable]]:</code> 表示能否通过for-in循环返回属性。直接在对象上定义的属性，默认为true。<br><code>[[Get]]:</code> 在读取属性时调用的函数；默认值为undefined。在读取访问器属性时，会调用gette方法，这个函数负责返回有效的值。<br><code>[[Set]]:</code> 在写入属性时调用的函数；默认值为undefined。在写入访问器属性时，会调用setter方法并传入新值，这个函数负责决定如何处理数据。</p>
<p>访问器属性不能直接定义，必须使用Object.defineProperty()方法来定义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="attr">_year</span>: <span class="number">2016</span>,</div><div class="line">    <span class="attr">edition</span>: <span class="number">5</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">            <span class="keyword">this</span>._year = newVal;</div><div class="line">            <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">book.year = <span class="number">2017</span>;</div><div class="line">alert(book.edition);  <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<h3 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h3><p>Object.defineProperties()方法，通过描述符一次性定义多个属性；</p>
<p>接收两个对象参数：第一个对象是要添加或修改其属性的对象；第二个对象的属性与第一个对象中要添加或修改的属性一一对应。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">    <span class="attr">_year</span>: &#123;</div><div class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">value</span>: <span class="number">2016</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">edition</span>: &#123;</div><div class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">value</span>: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">year</span>: &#123;</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">                <span class="keyword">this</span>._year = newVal;</div><div class="line">                <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>以上代码在 book 对象上定义了两个数据属性( _year 和 edition )和一个访问器属性<br>( year )。</p>
<h3 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h3><p>Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符；</p>
<p>接收两个参数：属性所在的对象，要读取其描述符的属性名称。</p>
<p>返回值是一个对象；如果是数据属性，这个对象的属性有configurable、enumerable、writable、value；如果是访问器属性，这个对象的属性有configurable、enumerable、get、set。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">    <span class="attr">_year</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">2016</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">edition</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">year</span>: &#123;</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">                <span class="keyword">this</span>._year = newVal;</div><div class="line">                <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line">alert(d.value);   <span class="comment">// 2016</span></div><div class="line">alert(d.configurable);   <span class="comment">// false</span></div><div class="line">alert(type d.get);   <span class="comment">// "undefined"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</div><div class="line">alert(d.value);   <span class="comment">// undefined</span></div><div class="line">alert(d.enumerable);   <span class="comment">// false</span></div><div class="line">alert(type d.get);   <span class="comment">// "function"</span></div></pre></td></tr></table></figure></p>
<p>对于数据属性_year, value 等于最初的值，configurable 是false，而 get 等于 undefined。 对于访问属性 year，value 等于 undefined，enumerable 是 false，而 get 是指向 getter函数的指针。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript 是一门基于对象的编程语言，在 JavaScript 中一切都是对象，包括函数，也是被当成第一等的对象对待，这正是 Ja
    
    </summary>
    
    
      <category term="Javascript" scheme="http://dpfblog.com/tags/Javascript/"/>
    
      <category term="oop" scheme="http://dpfblog.com/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现轮播图组件</title>
    <link href="http://dpfblog.com/2017/07/22/Vue-Carousel/"/>
    <id>http://dpfblog.com/2017/07/22/Vue-Carousel/</id>
    <published>2017-07-22T13:37:50.000Z</published>
    <updated>2017-09-19T06:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在学习 Vue，看到大多数项目首页都有轮播效果，然后自己也是做了一个轮播图，希望分享给大家。</p>
<h2 id="主要技术"><a href="#主要技术" class="headerlink" title="主要技术"></a>主要技术</h2><ol>
<li>v-if: 条件渲染</li>
<li>v-for：列表渲染</li>
<li>v-bind：属性绑定</li>
<li>transition: 过渡效果</li>
<li>组件交互: 父组件通过 props 将数据传递给子组件</li>
</ol>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>轮播图中，它显示的那张图片在浏览器中可以看到有dom元素。隐藏的是没有dom元素的。所以如果显示一张图片，实际上，轮播列表中只有一个元素是存在的，其他的都被删掉了。按照这个思路，就很简单了。想要轮播，设置：enter：右边→enter-to：正常位置，并且过渡完成→leave：正常位置→leave-to：左边，并且过渡完成。</p>
<h2 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h2><p>👉<a href="http://www.dpfblog.com/Carousel/" target="_blank" rel="external">http://www.dpfblog.com/Carousel/</a></p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>项目源码：👉<a href="https://github.com/pengfeidai/Carousel" target="_blank" rel="external">https://github.com/pengfeidai/Carousel</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近在学习 Vue，看到大多数项目首页都有轮播效果，然后自己也是做了一个轮播图，希望分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;主要技术&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="Vue" scheme="http://dpfblog.com/tags/Vue/"/>
    
      <category term="Carousel" scheme="http://dpfblog.com/tags/Carousel/"/>
    
  </entry>
  
  <entry>
    <title>ES6编码风格</title>
    <link href="http://dpfblog.com/2017/07/20/ES6%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>http://dpfblog.com/2017/07/20/ES6编码风格/</id>
    <published>2017-07-20T14:18:06.000Z</published>
    <updated>2017-09-26T02:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><h3 id="let-取代-var"><a href="#let-取代-var" class="headerlink" title="let 取代 var"></a>let 取代 var</h3><p>ES6 提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if (true) &#123;</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果用<code>var</code>替代<code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code>命令做不到这一点。</p>
<p><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if(true) &#123;</div><div class="line">  console.log(x); // ReferenceError</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。<br>所以，建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代。</p>
<h3 id="全局常量和线程安全"><a href="#全局常量和线程安全" class="headerlink" title="全局常量和线程安全"></a>全局常量和线程安全</h3><p>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p><code>const</code>优于<code>let</code>有几个原因。一个是<code>const</code>可以提醒阅读程序的人，这个变量不应该改变；另一个是<code>const</code>比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对<code>const</code>进行优化，所以多使用<code>const</code>，有利于提供程序的运行效率，也就是说<code>let</code>和<code>const</code>的本质区别，其实是编译器内部的处理不同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var a = 1, b = 2, c = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = 1;</div><div class="line">const b = 2;</div><div class="line">const c = 3;</div><div class="line"></div><div class="line">// best</div><div class="line">const [a, b, c] = [1, 2, 3];</div></pre></td></tr></table></figure></p>
<p><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时<code>let</code>表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const c = `foobar`;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// bad</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure></p>
<p>函数的参数如果是对象的成员，优先使用解构赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(obj) &#123;</div><div class="line">  const &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// best</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// if reshape unavoidable</div><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure></p>
<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">  [getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>
<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// bad</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>使用扩展运算符（…）拷贝数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure>
<p>使用Array.from方法，将类似数组的对象转为数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>立即执行函数可以写成箭头函数的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">[1, 2, 3].map((x) =&gt; &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// best</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure></p>
<p>箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const self = this;</div><div class="line">const boundMethod = function(...params) &#123;</div><div class="line">  return method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const boundMethod = method.bind(this);</div><div class="line"></div><div class="line">// best</div><div class="line">const boundMethod = (...params) =&gt; method.apply(this, params);</div></pre></td></tr></table></figure></p>
<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>
<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function divide(a, b, option = false ) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用默认值语法设置函数参数的默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h2><p>注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line"></div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const inherits = require(&apos;inherits&apos;);</div><div class="line">function PeekableQueue(contents) &#123;</div><div class="line">  Queue.apply(this, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = function() &#123;</div><div class="line">  return this._queue[0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class PeekableQueue extends Queue &#123;</div><div class="line">  peek() &#123;</div><div class="line">    return this._queue[0];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure></p>
<p>使用export取代module.exports。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// commonJS的写法</div><div class="line">var React = require(&apos;react&apos;);</div><div class="line"></div><div class="line">var Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = Breadcrumbs;</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">class Breadcrumbs extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Breadcrumbs;</div></pre></td></tr></table></figure></p>
<p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。</p>
<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">import * as myObject &apos;./importModule&apos;;</div><div class="line"></div><div class="line">// good</div><div class="line">import myObject from &apos;./importModule&apos;;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个函数，函数名的首字母应该小写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function makeStyleGuide() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default makeStyleGuide;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个对象，对象名的首字母应该大写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const StyleGuide = &#123;</div><div class="line">  es6: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default StyleGuide;</div></pre></td></tr></table></figure></p>
<h2 id="ESLint的使用"><a href="#ESLint的使用" class="headerlink" title="ESLint的使用"></a>ESLint的使用</h2><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p>
<p>首先，安装ESLint。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint</div></pre></td></tr></table></figure></p>
<p>然后，安装Airbnb语法规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure></p>
<p>最后，在项目的根目录下新建一个.eslintrc文件，配置ESLint。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;extends&quot;: &quot;eslint-config-airbnb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在就可以检查，当前项目的代码是否符合预设的规则。</p>
<p>index.js文件的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var unusued = &apos;I have no purpose!&apos;;</div><div class="line"></div><div class="line">function greet() &#123;</div><div class="line">    var message = &apos;Hello, World!&apos;;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line">greet();</div></pre></td></tr></table></figure></p>
<p>使用ESLint检查这个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ eslint index.js</div><div class="line">index.js</div><div class="line">  1:5  error  unusued is defined but never used                 no-unused-vars</div><div class="line">  4:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line">  5:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line"></div><div class="line">✖ 3 problems (3 errors, 0 warnings)</div></pre></td></tr></table></figure></p>
<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>
<h2 id="解决浏览器兼容ES6特性"><a href="#解决浏览器兼容ES6特性" class="headerlink" title="解决浏览器兼容ES6特性"></a>解决浏览器兼容ES6特性</h2><p>使用 babel 转换工具： <a href="https://babeljs.io/" target="_blank" rel="external">https://babeljs.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h2&gt;&lt;h3 id=&quot;let-取代-var&quot;&gt;&lt;a href=&quot;#let-取代-var&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Javascript" scheme="http://dpfblog.com/tags/Javascript/"/>
    
      <category term="ES6" scheme="http://dpfblog.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6，你真的知道吗</title>
    <link href="http://dpfblog.com/2017/07/16/%E6%B5%85%E8%B0%88ES6%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9/"/>
    <id>http://dpfblog.com/2017/07/16/浅谈ES6核心内容/</id>
    <published>2017-07-16T14:33:25.000Z</published>
    <updated>2017-08-21T02:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h2><p>ECMAScript6（简称ES6）是 JavaScript 语言的下一代标准。在2015年6月正式发布，所以又称ES2015。<br>由于目前并不是所有浏览器都能兼容 ES6 全部特性，但是 ES6 在实际项目中的广泛使用已成为一种趋势。所以作为一个前端开发者，ES6 的语法是我们必须掌握的。</p>
<p>在讲解 ES6 语法之前，我们得先了解下Babel。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。可在Babel官网 (<a href="http://babeljs.io/" target="_blank" rel="external">http://babeljs.io/</a>) 查看：</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-1/80019165.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<p><strong>使用Gulp 和 Babel 将 ES6 代码转换成 ES5 代码具体过程如下：</strong></p>
<p><strong>安装依赖</strong></p>
<ol>
<li><p>安装全局 Gulp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure>
</li>
<li><p>安装项目中使用的 Gulp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Gulp 上 Babel 的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp-babel</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Babel 上将 ES6 转换成 ES5 的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>Gulp 配置</strong></p>
<ol>
<li><p>gulpfile.js 的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/**/*.js"</span>)   <span class="comment">// ES6 源码存放的路径</span></div><div class="line">    .pipe(babel())</div><div class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));     <span class="comment">//转换成 ES5 存放的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果要生成 Soucemap， 则用 gulp-sourcemaps</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">"gulp-sourcemaps"</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/**/*.js"</span>)</div><div class="line">    .pipe(sourcemaps.init())</div><div class="line">    .pipe(babel())</div><div class="line">    .pipe(concat(<span class="string">"all.js"</span>))</div><div class="line">    .pipe(sourcemaps.write(<span class="string">"."</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>Babel 配置</strong><br>在项目根路径创建文件 .babelrc。内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>执行转换</strong><br>命令行中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure></p>
<h2 id="ES6常用特性"><a href="#ES6常用特性" class="headerlink" title="ES6常用特性"></a>ES6常用特性</h2><p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code> 这些是ES6最常用的几个语法，基本上学会它们，就可以满足我们日常的使用！下面就用用最通俗易懂的语言和例子来讲解它们。</p>
<h3 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h3><p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中都有各自的特殊用途。</p>
<p>ES5只有全局作用域、函数作用域和eval作用域，没有块级作用域，这带来很多不合理的场景。</p>
<p>第一种，变量提升：就是var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部；不在函数内即在全局作用域的最顶部。这样就会引起一些误解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>而 let 就不会被变量提升<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>第二种场景就是内层变量覆盖外层变量。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Faker'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'Davis'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div></pre></td></tr></table></figure></p>
<p>而let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">'Faker'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'Davis'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//Faker</span></div></pre></td></tr></table></figure></p>
<p>第三种场景就是用来计数的循环变量泄露为全局变量，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，变量 i 是 var 声明的，在全局范围内都有效。所以每一次循环，新的 i 值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用 let 则不会出现这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI = <span class="number">8</span>;</div><div class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// invalid assignment to const `PI'</span></div></pre></td></tr></table></figure></p>
<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h3><p><strong>与 Array 增、删、改、查对比</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="keyword">let</span> array = [];</div><div class="line"></div><div class="line"><span class="comment">// 增</span></div><div class="line">map.set(<span class="string">'t'</span>, <span class="number">1</span>);</div><div class="line">set.add( &#123; <span class="attr">t</span> : <span class="number">1</span> &#125; );</div><div class="line">array.push( &#123; <span class="attr">t</span>:<span class="number">1</span> &#125; );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info( map, set, array );  <span class="comment">// Map &#123; 't' =&gt; 1 &#125;  Set &#123; &#123; t: 1 &#125; &#125;  [ &#123; t: 1 &#125; ]</span></div><div class="line"></div><div class="line"><span class="comment">// 查</span></div><div class="line"><span class="keyword">let</span> map_exist = map.has( <span class="string">'t'</span> );</div><div class="line"><span class="keyword">let</span> set_exist = set.has( &#123;<span class="attr">t</span>:<span class="number">1</span>&#125; );</div><div class="line"><span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(map_exist, set_exist, array_exist);  <span class="comment">//true   false   &#123; t: 1 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 改</span></div><div class="line">map.set(<span class="string">'t'</span>, <span class="number">2</span>);</div><div class="line">set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line"><span class="built_in">console</span>.info(map, set, array);  <span class="comment">// Map &#123; 't' =&gt; 2 &#125;   Set &#123; &#123; t: 2 &#125; &#125;   [ &#123; t: 2 &#125; ]</span></div><div class="line"></div><div class="line"><span class="comment">// 删</span></div><div class="line">map.delete(<span class="string">'t'</span>);</div><div class="line">set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? set.delete(item):<span class="string">''</span>);</div><div class="line"><span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">array.splice(index,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(map, set, array);  <span class="comment">// Map &#123;&#125;   Set &#123;&#125;   []</span></div></pre></td></tr></table></figure></p>
<h3 id="class、extends、super"><a href="#class、extends、super" class="headerlink" title="class、extends、super"></a>class、extends、super</h3><p>ES5中原型、构造函数，继承问题一直困扰我们。ES6引入了Class（类）的概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">      &#125;</div><div class="line">     sleep() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is sleeping"</span>);</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();     <span class="comment">//Davis is sleeping</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age) &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    info()&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'is '</span> + <span class="keyword">this</span>.age + <span class="string">'years old'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Boy(<span class="string">'Faker'</span>,<span class="string">'8'</span>);</div><div class="line">son.sleep();    <span class="comment">// Faker is sleeping</span></div><div class="line">son.info();     <span class="comment">//  Faker is 8 years old</span></div></pre></td></tr></table></figure></p>
<p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p>
<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Boy类，该类通过extends关键字，继承了Human类的所有属性和方法。</p>
<p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>
<p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>
<h3 id="arrow-function-箭头函数"><a href="#arrow-function-箭头函数" class="headerlink" title="arrow function 箭头函数"></a>arrow function 箭头函数</h3><p>ES6中新增的箭头操作符 <code>=&gt;</code> 简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，可以说是 ES6 最最常用的一个新特性了，看下面的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.forEach (<span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(val, key);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.forEach (</div><div class="line"><span class="function">(<span class="params">val, key</span>) =&gt;</span> <span class="built_in">console</span>.log(val, key)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>JavaScript语言的this对象指向是一个头疼的问题，在对象方法中使用this，必须非常小心。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">      &#125;</div><div class="line">     sleep() &#123;</div><div class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is sleeping"</span>);</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();    <span class="comment">//  is sleeping</span></div></pre></td></tr></table></figure></p>
<p>上面代码之所以不能输出 Davis，这是因为setTimeout中的this指向的是全局对象。为了让它能够正确的运行，传统的解决方法有两种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种，将this传给self,再用self来指代this</span></div><div class="line">sleep() &#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(self.name + <span class="string">" is sleeping"</span>);</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">// 第二种，是用bind(this)</span></div><div class="line">sleep() &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(self.name + <span class="string">" is sleeping"</span>)</div><div class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</div></pre></td></tr></table></figure></p>
<p>使用箭头函数，非常方便：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    sleep() &#123;</div><div class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"is sleeping"</span>);</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();    <span class="comment">// Davis is sleeping</span></div></pre></td></tr></table></figure></p>
<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>
<h3 id="template-string-模板字符串"><a href="#template-string-模板字符串" class="headerlink" title="template string 模板字符串"></a>template string 模板字符串</h3><p>ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.random();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">` num is <span class="subst">$&#123;num&#125;</span>`</span>);  <span class="comment">//  num is xx</span></div></pre></td></tr></table></figure></p>
<p>不再通过 \ 来做多行字符串拼接，模板字符串可以多行书写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$("#main").html(`</div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很好！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>产生一个随机数$&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">`);</div></pre></td></tr></table></figure></p>
<p>模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。</p>
<h3 id="destructuring-解构"><a href="#destructuring-解构" class="headerlink" title="destructuring 解构"></a>destructuring 解构</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p>
<p>用途一，交换变量的值，不再需要中间变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">[a, b] = [b, a];</div><div class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 2 1</span></div></pre></td></tr></table></figure></p>
<p>用途二，提取JSON数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">6</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;id, title, <span class="attr">data</span>:number&#125; = jsonData;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(id, title, number); <span class="comment">// 1, "OK", [5, 6]</span></div></pre></td></tr></table></figure></p>
<p>用途三，函数参数的定义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 参数是一组有次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123;</div><div class="line"> ...</div><div class="line"> &#125;</div><div class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 参数是一组无次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="default默认参数"><a href="#default默认参数" class="headerlink" title="default默认参数"></a>default默认参数</h3><p>default很简单，就是默认值。现在可以在定义函数的时候指定参数的默认值，而不用像以前那样通过逻辑或操作符来达到目的了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  传统指定默认参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say1</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = name || <span class="string">'Faker'</span>;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'Hello '</span> + name );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  ES6默认参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say2</span>(<span class="params">name=<span class="string">'Davis'</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line">say1();         <span class="comment">// Hello Faker</span></div><div class="line">say1(<span class="string">'Tom'</span>);   <span class="comment">// Hello tom</span></div><div class="line">say2();        <span class="comment">//Hello Davis</span></div><div class="line">say2(<span class="string">'Bob'</span>);  <span class="comment">//  Hello Bob</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> say2(name=’tom’)这里的等号，指的是没有传这个参数，则设置默认值Davis，而不是给参数赋值。</p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>rest参数只包括那些没有给出名称的参数；</p>
<p>rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；</p>
<p>rest参数之后不能再有其它参数（即，只能是最后一个参数）；</p>
<p>函数的length属性，不包括rest参数；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, ...rest</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rest)</div><div class="line">&#125;</div><div class="line">fn(<span class="number">1</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="number">2</span>);    <span class="comment">//["dog", 2]</span></div><div class="line"><span class="built_in">console</span>.log(fn.length);  <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义被监听的目标对象</span></div><div class="line"><span class="keyword">let</span> man = &#123; <span class="attr">name</span>: <span class="string">'Davis'</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</div><div class="line"><span class="comment">//定义处理程序</span></div><div class="line"><span class="keyword">let</span> handle = &#123;</div><div class="line">      set(receiver, property, value) &#123;</div><div class="line">        <span class="built_in">console</span>.log(property, <span class="string">'is changed to'</span>, value);</div><div class="line">        receiver[property] = value;</div><div class="line">      &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//创建代理以进行侦听</span></div><div class="line">man = <span class="keyword">new</span> <span class="built_in">Proxy</span>(man, handle);</div><div class="line"><span class="comment">//做一些改动来触发代理</span></div><div class="line">man.age = <span class="number">22</span>;  <span class="comment">//age is change to  22</span></div><div class="line">man.name = <span class="string">"Faker"</span>;  <span class="comment">// name is change to  Faker</span></div></pre></td></tr></table></figure></p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>Promise对象状态</strong></p>
<p>Promise/A+规范, 规定Promise对象是一个有限状态机。它三个状态：</p>
<ul>
<li>pending（执行中）</li>
<li>Resolved（已完成）</li>
<li>Rejected（已失败）</li>
</ul>
<p>其中pending为初始状态，Resolved和rejected为结束状态（表示promise的生命周期已结束）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> val = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 我们假设step1, step2, step3都是ajax调用后端或者是在Node.js上查询数据库的异步操作</span></div><div class="line"><span class="comment">// 每个步骤都有对应的失败和成功处理回调</span></div><div class="line"><span class="comment">// step1、step2、step3必须按顺序执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤一：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val &gt;= <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.1'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤二：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.2'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤三：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.3'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(step1).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step2);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step3);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 执行之后将会打印</span></div><div class="line">步骤一：执行</div><div class="line">Hello I am No<span class="number">.1</span></div><div class="line">步骤二：执行</div><div class="line">Hello I am No<span class="number">.2</span></div><div class="line">步骤三：执行</div><div class="line">Hello I am No<span class="number">.3</span></div><div class="line">Hello I am No<span class="number">.3</span></div></pre></td></tr></table></figure></p>
<p><strong>常用关键点：</strong></p>
<ol>
<li><p>在Promise定义时，函数已经执行了；Promise构造函数只接受一个参数，即带有异步逻辑的函数。这个函数在 new Promise 时已经执行了。只不过在没有调用 then 之前不会 resolve 或 reject。</p>
</li>
<li><p>在then方法中通常传递两个参数，一个 resolve 函数，一个 reject 函数。reject就是出错的时候运行的函数。resolve 函数必须返回一个值才能把链式调用进行下去。</p>
</li>
</ol>
<ul>
<li>resolve 返回一个新 Promise<br>返回一个新Promise之后再调用的then就是新Promise中的逻辑了。</li>
<li>resolve 返回一个值<br>返回一个值会传递到下一个then的resolve方法参数中。</li>
</ul>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>Generator函数跟普通函数的写法有非常大的区别：</p>
<ol>
<li>function关键字与函数名之间有一个 *；</li>
<li>函数体内部使用yield语句，定义不同的内部状态；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'c'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> fn = f();</div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'a', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'b', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'c', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'ending', done: true &#125;</span></div></pre></td></tr></table></figure>
<p>第一次输出fn.next()返回一个简单的对象{value: “a”, done: false}，’a’就是f函数执行到第一个yield语句之后得到的值，false表示f函数还没有执行完，只是在这暂停。</p>
<p>第二次，返回的就是{value: “b”, done: false}，说明f函数运行到了第二个yield语句，返回的是该yield语句的返回值’b’。返回之后依然是暂停。</p>
<p>第三次，第四次同理，这样整个f函数就运行完毕了。</p>
<p><strong>异步操作的同步化写法</strong><br>Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield语句下面，反正要等到调用next方法时再执行。所以，Generator函数的一个重要实际意义就是用来处理异步操作，改写回调函数。</p>
<p>例子：假设我在测试服务器的某目录建了4个文件，分别是’test.html’、’a.html’、’b.html’、’c.html’，后三个文件的文件内容跟文件名相同，现在我编辑’test.html’的代码，想要先ajax-get相对网址’a.html’，然后再回调里ajax-get相对网址’b.html’，然后在回调里ajax-get相对网址’c.html’。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  $.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    it.next(res);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 生成器函数</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">ajaxs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'a.html'</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'b.html'</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'c.html'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> it = ajaxs();  <span class="comment">// 遍历器对象</span></div><div class="line"></div><div class="line">it.next();</div><div class="line"></div><div class="line"><span class="comment">// a.html</span></div><div class="line"><span class="comment">// b.html</span></div><div class="line"><span class="comment">// c.html</span></div></pre></td></tr></table></figure>
<p><strong>强调：</strong>只有当yield后面跟的函数先执行完，无论执行体里面有多少异步回调，都要等所有回调先执行完，才会执行等号赋值，以及再后面的操作。这也是yield最大的特性。</p>
<h3 id="export、import"><a href="#export、import" class="headerlink" title="export、import"></a>export、import</h3><p>export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口；</p>
<p>import用于在一个模块中加载另一个含有export接口的模块。</p>
<p><strong>导出一组对象</strong></p>
<p>导出模块文件app.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Human&#123;</div><div class="line">    constructor(name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    sleep() &#123;</div><div class="line">        console.log(this.name + &quot; is sleeping&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function walk() &#123;</div><div class="line">    console.log(&apos;i am walking&apos;);</div><div class="line">&#125;</div><div class="line">function play() &#123;</div><div class="line">    console.log(&apos;i am playing&apos;);</div><div class="line">&#125;</div><div class="line">export &#123; Human, walk &#125;</div></pre></td></tr></table></figure></p>
<p>模块导出了两个对象：Human类和walk函数，能被其他文件使用。而play函数没有导出，为此模块私有，不能被其他文件使用。</p>
<p>main.js导入app.js模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; Human, walk &#125; from &apos;app.js&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>Default导出</strong><br>使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">... //类，函数等</div><div class="line">export default App;</div></pre></td></tr></table></figure></p>
<p>main.js导入app.js模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import App from &apos;app.js&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上这些是ES6最常用的几个语法，基本上学会它们，就可以满足我们日常的使用！ES6的新语法特性让前端和后端的差异越来越小了，我们必须要了解这些新的前沿知识（虽然ES8已经到来，但我相信目前还是ES6的时代），才能更好运用于项目中。</p>
<p>项目源码：<a href="https://github.com/pengfeidai/lottery-es6" target="_blank" rel="external">https://github.com/pengfeidai/lottery-es6</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h2&gt;&lt;p&gt;ECMAScript6（简称ES6）是 JavaScript 语言的下一代标准。在2015年6月正式发布，所以又称E
    
    </summary>
    
    
      <category term="Javascript" scheme="http://dpfblog.com/tags/Javascript/"/>
    
      <category term="ES6" scheme="http://dpfblog.com/tags/ES6/"/>
    
      <category term="gulp" scheme="http://dpfblog.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>响应式网页开发你不知道的那些事</title>
    <link href="http://dpfblog.com/2017/07/11/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%BA%94%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>http://dpfblog.com/2017/07/11/响应式网页开发应注意的那些事儿/</id>
    <published>2017-07-11T14:52:28.000Z</published>
    <updated>2017-09-02T14:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>响应式网页设计通过使用弹性网格和布局、响应式图片、CSS media query等技术手段，使页面能够自动切换分辨率、图片尺寸及相关脚本功能，以适应不同设备，来满足用户在各种设备环境下的需求。响应式网页设计就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.sc.chinaz.com/upload/2014/11/21/2014112117164334.gif" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h3><p>媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成。媒体查询中可用于检测的媒体特性有 width 、 height 和 color （等）。使用媒体查询，可以在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p>
<h3 id="如何在CSS文件中引入媒体查询"><a href="#如何在CSS文件中引入媒体查询" class="headerlink" title="如何在CSS文件中引入媒体查询"></a>如何在CSS文件中引入媒体查询</h3><p>媒体查询写在CSS样式代码的最后，CSS是层叠样式表，在同一特殊性下，靠后的的样式会重叠前面的样式。</p>
<h3 id="怎样使用media"><a href="#怎样使用media" class="headerlink" title="怎样使用media"></a>怎样使用media</h3><p>第一步：需要在html文档中添加以下代码，用来兼容移动设备的显示效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>width=device-width:宽度等于当前设备的宽度</li>
<li>initial-scale=1：初始的缩放比例（默认为1）</li>
<li>minimum-scale=1：允许用户缩放到得最小比例（默认为1）</li>
<li>maximum-scale=1：允许用户缩放到得最大比例（默认为1）</li>
<li>user-scalable=no：用户不能手动缩放</li>
</ul>
<p>第二步：怎样在CSS文件中写CSS响应式媒体查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  font-size: 1.6rem;</div><div class="line">  background: #f7f7f7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media only screen and (max-width: 50em) &#123;</div><div class="line">  body &#123;</div><div class="line">    font-size: 1.2rem;</div><div class="line">    background: #fff;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 30.0625em) and (max-width:50em)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">@media only screen and (max-width: 30em) &#123;</div><div class="line">   body &#123;</div><div class="line">     font-size: 1.0rem;</div><div class="line">     background: #999;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>在不同宽度下，改变背景颜色和字体大小</li>
</ul>
<h3 id="兼容性解决"><a href="#兼容性解决" class="headerlink" title="兼容性解决"></a>兼容性解决</h3><p>部分IE浏览器(IE9以下)，不支持 html5 和媒体查询。需要在 html 文档 <code>&lt;head&gt;&lt;/head&gt;</code>标签中添加以下代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<p>html5shiv：解决IE浏览器(IE6、IE7、IE8)不支持HTML5的问题<br>respond：使IE浏览器(IE6、IE7、IE8)支持媒体查询中的min-width和max-width</p>
<h2 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h2><p><code>px</code>: 像素，1个px相当于一个像素</p>
<p><code>em</code>: 元素字体高度，相对参照物为父元素的 font-size。em 的值并不固定，会继承父元素的字体大小</p>
<p><code>rem</code>: 元素字体高度，相对参照物为根元素 html,相于参照固定不变。目前，除 IE9 以下版本，所有浏览器均已支持rem</p>
<p><strong>注意：</strong></p>
<ol>
<li>若rem没有在根元素（html字体）指定参照值，那浏览器默认1 rem就是16px,若rem有指定值，则1rem就是等于指定值 。</li>
<li>html设置为62.5%或者10px时会失效，是因为小于12px或者75%的字体大小不支持换算。这可能与有些浏览器不支持12px以下的大小有关。所以，使用rem单位，html的字体默认字体大小必须设置为12px或以上。若小于12px则浏览器换算时自动默认字体为12px。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  font-size: 62.5%;   /* 10÷16=62.5% */</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  font-size:1.2rem ;  /* 12÷10=1.2 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在响应式网页开发中，我们会更多的使用到 rem，而对 px的适应基本很少。</p>
<h2 id="响应式广告"><a href="#响应式广告" class="headerlink" title="响应式广告"></a>响应式广告</h2><p>现在大部分的网页都会有一个滚动广告(轮播图)，一个好的广告滚动组件支持：</p>
<ol>
<li>支持不同的图片数量</li>
<li>支持响应式</li>
<li>具有良好的兼容性</li>
</ol>
<p>现在网上滚动广告组件非常多，在这里我只推荐两种 <a href="https://owlcarousel2.github.io/OwlCarousel2/index.html" target="_blank" rel="external">Owl Carousel 2</a>和 <a href="http://demo.jb51.net/js/myfocus/" target="_blank" rel="external">myfocus</a>，非常轻量，使用文档非常齐全。这里，主要讲一下 <a href="https://owlcarousel2.github.io/OwlCarousel2/index.html" target="_blank" rel="external">Owl Carousel 2</a>的用法。</p>
<p>Owl Carousel 2 下载之后的目录结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Owlcarousel2/</div><div class="line">├── assets/</div><div class="line">│   ├── owl.carousel.css</div><div class="line">│   ├── owl.carousel.min.css   // 主样式文件</div><div class="line">│   ├── owl.theme.default.css</div><div class="line">│   ├── owl.theme.default.min.css  // 皮肤样式文件</div><div class="line">│   ├── owl.theme.green.css</div><div class="line">│   ├── owl.theme.green.min.css</div><div class="line">│   └── owl.video.play.png</div><div class="line">│</div><div class="line">├── owl.carousel.js</div><div class="line">├── owl.carousel.min.js</div><div class="line">├── LICENSE-MIT</div><div class="line">└── README.md</div></pre></td></tr></table></figure>
<p>html结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;ad&quot;&gt;</div><div class="line">   &lt;div class=&quot;owl-carousel owl-theme&quot;&gt;</div><div class="line">      &lt;div class=&quot;item&quot;&gt;</div><div class="line">         &lt;img src=&quot;img/ad001.png&quot; alt=&quot;&quot;&gt;   //  图片尺寸480*480</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;item&quot;&gt;</div><div class="line">         &lt;img src=&quot;img/ad002.png&quot; alt=&quot;&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;item&quot;&gt;</div><div class="line">         &lt;img src=&quot;img/ad003.png&quot; alt=&quot;&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>在html文件中引入css:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;OwlCarousel2/assets/owl.carousel.min.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;OwlCarousel2/assets/owl.theme.default.min.css&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>在html文件中引入js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;OwlCarousel2/owl.carousel.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>main文件自己定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;</div><div class="line">  $(&quot;.owl-carousel&quot;).owlCarousel(&#123;</div><div class="line">    items: 1,     // 一屏看到的图片数量</div><div class="line">    loop: true,   // 循环滚动</div><div class="line">    autoplay: true,   // 自动播放</div><div class="line">    autoplayTimeout: 3000,   // 时间间隔</div><div class="line">    autoplayHoverPause: true    //鼠标放在图片上暂停滚动</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当然现在滚动效果就已经完成了。不过还有一个问题，当屏幕尺寸放大或缩小时，始终都是480尺寸的图片，看起来就是不爽，那么如何能实现让图片在不同设备下自动切换成我们想要的尺寸呢？那么下面就需要用到响应式图片~</p>
<h2 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h2><h3 id="js和服务端控制"><a href="#js和服务端控制" class="headerlink" title="js和服务端控制"></a>js和服务端控制</h3><p>提前在图片库准备三张480、800、1600尺寸的图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">    function makeImageResponsive()&#123;</div><div class="line">        var img = $(&apos;.cotent img&apos;);</div><div class="line">        var width = $(window).width();</div><div class="line">        if(width &lt;= 480)&#123;</div><div class="line">            img.attr(&apos;src&apos;, &apos;480.png&apos;);</div><div class="line">        &#125;else if(width &lt;= 800)&#123;</div><div class="line">            img.attr(&apos;src&apos;, &apos;800.png&apos;);</div><div class="line">        &#125;else&#123;</div><div class="line">            img.attr(&apos;src&apos;, &apos;1600.png&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">$(window).on(&apos;resize load&apos;, makeImageResponsive);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="srcset属性"><a href="#srcset属性" class="headerlink" title="srcset属性"></a>srcset属性</h3><p>通过 srcset 指定给 <img> 标签所有图片源的信息。然后使用逗号分隔列出一个从小到大的图片源列表。每个图片源后可以跟w描述符或者x描述符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;img/480.png&quot; srcset=&quot;img/480.png 480w,img/800.png 800w, img/1600.png 1600w alt=&quot;&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>如果浏览器支持 srcset 则会根据屏幕宽度采用最佳的图片，否则直接下载 src 属性内的图像。</p>
<h3 id="picture属性"><a href="#picture属性" class="headerlink" title="picture属性"></a>picture属性</h3><p>picture是html5新属性，可以放置多个source标签，以指定不同的图像文件名，进而根据不同的条件进行加载。<br>由于现在很多浏览器对于picture这个标签还不支持，所以我们需要引用<a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">picturefill.js</a>来解决。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;owl-carousel owl-theme&quot;&gt;</div><div class="line">    &lt;div class=&quot;item&quot;&gt;</div><div class="line">        &lt;picture&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad001-l.png&quot; media=&quot;(min-width: 50em)&quot;&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad001-m.png&quot; media=&quot;(min-width: 30em)&quot;&gt;</div><div class="line">            &lt;img srcset=&quot;img/ad001.png&quot; alt=&quot;&quot;&gt;</div><div class="line">        &lt;/picture&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;item&quot;&gt;</div><div class="line">        &lt;picture&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad002-l.png&quot; media=&quot;(min-width: 50em)&quot;&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad002-m.png&quot; media=&quot;(min-width: 30em)&quot;&gt;</div><div class="line">            &lt;img srcset=&quot;img/ad002.png&quot; alt=&quot;&quot;&gt;</div><div class="line">        &lt;/picture&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">   &lt;div class=&quot;item&quot;&gt;</div><div class="line">        &lt;picture&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad003-l.png&quot; media=&quot;(min-width: 50em)&quot;&gt;</div><div class="line">            &lt;source srcset=&quot;img/ad003-m.png&quot; media=&quot;(min-width: 30em)&quot;&gt;</div><div class="line">            &lt;img srcset=&quot;img/ad003.png&quot; alt=&quot;&quot;&gt;</div><div class="line">        &lt;/picture&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!-- 在 body 末尾引入--&gt;</div><div class="line">&lt;script src=&quot;js/vendor/picturefill.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在大于800px的时候，展示ad00x-l这个large图片。在大于480px的时候，展示ad00x-m这个medium图片。否则，展示ad00x小图片。完美解决图片响应式问题，极力推荐这种方法。</p>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>当所有的代码完成之后，我们的网站就可以发布了，在发布之前我们还可以对代码进行优化：</p>
<ul>
<li>压缩</li>
<li>合并</li>
<li>增加版本号</li>
</ul>
<p>在线压缩:(<a href="https://javascript-minifier.com/" target="_blank" rel="external">https://javascript-minifier.com/</a>)</p>
<p>工具打包：</p>
<ul>
<li>Grunt：自动化构建工具</li>
<li>Gulp：自动化构建工具</li>
<li>Webpack:静态资源打包工具</li>
</ul>
<p>3个主流工具我就不详细一 一介绍了。这里，主要使用 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a> 来打包发布，首先来安装gulp。</p>
<p><strong>第一步：安装Nodejs</strong></p>
<p>在 Node.js 官网：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a> 下载安装包</p>
<p>保持默认设置即可，一路Next，安装很快就结束了。</p>
<p>然后打开命令提示符，输入 <code>node -v</code>、<code>npm -v</code>，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p>
<p><strong>第二步：安装Git</strong></p>
<p>在 Git 官网：<a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> 下载安装包</p>
<p>安装完成后，桌面右键，打开 Git Bush Here，输入 <code>git --version</code>，出现版本号则说明 Git 环境配置成功，第二步完成！！！</p>
<p><strong>第三步：安装Gulp(全局)</strong></p>
<p>桌面右键，打开 Git Bush Here，输入<code>npm install gulp -g</code></p>
<p>安装完成后，同样输入 <code>gulp -v</code>，出现版本号则说明，则说明安装成功。</p>
<p><strong>第四步：作为项目的开发依赖（devDependencies）安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure></p>
<p><strong>第五步：在项目根目录下创建一个名为 gulpfile.js 的文件，并且新建一个 dist 文件夹，用于存放压缩后的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var rev = require(&apos;gulp-rev&apos;);</div><div class="line">var revReplace = require(&apos;gulp-rev-replace&apos;);</div><div class="line">var useref = require(&apos;gulp-useref&apos;);</div><div class="line">var filter = require(&apos;gulp-filter&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">var csso = require(&apos;gulp-csso&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">    var jsFilter = filter(&apos;**/*.js&apos;, &#123;restore: true&#125;);</div><div class="line">    var cssFilter = filter(&apos;**/*.css&apos;, &#123;restore: true&#125;);</div><div class="line">    var indexHtmlFilter = filter([&apos;**/*&apos;, &apos;!**/index.html&apos;], &#123;restore: true&#125;);</div><div class="line"></div><div class="line">    return gulp.src(&apos;src/index.html&apos;)</div><div class="line">        .pipe(useref())</div><div class="line">        .pipe(jsFilter)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(jsFilter.restore)</div><div class="line">        .pipe(cssFilter)</div><div class="line">        .pipe(csso())</div><div class="line">        .pipe(cssFilter.restore)</div><div class="line">        .pipe(indexHtmlFilter)</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(indexHtmlFilter.restore)</div><div class="line">        .pipe(revReplace())</div><div class="line">        .pipe(gulp.dest(&apos;dist&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>第六步：安装以上需要的gulp插件：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp gulp-rev gulp-rev-replace gulp-useref gulp-filter gulp-filter gulp-uglify  gulp-csso --save-dev</div></pre></td></tr></table></figure></p>
<p><strong>第七步：将 htlm 中需要打包合并的文件添加注释</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- build:css css/combined.css --&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;js/vendor/OwlCarousel2/assets/owl.carousel.min.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;js/vendor/OwlCarousel2/assets/owl.theme.default.min.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt;</div><div class="line">&lt;!-- endbuild --&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;!-- build:js js/combined.js --&gt;</div><div class="line">&lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/vendor/OwlCarousel2/owl.carousel.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/vendor/picturefill.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;!-- endbuild --&gt;</div></pre></td></tr></table></figure></p>
<p><strong>第八步：执行gulp</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure></p>
<p>执行gulp之后，你会在新建的 dist 文件夹中看到打包生成的文件，目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dist/</div><div class="line">├── css/</div><div class="line">│   ├──combined-3f8e363e08.css   //  打包合并后的css文件</div><div class="line">│   └──combined-56ca943019.css</div><div class="line">├── img/</div><div class="line">├── js/</div><div class="line">│   └── combined-7762fa2c22.js   //  打包合并后的js文件</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p>这时候 css, js 文件都被压缩合并成了一个文件，看起来更加轻量。如果你修改了源代码中的内容，只需再次执行<code>gulp</code> ，则会生成另一个心得css或js文件，版本号会更新，不会覆盖之前的文件。如上面生成新的 <code>combined-56ca943019.css</code> 文件，也保留之前的 <code>combined-3f8e363e08.css</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章包含了响应式网站开发中常见的问题及解决方案，希望对热爱前端开发的同学有所帮助，能让你们在以后的响应式开发中少走弯路。</p>
<p>在线演示：<a href="http://www.dpfblog.com/responsive-lichaibao/dist/index" target="_blank" rel="external">http://www.dpfblog.com/responsive-lichaibao/dist/index</a></p>
<p>项目源码：<a href="https://github.com/pengfeidai/responsive-lichaibao" target="_blank" rel="external">https://github.com/pengfeidai/responsive-lichaibao</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;响应式网页设计通过使用弹性网格和布局、响应式图片、CSS media query等技术手段，使页面能够自动切换分辨率、图片尺寸及相关脚本功能
    
    </summary>
    
    
      <category term="HTML" scheme="http://dpfblog.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://dpfblog.com/tags/CSS/"/>
    
      <category term="gulp" scheme="http://dpfblog.com/tags/gulp/"/>
    
      <category term="响应式网站" scheme="http://dpfblog.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>响应式理财网站</title>
    <link href="http://dpfblog.com/2017/07/11/licaibao-responsive/"/>
    <id>http://dpfblog.com/2017/07/11/licaibao-responsive/</id>
    <published>2017-07-11T14:09:46.000Z</published>
    <updated>2017-09-02T14:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在线演示：<a href="http://www.dpfblog.com/responsive-lichaibao/dist/index" target="_blank" rel="external">http://www.dpfblog.com/responsive-lichaibao/dist/index</a></p>
<p>项目源码：<a href="https://github.com/pengfeidai/responsive-lichaibao" target="_blank" rel="external">https://github.com/pengfeidai/responsive-lichaibao</a></p>
<p>这是一个响应式的理财网站，运用CSS 媒体查询，响应式图片，相对长度单位等前端技术，可以适配不同的设备环境，最后用gulp打包发布。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-2/66401314.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul>
<li>HTML：实现基本的 HTML 结构</li>
<li>CSS：渐进增强 or 优雅降级；利用 normalize.css 来统一页面初始样式；相对单位 rem；媒体查询；清除浮动等</li>
<li>JS：通过简单js代码配合轮播图插件实现轮播效果；解决了一些浏览器兼容性问题；</li>
<li>OwlCarousel2.js：响应式轮播图插件</li>
<li>Gulp：自动化构建工具，使用Gulp进行自动化打包发布</li>
</ul>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol>
<li>对常见的响应式布局方法（CSS 媒体查询、Flex 弹性布局、相对单位）有了更深的认识</li>
<li>掌握并使用一些常用插件（如：OwlCarousel2.js，http-server等）</li>
<li>学会解决IE一些兼容性问题（如：<code>html5shiv</code>：解决IE浏览器(IE6、IE7、IE8)不支持HTML5的问题；<br><code>respond</code>：使IE浏览器(IE6、IE7、IE8)支持媒体查询中的min-width和max-width）</li>
<li>熟悉了自动化构建工具 Gulp 的基本流程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在线演示：&lt;a href=&quot;http://www.dpfblog.com/responsive-lichaibao/dist/index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.dpfblog.com/responsive-li
    
    </summary>
    
    
      <category term="HTML" scheme="http://dpfblog.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://dpfblog.com/tags/CSS/"/>
    
  </entry>
  
</feed>
