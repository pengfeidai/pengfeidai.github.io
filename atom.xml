<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Davis&#39; Blog</title>
  <subtitle>专注于Golang、Node.js技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengfeidai.github.io/"/>
  <updated>2020-06-22T15:03:41.491Z</updated>
  <id>https://pengfeidai.github.io/</id>
  
  <author>
    <name>没事放放牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Galang中读取配置文件</title>
    <link href="https://pengfeidai.github.io/2020/06/10/golang%E4%B8%AD%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://pengfeidai.github.io/2020/06/10/golang中读取配置文件/</id>
    <published>2020-06-10T14:52:28.000Z</published>
    <updated>2020-06-22T15:03:41.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见配置文件格式"><a href="#常见配置文件格式" class="headerlink" title="常见配置文件格式"></a>常见配置文件格式</h2><p>日常开发中读取配置文件包含以下几种格式：</p>
<ul>
<li>json 格式字符串</li>
<li>K=V 键值对</li>
<li>xml 文件</li>
<li>yaml 格式文件</li>
<li>toml 格式文件</li>
</ul>
<p><strong>由于我在平时对yaml格式配置比较钟爱，下面我主要介绍 <code>yaml</code> 格式配置文件的使用方式</strong></p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get gopkg.in/yaml.v2</div></pre></td></tr></table></figure>
<h2 id="yaml示例"><a href="#yaml示例" class="headerlink" title="yaml示例"></a>yaml示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9060</span></div><div class="line"><span class="attr">  mode:</span> <span class="string">'release'</span></div><div class="line"></div><div class="line"><span class="attr">mysql:</span></div><div class="line"><span class="attr">  user:</span> <span class="string">root</span></div><div class="line"><span class="attr">  password:</span> <span class="string">'123456'</span></div><div class="line"><span class="attr">  path:</span> <span class="string">'127.0.0.1:3306'</span></div><div class="line"><span class="attr">  database:</span> <span class="string">'test'</span></div><div class="line"><span class="attr">  config:</span> <span class="string">'charset=utf8&amp;parseTime=True&amp;loc=Local'</span></div><div class="line"><span class="attr">  driver:</span> <span class="string">'mysql'</span></div></pre></td></tr></table></figure>
<h3 id="初始版（config-config-go）"><a href="#初始版（config-config-go）" class="headerlink" title="初始版（config/config.go）"></a>初始版（config/config.go）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> config</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"gopkg.in/yaml.v2"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Yaml <span class="keyword">struct</span> &#123;</div><div class="line">	Server  <span class="string">`yaml:"server"`</span></div><div class="line">	Mysql   <span class="string">`yaml:"mysql"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	Port      <span class="keyword">int</span>    <span class="string">`yaml:"port"`</span></div><div class="line">	Mode      <span class="keyword">string</span> <span class="string">`yaml:"mode"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Mysql <span class="keyword">struct</span> &#123;</div><div class="line">	User         <span class="keyword">string</span> <span class="string">`yaml:"user"`</span></div><div class="line">	Password     <span class="keyword">string</span> <span class="string">`yaml:"password"`</span></div><div class="line">	Path         <span class="keyword">string</span> <span class="string">`yaml:"path"`</span></div><div class="line">	Database     <span class="keyword">string</span> <span class="string">`yaml:"database"`</span></div><div class="line">	Config       <span class="keyword">string</span> <span class="string">`yaml:"config"`</span></div><div class="line">	Driver       <span class="keyword">string</span> <span class="string">`yaml:"driver"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Conf *Yaml</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">const</span> defaultConfigFile = <span class="string">"app/config/config.yaml"</span></div><div class="line">	c := &amp;Yaml&#123;&#125;</div><div class="line">	yamlConf, err := ioutil.ReadFile(*configFile)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(fmt.Errorf(<span class="string">"get yamlConf error: %s"</span>, err))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = yaml.Unmarshal(yamlConf, c)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalf(<span class="string">"config Init Unmarshal: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	log.Println(<span class="string">"config yamlFile load Init success."</span>)</div><div class="line">	Conf = c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="进阶版（使用flag命令行自定义配置文件路径）"><a href="#进阶版（使用flag命令行自定义配置文件路径）" class="headerlink" title="进阶版（使用flag命令行自定义配置文件路径）"></a>进阶版（使用flag命令行自定义配置文件路径）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> config</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"gopkg.in/yaml.v2"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Yaml <span class="keyword">struct</span> &#123;</div><div class="line">	Server  <span class="string">`yaml:"server"`</span></div><div class="line">	Mysql   <span class="string">`yaml:"mysql"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	Port      <span class="keyword">int</span>    <span class="string">`yaml:"port"`</span></div><div class="line">	Mode      <span class="keyword">string</span> <span class="string">`yaml:"mode"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Mysql <span class="keyword">struct</span> &#123;</div><div class="line">	User         <span class="keyword">string</span> <span class="string">`yaml:"user"`</span></div><div class="line">	Password     <span class="keyword">string</span> <span class="string">`yaml:"password"`</span></div><div class="line">	Path         <span class="keyword">string</span> <span class="string">`yaml:"path"`</span></div><div class="line">	Database     <span class="keyword">string</span> <span class="string">`yaml:"database"`</span></div><div class="line">	Config       <span class="keyword">string</span> <span class="string">`yaml:"config"`</span></div><div class="line">	Driver       <span class="keyword">string</span> <span class="string">`yaml:"driver"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Conf *Yaml</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> defaultConfigFile = <span class="string">"app/config/config.yaml"</span></div><div class="line">  <span class="comment">// 命令行通过增加c参数路径来覆盖默认路径，若不传，则使用默认</span></div><div class="line">  configFile := flag.String(<span class="string">"c"</span>, defaultConfigFile, <span class="string">"help config path"</span>)</div><div class="line">  <span class="comment">// 解析命令行参数</span></div><div class="line">  flag.Parse()</div><div class="line"></div><div class="line">	c := &amp;Yaml&#123;&#125;</div><div class="line">	yamlConf, err := ioutil.ReadFile(*configFile)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(fmt.Errorf(<span class="string">"get yamlConf error: %s"</span>, err))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = yaml.Unmarshal(yamlConf, c)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalf(<span class="string">"config Init Unmarshal: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	log.Println(<span class="string">"config yamlFile load Init success."</span>)</div><div class="line">	Conf = c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="进阶版（环境变量）"><a href="#进阶版（环境变量）" class="headerlink" title="进阶版（环境变量）"></a>进阶版（环境变量）</h2><h3 id="通常我的配置文件目录结构如下："><a href="#通常我的配置文件目录结构如下：" class="headerlink" title="通常我的配置文件目录结构如下："></a>通常我的配置文件目录结构如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gin-app-strat</div><div class="line">├── app</div><div class="line">|    ├── ... </div><div class="line">|    ├── config</div><div class="line">|    |     ├── config.local.yaml</div><div class="line">|    |     ├── config.dev.yaml</div><div class="line">|    |     ├── config.prod.yaml</div><div class="line">|    |     └── config.<span class="keyword">go</span></div><div class="line">|    ├── ...</div></pre></td></tr></table></figure>
<h3 id="config-config-dev-yaml文件样例："><a href="#config-config-dev-yaml文件样例：" class="headerlink" title="config/config.dev.yaml文件样例："></a>config/config.dev.yaml文件样例：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="string">$&#123;SERVER_PORT&#125;</span></div><div class="line"><span class="attr">  mode:</span> <span class="string">$&#123;SERVER_MODE&#125;</span></div><div class="line"></div><div class="line"><span class="attr">mysql:</span></div><div class="line"><span class="attr">  user:</span> <span class="string">$&#123;MYSQL_USER&#125;</span></div><div class="line"><span class="attr">  password:</span> <span class="string">$&#123;MYSQL_password&#125;</span></div><div class="line"><span class="attr">  path:</span> <span class="string">$&#123;MYSQL_PATH&#125;</span></div><div class="line"><span class="attr">  database:</span> <span class="string">$&#123;MYSQL_DB&#125;</span></div><div class="line"><span class="attr">  config:</span> <span class="string">'charset=utf8&amp;parseTime=True&amp;loc=Local'</span></div><div class="line"><span class="attr">  driver:</span> <span class="string">'mysql'</span></div></pre></td></tr></table></figure>
<h3 id="使用-os-ExpandEnv-在给定的字符串中扩展环境变量："><a href="#使用-os-ExpandEnv-在给定的字符串中扩展环境变量：" class="headerlink" title="使用 os.ExpandEnv 在给定的字符串中扩展环境变量："></a>使用 <code>os.ExpandEnv</code> 在给定的字符串中扩展环境变量：</h3><p>我们只需要在环境变量中加入 yaml 中 <code>${}</code> 里面的内容，就可以在运行时读取相应配置。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> config</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"gopkg.in/yaml.v2"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Yaml <span class="keyword">struct</span> &#123;</div><div class="line">	Server  <span class="string">`yaml:"server"`</span></div><div class="line">	Mysql   <span class="string">`yaml:"mysql"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	Port      <span class="keyword">int</span>    <span class="string">`yaml:"port"`</span></div><div class="line">	Mode      <span class="keyword">string</span> <span class="string">`yaml:"mode"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Mysql <span class="keyword">struct</span> &#123;</div><div class="line">	User         <span class="keyword">string</span> <span class="string">`yaml:"user"`</span></div><div class="line">	Password     <span class="keyword">string</span> <span class="string">`yaml:"password"`</span></div><div class="line">	Path         <span class="keyword">string</span> <span class="string">`yaml:"path"`</span></div><div class="line">	Database     <span class="keyword">string</span> <span class="string">`yaml:"database"`</span></div><div class="line">	Config       <span class="keyword">string</span> <span class="string">`yaml:"config"`</span></div><div class="line">	Driver       <span class="keyword">string</span> <span class="string">`yaml:"driver"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Conf *Yaml</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> defaultConfigFile = fmt.Sprintf(<span class="string">"app/config/config.%s.yaml"</span>, os.Getenv(<span class="string">"SERVER_ENV"</span>))</div><div class="line">	yamlConf, err := ioutil.ReadFile(*configFile)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(fmt.Errorf(<span class="string">"get yamlConf error: %s"</span>, err))</div><div class="line">	&#125;</div><div class="line">  yamlConf = []<span class="keyword">byte</span>(os.ExpandEnv(<span class="keyword">string</span>(yamlConf)))</div><div class="line">	c := &amp;Yaml&#123;&#125;</div><div class="line">	err = yaml.Unmarshal(yamlConf, c)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalf(<span class="string">"config Init Unmarshal: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	log.Println(<span class="string">"config yamlFile load Init success."</span>)</div><div class="line">	Conf = c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="具体用法请参考github"><a href="#具体用法请参考github" class="headerlink" title="具体用法请参考github"></a>具体用法请参考<a href="https://github.com/pengfeidai/gin-app-start" target="_blank" rel="external">github</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见配置文件格式&quot;&gt;&lt;a href=&quot;#常见配置文件格式&quot; class=&quot;headerlink&quot; title=&quot;常见配置文件格式&quot;&gt;&lt;/a&gt;常见配置文件格式&lt;/h2&gt;&lt;p&gt;日常开发中读取配置文件包含以下几种格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;json 格式字符串&lt;/
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="yaml" scheme="https://pengfeidai.github.io/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>etcd核心原理</title>
    <link href="https://pengfeidai.github.io/2020/06/05/etcd%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    <id>https://pengfeidai.github.io/2020/06/05/etcd核心原理/</id>
    <published>2020-06-05T14:52:28.000Z</published>
    <updated>2020-06-17T14:04:33.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="etcd简介"><a href="#etcd简介" class="headerlink" title="etcd简介"></a>etcd简介</h2><p>etcd 是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。在很多分布式系统架构中得到了广泛的应用，它内部采用 <code>raft协议</code> 作为一致性算法，基于Go语言实现。其主要功能有服务注册与发现、消息发布与订阅、负载均衡、分布式通知与协调、分布式锁、分布式队列、集群监控与 leader 选举等。</p>
<p>主要具有以下几个特点：</p>
<ul>
<li>简单：安装配置简单，易于部署，易使用。基于 HTTP+JSON 的 API 让你用 curl 就可以轻松使用。</li>
<li>安全：支持 SSL 证书验证。</li>
<li>键值对存储：将数据存储在分层组织的目录中，如同在标准文件系统中。</li>
<li>监测变更：监测特定的键或目录以进行更改，并对值的更改做出反应。</li>
<li>快速：根据官方提供的 benchmark 数据，单实例支持每秒 2k+ 读操作。</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性。</li>
</ul>
<h2 id="存储特点"><a href="#存储特点" class="headerlink" title="存储特点"></a>存储特点</h2><p>etcd 是一个 <strong>键值存储</strong> 的组件，其他的应用都是基于其键值存储的功能展开。etcd 的存储有如下特点：</p>
<ul>
<li>采用kv型数据存储，一般情况下比关系型数据库快。</li>
<li>支持动态存储(内存)以及静态存储(磁盘)。</li>
<li>分布式存储，可集成为多节点集群。</li>
<li>存储方式，采用类似目录结构。<ul>
<li>只有叶子节点才能真正存储数据，相当于文件。</li>
<li>叶子节点的父节点一定是目录，目录不能存储数据。</li>
</ul>
</li>
</ul>
<h2 id="etcd应用场景"><a href="#etcd应用场景" class="headerlink" title="etcd应用场景"></a>etcd应用场景</h2><p>etcd 的场景默认处理的数据都是系统中的控制数据。所以etcd在系统中的角色不是其他NoSQL产品的替代品，更不能作为应用的主要数据存储。etcd中应该 <strong>尽量只存储系统中服务的配置信息，对于应用数据只推荐把数据量很小，但是更新和访问频次都很高的数据存储在etcd中。</strong></p>
<h3 id="服务发现（Service-Discovery）"><a href="#服务发现（Service-Discovery）" class="headerlink" title="服务发现（Service Discovery）"></a>服务发现（Service Discovery）</h3><p>服务发现要解决的是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 udp 或 tcp 端口，并且通过名字就可以查找和连接。</p>
<p>要解决服务发现的问题，需要具备下面三种必备属性：</p>
<ol>
<li><strong>一个强一致性、高可用的服务存储目录。</strong> 基于Ralf算法的etcd天生就是这样一个强一致性、高可用的服务存储目录。</li>
<li><strong>一种注册服务和监控服务健康状态的机制。</strong> 用户可以在etcd中注册服务，并且对注册的服务配置 <code>key TTL</code>，定时保持服务的心跳以达到监控健康状态的效果。</li>
<li><strong>一种查找和连接服务的机制。</strong> 通过在 etcd 指定的主题（由服务名称构成的服务目录）下注册的服务也能在对应的主题下查找到。</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://150.158.113.204:9000/etcd.jpg" alt="images" title="">
                </div>
                <div class="image-caption">images</div>
            </figure>
<h3 id="消息发布与订阅"><a href="#消息发布与订阅" class="headerlink" title="消息发布与订阅"></a>消息发布与订阅</h3><p>在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个配置共享中心，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;etcd简介&quot;&gt;&lt;a href=&quot;#etcd简介&quot; class=&quot;headerlink&quot; title=&quot;etcd简介&quot;&gt;&lt;/a&gt;etcd简介&lt;/h2&gt;&lt;p&gt;etcd 是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="etcd" scheme="https://pengfeidai.github.io/tags/etcd/"/>
    
      <category term="分布式" scheme="https://pengfeidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf生成Go代码</title>
    <link href="https://pengfeidai.github.io/2020/05/31/Protobuf%E7%94%9F%E6%88%90Go%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/"/>
    <id>https://pengfeidai.github.io/2020/05/31/Protobuf生成Go代码指南/</id>
    <published>2020-05-31T13:58:21.000Z</published>
    <updated>2020-06-03T17:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Protobuf简介"><a href="#Protobuf简介" class="headerlink" title="Protobuf简介"></a>Protobuf简介</h2><p>Protobuf是Protocol Buffers的简称，由Google公司开发的一种数据描述语言，用于描述一种轻便高效的结构化数据存储格式，它可用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过Protobuf附带的工具生成代码并实现将结构化数据序列化的功能。</p>
<p>Protobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。</p>
<h2 id="protoc安装"><a href="#protoc安装" class="headerlink" title="protoc安装"></a>protoc安装</h2><p>到 <a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">https://github.com/google/protobuf/releases</a> 下载对应的buf，然后进行编译后，使用 <code>protoc --version</code> 能查看对应版本，说明安装成功。</p>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>第一步：if zsh <code>vim ~/.zshrc</code>; if bash <code>vim ~/.bash_profile</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export GOPATH="/Users/zl/go"</div><div class="line">export GOBIN="/Users/zl/go/bin"</div><div class="line">export PATH="$PATH:$GOPATH:$GOBIN"</div></pre></td></tr></table></figure></p>
<p>第二步：<code>source ~/.zshrc</code> || <code>source ~/.bash_profile</code></p>
<p>第三步: 查看环境变量</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 以上配置具体路径 <code>GOPATH</code> 和 <code>GOBIN</code> 根实际填写即可，可使用<code>go env</code>查看。</p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>Protobuf核心的工具集是C++语言开发的，官方的protoc编译器中并不支持Go语言，需要安装插件才能生成Go代码。用如下命令安装：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/golang/protobuf/protoc-gen-<span class="keyword">go</span></div></pre></td></tr></table></figure>
<p>它提供了一个 <code>protoc-gen-go</code> 二进制文件，当编译器调用时传递了<code>--go_out</code> 命令行标志时 <code>protoc</code> 就会使用它。–go_out代表输出的扩展名为 <code>.pb.go</code> 的文件。编译器会为每个.proto文件生成一个单独的源代码文件。</p>
<p><strong>注意：</strong> proto路径（使用–proto_path或-I命令行标志指定）将替换为输出路径（使用–go_out标志指定）。</p>
<p><strong>扩展:</strong></p>
<p><code>go-micro</code> 是go语言中一个很好的微服务框架，功能完善。关于 <code>micro</code> 后面再做详细介绍。它也有个相对应的插件：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/micro/protoc-gen-micro</div></pre></td></tr></table></figure>
<h2 id="定义proto文件"><a href="#定义proto文件" class="headerlink" title="定义proto文件"></a>定义proto文件</h2><p>先在 <code>proto</code> 目录下新建一个 <code>hello.proto</code> 文件：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">syntax = <span class="string">"proto3"</span>;</div><div class="line"></div><div class="line">message HelloRequest &#123;</div><div class="line">	<span class="keyword">string</span> name = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message HelloResponse &#123;</div><div class="line">	<span class="keyword">string</span> greeting = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">service Greeter &#123;</div><div class="line">	rpc Hello(HelloRequest) returns (HelloResponse) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成原型"><a href="#生成原型" class="headerlink" title="生成原型"></a>生成原型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protoc --proto_path=. --go_out=. *<span class="comment">/*.proto</span></div></pre></td></tr></table></figure>
<p>编译器会读取proto目录下所有后缀名为 <code>.proto</code>的文件，这将会生成一个输出文件 <code>product.pb.go</code>。</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h3><p>如果一个.proto文件中有包声明，生成的源代码将会使用它来作为Go的包名，如果.proto的包名中有 <code>.</code> 在Go包名中会将 <code>.</code> 转换为 <code>_</code>。举例来说proto包名 <code>example.hello</code> 将会生成Go包名<code>example_hello</code>。</p>
<h3 id="指定包名"><a href="#指定包名" class="headerlink" title="指定包名"></a>指定包名</h3><p>在.proto文件中可以使用option <code>go_package</code> 指令来覆盖上面默认生成Go包名的规则。比如说包含如下指令的一个.proto文件：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> example.hello;</div><div class="line">option go_package = <span class="string">"proto;hello"</span>;</div></pre></td></tr></table></figure>
<p><code>&quot;proto;hello&quot;</code>：proto表示目录，<code>hello</code> 则是生成的Go源代码的包名是。</p>
<h3 id="不指定包名"><a href="#不指定包名" class="headerlink" title="不指定包名"></a>不指定包名</h3><p>如果一个.proto文件中不包含package声明，生成的源代码将会使用.proto文件的文件名(去掉扩展名)作为Go包名，.会被首先转换为_。如：<code>hello.proto</code> 文件默认生成源文件的包名为 <code>hello</code>。</p>
<h3 id="import其他proto"><a href="#import其他proto" class="headerlink" title="import其他proto"></a>import其他proto</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Protobuf简介&quot;&gt;&lt;a href=&quot;#Protobuf简介&quot; class=&quot;headerlink&quot; title=&quot;Protobuf简介&quot;&gt;&lt;/a&gt;Protobuf简介&lt;/h2&gt;&lt;p&gt;Protobuf是Protocol Buffers的简称，由Google公司
    
    </summary>
    
    
      <category term="Go" scheme="https://pengfeidai.github.io/tags/Go/"/>
    
      <category term="Protobuf" scheme="https://pengfeidai.github.io/tags/Protobuf/"/>
    
      <category term="RPC" scheme="https://pengfeidai.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>micro微服务</title>
    <link href="https://pengfeidai.github.io/2020/05/30/micro%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://pengfeidai.github.io/2020/05/30/micro微服务/</id>
    <published>2020-05-30T14:52:28.000Z</published>
    <updated>2020-05-31T13:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker安装consul"><a href="#docker安装consul" class="headerlink" title="docker安装consul"></a>docker安装consul</h4><ul>
<li><code>-server</code>：以服务端方式启动</li>
<li><code>-bootstrap</code>：指定自己为leader，不需要选举</li>
<li><code>-ui</code>：启动内置管理web界面</li>
<li><code>-client</code>：指定客户端可以访问的ip。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 安装</div><div class="line">docker pull consul</div><div class="line"><span class="meta"></span></div><div class="line"># 启动</div><div class="line">docker run -d --name=consul -p 8500:8500 consul agent -server -bootstrap -ui -client 0.0.0.0</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;docker安装consul&quot;&gt;&lt;a href=&quot;#docker安装consul&quot; class=&quot;headerlink&quot; title=&quot;docker安装consul&quot;&gt;&lt;/a&gt;docker安装consul&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-server&lt;/c
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="Gin" scheme="https://pengfeidai.github.io/tags/Gin/"/>
    
      <category term="micro" scheme="https://pengfeidai.github.io/tags/micro/"/>
    
  </entry>
  
  <entry>
    <title>使用Golang构建gRPC服务</title>
    <link href="https://pengfeidai.github.io/2020/05/24/%E4%BD%BF%E7%94%A8Golang%E6%9E%84%E5%BB%BAgRPC%E6%9C%8D%E5%8A%A1/"/>
    <id>https://pengfeidai.github.io/2020/05/24/使用Golang构建gRPC服务/</id>
    <published>2020-05-24T14:52:28.000Z</published>
    <updated>2020-05-31T13:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>本教程提供了Go使用gRPC的基础教程</p>
<p>在教程中你将会学到如何：</p>
<ul>
<li>在 <code>.proto</code> 文件中定义一个服务。</li>
<li>使用protocol buffer编译器生成客户端和服务端代码。</li>
<li>使用gRPC的Go API为你的服务写一个客户端和服务器。</li>
</ul>
<h3 id="为什么使用gRPC"><a href="#为什么使用gRPC" class="headerlink" title="为什么使用gRPC"></a>为什么使用gRPC</h3><p>借助gRPC，我们可以在 .proto 文件中定义我们的服务，并以gRPC支持的任何语言来实现客户端和服务器，客户端和服务器又可以在从服务器到你自己的平板电脑的各种环境中运行-gRPC还会为你解决所有不同语言和环境之间通信的复杂性。我们还获得了使用protocol buffer的所有优点，包括<strong>有效的序列化（速度和体积两方面都比JSON更有效率）；简单的IDL（接口定义语言）和轻松的接口更新。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程提供了Go使用gRPC的基础教程&lt;/p&gt;
&lt;p&gt;在教程中你将会学到如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;.proto&lt;/code&gt; 文件中定义一个服务。&lt;/li&gt;
&lt;li&gt;使用protocol buffer编译器生成客户端和服务端代码。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="gPRC" scheme="https://pengfeidai.github.io/tags/gPRC/"/>
    
  </entry>
  
  <entry>
    <title>Golang中etcd使用教程</title>
    <link href="https://pengfeidai.github.io/2020/05/13/golang%E4%B8%ADetcd%E4%BD%BF%E7%94%A8/"/>
    <id>https://pengfeidai.github.io/2020/05/13/golang中etcd使用/</id>
    <published>2020-05-13T14:52:28.000Z</published>
    <updated>2020-05-26T15:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装pakcgae"><a href="#安装pakcgae" class="headerlink" title="安装pakcgae"></a>安装pakcgae</h2><p>我们使用的是v3版本的etcd client， 首先通过go get下载并编译安装<code>etcd clinet v3</code>。</p>
<p>文档地址：<a href="https://godoc.org/github.com/coreos/etcd/clientv3" target="_blank" rel="external">https://godoc.org/github.com/coreos/etcd/clientv3</a></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/coreos/etcd/clientv3</div></pre></td></tr></table></figure>
<p>所有相关依赖包会自动下载编译，包括protobuf、grpc等。这里需要注意需要将 <code>go.mod</code> 中添加一行，使用grpc的v1.26.0版本，否则后面连接会报错：<code>undefined: balancer.PickOptions</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">replace google.golang.org/grpc =&gt; google.golang.org/grpc v1<span class="number">.26</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<h2 id="连接客户端"><a href="#连接客户端" class="headerlink" title="连接客户端"></a>连接客户端</h2><p>创建客户端使用 <code>clientv3.New</code>，它需要传入一个Config配置，这里传了2个选项：</p>
<ul>
<li><code>Endpoints</code>：etcd的多个节点服务地址。</li>
<li><code>DialTimeout</code>：创建client的首次连接超时时间，这里传了5秒，如果5秒都没有连接成功就会返回err；一旦client创建成功，我们就不用再关心后续底层连接的状态了，client内部会重连。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"context"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/coreos/etcd/clientv3"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> defaultTimeout = <span class="number">5</span> * time.Second</div><div class="line"><span class="keyword">var</span> Client *clientv3.Client</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">clientv3</span>.<span class="title">Client</span></span> &#123;</div><div class="line">	cli, err := clientv3.New(clientv3.Config&#123;</div><div class="line">		Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"localhost:2379"</span>&#125;,</div><div class="line">		DialTimeout: defaultTimeout,</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"clientv3 Init error:"</span>, err)</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Client = cli</div><div class="line">	fmt.Println(<span class="string">"clientv3 Init success"</span>)</div><div class="line">	<span class="keyword">return</span> cli</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 初始化</span></div><div class="line">	cli := Init()</div><div class="line">	<span class="keyword">defer</span> cli.Close()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回的 <code>client</code>类型中，几个etcd客户端核心功能模块如下：</p>
<ul>
<li>Cluster：向集群里增加etcd服务端节点之类，属于管理员操作。</li>
<li>KV：我们主要使用的功能，即K-V键值库的操作。</li>
<li>Lease：租约相关操作，比如申请一个TTL=10秒的租约（应用给key可以实现键值的自动过期）。</li>
<li>Watcher：观察订阅，从而监听最新的数据变化。</li>
<li>Auth：管理etcd的用户和权限，属于管理员操作。</li>
<li>Maintenance：维护etcd，比如主动迁移etcd的leader节点，属于管理员操作。</li>
</ul>
<h3 id="Client-KV"><a href="#Client-KV" class="headerlink" title="Client.KV"></a>Client.KV</h3><blockquote>
<p>Client.KV 是我们平时主要使用的功能，它是一个 <code>interface</code>，提供了所有关于K-V操作的方法，我们前面通过 <code>etcdctl</code> 执行的相关命令，都可以在这里来操作。</p>
</blockquote>
<p>我们通过方法 <code>clientv3.NewKV()</code> 来获得KV接口的实现（实现中内置了错误重试机制）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  ...</div><div class="line">  kv := clientv3.NewKV(cli)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们将通过 <code>kv</code> 操作etcd中的数据。</p>
<h3 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h3><p>etcd v3使用gRPC进行远程程序调用，并且clientv3使用 <code>grpc-go</code> 连接etcd。确保在使用完客户端后关闭它，如果客户端没有关闭，连接将会有泄漏的goroutines。指定超时时间，通过 <code>context.WithTimeout</code> 使用APIs:</p>
<p>函数声明如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Put(ctx context.Context, key, val <span class="keyword">string</span>, opts ...OpOption) (*PutResponse, error)</div></pre></td></tr></table></figure></p>
<p>第一个参数是goroutine的上下文Context。后面两个参数分别是key和value；另外，还支持一个变长参数 ，可以传递一些控制项来影响Put的行为，例如可以携带一个lease ID来支持key过期。</p>
<p><strong>例：</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctx, cancel := context.WithTimeout(context.Background(), defaultTimeout)</div><div class="line">putResp, err := kv.Put(ctx, <span class="string">"/test"</span>, <span class="string">"Hello world"</span>)</div><div class="line">cancel()</div><div class="line"></div><div class="line">fmt.Println(putResp)</div><div class="line"><span class="comment">// &amp;&#123;cluster_id:14841639068965178418 member_id:10276657743932975437 revision:28 raft_term:5  &lt;nil&gt; &#123;&#125; [] 0&#125;</span></div></pre></td></tr></table></figure></p>
<p>我们需要判断err来确定操作是否成功。</p>
<p>不同的KV操作对应不同的response结构，所有KV操作返回的response结构如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> (</div><div class="line">	CompactResponse pb.CompactionResponse</div><div class="line">	PutResponse     pb.PutResponse</div><div class="line">	GetResponse     pb.RangeResponse</div><div class="line">	DeleteResponse  pb.DeleteRangeResponse</div><div class="line">	TxnResponse     pb.TxnResponse</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><p>函数声明如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get retrieves keys.</span></div><div class="line"><span class="comment">// By default, Get will return the value for "key", if any.</span></div><div class="line"><span class="comment">// When passed WithRange(end), Get will return the keys in the range [key, end).</span></div><div class="line"><span class="comment">// When passed WithFromKey(), Get returns keys greater than or equal to key.</span></div><div class="line"><span class="comment">// When passed WithRev(rev) with rev &gt; 0, Get retrieves keys at the given revision;</span></div><div class="line"><span class="comment">// if the required revision is compacted, the request will fail with ErrCompacted .</span></div><div class="line"><span class="comment">// When passed WithLimit(limit), the number of returned keys is bounded by limit.</span></div><div class="line"><span class="comment">// When passed WithSort(), the keys will be sorted.</span></div><div class="line">Get(ctx context.Context, key <span class="keyword">string</span>, opts ...OpOption) (*GetResponse, error)</div></pre></td></tr></table></figure></p>
<p>我们可以传递一些控制参数来影响Get的行为，比如：WithFromKey表示读取从参数key开始递增的所有key，而不是读取单个key。</p>
<p><strong>例：使用KV的Get方法来读取给定键的值：</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">resp, err := kv.Get(context.TODO(), <span class="string">"/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</div><div class="line">    fmt.Printf(<span class="string">"%s : %s\n"</span>, ev.Key, ev.Value)</div><div class="line">    <span class="comment">// "/test": "hello world"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>上面的例子中，没有传递opOption，所以就是获取 key=/test 的最新版本数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> RangeResponse <span class="keyword">struct</span> &#123;</div><div class="line">	Header *ResponseHeader <span class="string">`protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`</span></div><div class="line">	<span class="comment">// kvs is the list of key-value pairs matched by the range request.</span></div><div class="line">	<span class="comment">// kvs is empty when count is requested.</span></div><div class="line">	Kvs []*mvccpb.KeyValue <span class="string">`protobuf:"bytes,2,rep,name=kvs" json:"kvs,omitempty"`</span></div><div class="line">	<span class="comment">// more indicates if there are more keys to return in the requested range.</span></div><div class="line">	More <span class="keyword">bool</span> <span class="string">`protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`</span></div><div class="line">	<span class="comment">// count is set to the number of keys within the range when requested.</span></div><div class="line">	Count <span class="keyword">int64</span> <span class="string">`protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Kvs字段，保存了Get查询到的所有k-v对，因为上述例子只Get了一个单key，所以只需要判断一下 len(Kvs) 是否等于1即可知道key是否存在。</p>
<p><code>RangeResponse.More</code> 和 <code>Count</code>，当我们使用 <code>withLimit()</code> 等选项进行Get时会发挥作用，相当于翻页查询。</p>
<h4 id="WithPrefix前缀匹配"><a href="#WithPrefix前缀匹配" class="headerlink" title="WithPrefix前缀匹配"></a>WithPrefix前缀匹配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rangeResp, err := kv.Get(context.TODO(), &quot;/test/&quot;, clientv3.WithPrefix())</div></pre></td></tr></table></figure>
<p><code>WithPrefix()</code> 是指查找以/test/为前缀的所有key，因此可以模拟出查找子目录的效果。</p>
<p><strong>etcd是一个有序的k-v存储</strong>，因此 <code>/test/</code> 为前缀的key总是顺序排列在一起。</p>
<p>withPrefix()实际上会转化为范围查询，它根据前缀/test/生成了一个前闭后开的 <code>key range：[“/test/”, “/test0”)</code>，为什么呢？因为比/大的字符是0，所以以/test0作为范围的末尾，就可以扫描到所有以/test/为前缀的key了。</p>
<h4 id="Lease"><a href="#Lease" class="headerlink" title="Lease"></a>Lease</h4><p>etcd客户端的Lease对象可以通过以下的代码获取到</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lease := clientv3.NewLease(cli)</div></pre></td></tr></table></figure>
<p>Lease提供了功能如下：</p>
<ul>
<li><code>Grant</code>：分配一个租约。</li>
<li><code>Revoke</code>：释放一个租约。</li>
<li><code>TimeToLive</code>：获取剩余TTL时间。</li>
<li><code>Leases</code>：列举所有etcd中的租约。</li>
<li><code>KeepAlive</code>：自动定时的续约某个租约。</li>
<li><code>KeepAliveOnce</code>：为某个租约续约一次。</li>
<li><code>Close</code>：释放当前客户端建立的所有租约。</li>
</ul>
<p>要想实现key自动过期，首先得创建一个租约，下面的代码创建一个TTL为60秒的租约：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grantResp, err := lease.Grant(context.TODO(), <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>返回的grantResponse的结构体：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LeaseGrantResponse wraps the protobuf message LeaseGrantResponse.</span></div><div class="line"><span class="keyword">type</span> LeaseGrantResponse <span class="keyword">struct</span> &#123;</div><div class="line">	*pb.ResponseHeader</div><div class="line">	ID    LeaseID</div><div class="line">	TTL   <span class="keyword">int64</span></div><div class="line">	Error <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们用这个Lease往etcd中存储一个60秒过期的key：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">putResp, err := kv.Put(context.TODO(), <span class="string">"/test/key1"</span>, <span class="string">"hello world"</span>, clientv3.WithLease(grantResp.ID))</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 如果Put之前Lease已经过期了，那么这个Put操作会返回error，此时需要重新分配Lease。</p>
<p><strong>实现服务注册时，需要主动给Lease进行续约，通常是以小于TTL的间隔循环调用Lease的 KeepAliveOnce() 方法对租约进行续期，一旦某个服务节点出错无法完成租约的续期，等key过期后客户端即无法在查询服务时获得对应节点的服务，这样就通过租约到期实现了服务的错误隔离。</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keepResp, err := lease.KeepAliveOnce(context.TODO(), grantResp.ID)</div></pre></td></tr></table></figure>
<h3 id="Txn事务"><a href="#Txn事务" class="headerlink" title="Txn事务"></a>Txn事务</h3><p>etcd中事务是 <code>原子执行</code> 的，只支持 <code>if … then … else …</code> 这种表达。首先来看一下Txn中定义的方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Txn <span class="keyword">interface</span> &#123;</div><div class="line">	<span class="comment">// If takes a list of comparison. If all comparisons passed in succeed,</span></div><div class="line">	<span class="comment">// the operations passed into Then() will be executed. Or the operations</span></div><div class="line">	<span class="comment">// passed into Else() will be executed.</span></div><div class="line">	If(cs ...Cmp) Txn</div><div class="line"></div><div class="line">	<span class="comment">// Then takes a list of operations. The Ops list will be executed, if the</span></div><div class="line">	<span class="comment">// comparisons passed in If() succeed.</span></div><div class="line">	Then(ops ...Op) Txn</div><div class="line"></div><div class="line">	<span class="comment">// Else takes a list of operations. The Ops list will be executed, if the</span></div><div class="line">	<span class="comment">// comparisons passed in If() fail.</span></div><div class="line">	Else(ops ...Op) Txn</div><div class="line"></div><div class="line">	<span class="comment">// Commit tries to commit the transaction.</span></div><div class="line">	Commit() (*TxnResponse, error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过KV对象开启一个事务：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">txn := kv.Txn(context.TODO())</div></pre></td></tr></table></figure></p>
<p>例：下面的测试程序，判断如果key的版本号是2，则Put 键值k1和k2，否则Put键值k3和4。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kv.Txn(context.TODO()).If(</div><div class="line"> clientv3.Compare(clientv3.Version(key), <span class="string">"="</span>, <span class="number">2</span>)</div><div class="line">).Then(</div><div class="line"> clientv3.OpPut(k1,v1), clentv3.OpPut(k2,v2)</div><div class="line">).Else(</div><div class="line"> clientv3.OpPut(k3,v3), clientv3.OpPut(k4,v4)</div><div class="line">).Commit()</div></pre></td></tr></table></figure>
<h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><p>Watch用于 <strong>监听某个键的变化</strong>, Watch调用后返回一个 <code>WatchChan</code>，它的类型声明如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> WatchChan &lt;-<span class="keyword">chan</span> WatchResponse</div><div class="line"></div><div class="line"><span class="keyword">type</span> WatchResponse <span class="keyword">struct</span> &#123;</div><div class="line">    Header pb.ResponseHeader</div><div class="line">    Events []*Event</div><div class="line"></div><div class="line">    CompactRevision <span class="keyword">int64</span></div><div class="line"></div><div class="line">    Canceled <span class="keyword">bool</span></div><div class="line"></div><div class="line">    Created <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当监听的key有变化后会向 <code>WatchChan</code> 发送 <code>WatchResponse</code>。</p>
<p><strong>应用场景</strong>：系统配置的热加载，我们可以在系统读取到存储在etcd key中的配置后，用Watch监听key的变化。在单独的 <code>goroutine</code> 中接收WatchChan发送过来的数据，并将更新应用到系统设置的配置变量中，这样系统就实现了配置变量的热加载。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</div><div class="line">  config1 <span class="keyword">string</span></div><div class="line">  config2 <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> appConfig Appconfig</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">watchConfig</span><span class="params">(clt *clientv3.Client, key <span class="keyword">string</span>, c <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	watchCh := clt.Watch(context.TODO(), key)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> res := <span class="keyword">range</span> watchCh &#123;</div><div class="line">			value := res.Events[<span class="number">0</span>].Kv.Value</div><div class="line">			<span class="keyword">if</span> err := json.Unmarshal(value, c); err != <span class="literal">nil</span> &#123;</div><div class="line">				fmt.Println(<span class="string">"watchConfig err:"</span>, err)</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			fmt.Println(<span class="string">"watchConfig"</span>, c)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line">watchConfig(client, <span class="string">"config_key"</span>, &amp;Config)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装pakcgae&quot;&gt;&lt;a href=&quot;#安装pakcgae&quot; class=&quot;headerlink&quot; title=&quot;安装pakcgae&quot;&gt;&lt;/a&gt;安装pakcgae&lt;/h2&gt;&lt;p&gt;我们使用的是v3版本的etcd client， 首先通过go get下载并编译安装&lt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="etcd" scheme="https://pengfeidai.github.io/tags/etcd/"/>
    
      <category term="分布式" scheme="https://pengfeidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Galang常用包整理</title>
    <link href="https://pengfeidai.github.io/2020/05/12/Galang%E5%B8%B8%E7%94%A8%E5%8C%85%E6%95%B4%E7%90%86/"/>
    <id>https://pengfeidai.github.io/2020/05/12/Galang常用包整理/</id>
    <published>2020-05-12T14:52:28.000Z</published>
    <updated>2020-06-22T14:26:41.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h3><p><a href="https://www.godoc.org" target="_blank" rel="external">godoc</a></p>
<h3 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h3><ul>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a></li>
<li><a href="https://github.com/pengfeidai/beego" target="_blank" rel="external">beego</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="external">mysql</a></li>
<li><a href="https://www.godoc.org/gopkg.in/mgo.v2" target="_blank" rel="external">momgo</a></li>
<li><a href="https://github.com/go-redis/redis" target="_blank" rel="external">redis</a></li>
</ul>
<h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><ul>
<li><a href="https://github.com/micro" target="_blank" rel="external">micro</a></li>
</ul>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul>
<li><a href="https://github.com/golang/protobuf" target="_blank" rel="external">protobuf</a></li>
<li><a href="github.com/sirupsen/logrus">logrus</a></li>
<li><a href="gopkg.in/yaml.v2">yaml</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;godoc&quot;&gt;&lt;a href=&quot;#godoc&quot; class=&quot;headerlink&quot; title=&quot;godoc&quot;&gt;&lt;/a&gt;godoc&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.godoc.org&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>etcd技术原理探究</title>
    <link href="https://pengfeidai.github.io/2020/05/12/etcd%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>https://pengfeidai.github.io/2020/05/12/etcd技术原理探究/</id>
    <published>2020-05-12T14:52:28.000Z</published>
    <updated>2020-05-25T17:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="etcd简介"><a href="#etcd简介" class="headerlink" title="etcd简介"></a>etcd简介</h2><p>etcd 是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。在很多分布式系统架构中得到了广泛的应用，它内部采用 <code>raft协议</code> 作为一致性算法，基于Go语言实现。其主要功能有服务注册与发现、消息发布与订阅、负载均衡、分布式通知与协调、分布式锁、分布式队列、集群监控与 leader 选举等。</p>
<p>主要具有以下几个特点：</p>
<ul>
<li>简单：安装配置简单，易于部署，易使用。基于 HTTP 的 API 让你用 curl 就可以轻松使用。</li>
<li>安全：支持 SSL 证书验证。</li>
<li>键值对存储：将数据存储在分层组织的目录中，如同在标准文件系统中。</li>
<li>监测变更：监测特定的键或目录以进行更改，并对值的更改做出反应。</li>
<li>快速：根据官方提供的 benchmark 数据，单实例支持每秒 2k+ 读操作。</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性。</li>
</ul>
<h2 id="存储特点"><a href="#存储特点" class="headerlink" title="存储特点"></a>存储特点</h2><p>etcd 是一个 <strong>键值存储</strong> 的组件，其他的应用都是基于其键值存储的功能展开。etcd 的存储有如下特点：</p>
<ul>
<li>采用kv型数据存储，一般情况下比关系型数据库快。</li>
<li>支持动态存储(内存)以及静态存储(磁盘)。</li>
<li>分布式存储，可集成为多节点集群。</li>
<li>存储方式，采用类似目录结构。<ul>
<li>只有叶子节点才能真正存储数据，相当于文件。</li>
<li>叶子节点的父节点一定是目录，目录不能存储数据。</li>
</ul>
</li>
</ul>
<h2 id="etcd应用场景"><a href="#etcd应用场景" class="headerlink" title="etcd应用场景"></a>etcd应用场景</h2><p>etcd 的场景默认处理的数据都是系统中的控制数据。所以etcd在系统中的角色不是其他NoSQL产品的替代品，更不能作为应用的主要数据存储。etcd中应该 <strong>尽量只存储系统中服务的配置信息，对于应用数据只推荐把数据量很小，但是更新和访问频次都很高的数据存储在etcd中。</strong></p>
<h3 id="服务发现（Service-Discovery）"><a href="#服务发现（Service-Discovery）" class="headerlink" title="服务发现（Service Discovery）"></a>服务发现（Service Discovery）</h3><p>服务发现要解决的是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 udp 或 tcp 端口，并且通过名字就可以查找和连接。</p>
<p>要解决服务发现的问题，需要具备下面三种必备属性：</p>
<ol>
<li><strong>一个强一致性、高可用的服务存储目录。</strong> 基于Ralf算法的etcd天生就是这样一个强一致性、高可用的服务存储目录。</li>
<li><strong>一种注册服务和监控服务健康状态的机制。</strong> 用户可以在etcd中注册服务，并且对注册的服务配置 <code>key TTL</code>，定时保持服务的心跳以达到监控健康状态的效果。</li>
<li><strong>一种查找和连接服务的机制。</strong> 通过在 etcd 指定的主题（由服务名称构成的服务目录）下注册的服务也能在对应的主题下查找到。</li>
</ol>
<h3 id="etcd架构图"><a href="#etcd架构图" class="headerlink" title="etcd架构图"></a>etcd架构图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://150.158.113.204:9000/etcd.jpg" alt="images" title="">
                </div>
                <div class="image-caption">images</div>
            </figure>
<p>从上图中我们可以看到，etcd 主要分为四个部分。</p>
<ul>
<li><code>HTTP Server</code>：用于处理用户发送的 API 请求以及其它 etcd 节点的同步与心跳信息请求。</li>
<li><code>Store</code>：用于处理 etcd 支持的各类功能的事务，包括数据索引、节点状态变更、监控与反馈、事件处理与执行等等，是 etcd 对用户提供的大多数 API 功能的具体实现。</li>
<li><code>Raft</code>：Raft 强一致性算法的具体实现，是 etcd 的核心。</li>
<li><code>WAL</code>：Write Ahead Log（预写式日志），是 etcd 的数据存储方式。除了在内存中存有所有数据的状态以及节点的索引以外，etcd 就通过 WAL 进行持久化存储。WAL 中，所有的数据提交前都会事先记录日志。Snapshot 是为了防止数据过多而进行的状态快照；Entry 表示存储的具体日志内容。</li>
</ul>
<p>通常，一个用户的请求发送过来，会经由 HTTP Server 转发给 Store 进行具体的事务处理，如果涉及到节点的修改，则交给 Raft 模块进行状态的变更、日志的记录，然后再同步给别的 etcd 节点以确认数据提交，最后进行数据的提交，再次同步。</p>
<h3 id="消息发布与订阅"><a href="#消息发布与订阅" class="headerlink" title="消息发布与订阅"></a>消息发布与订阅</h3><p>在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个 <code>配置共享中心</code>，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://150.158.113.204:9000/etcd_pc.png" alt="images" title="">
                </div>
                <div class="image-caption">images</div>
            </figure>
<p>应用中用到的一些 <strong>配置信息</strong> 放到etcd上进行集中管理。使用方式：应用在启动的时候主动从etcd获取一次配置信息，同时，在etcd节点上注册一个Watcher并等待，以后每次配置有更新的时候，etcd都会实时通知订阅者，以此达到获取最新配置信息的目的。</p>
<p><strong>分布式搜索服务中</strong>，索引的元信息和服务器集群机器的节点状态存放在etcd中，供各个客户端订阅使用。使用etcd的key TTL功能可以确保机器状态是实时更新的。</p>
<p><strong>分布式日志收集系统</strong>，这个系统的核心工作是收集分布在不同机器的日志。收集器通常是按照应用（或主题）来分配收集任务单元，因此可以在etcd上创建一个以应用（主题）命名的目录P，并将这个应用（主题相关）的所有机器ip，以子目录的形式存储到目录P上，然后设置一个 etcd 递归的Watcher，递归式的监控应用（主题）目录下所有信息的变动。这样就实现了机器IP（消息）变动的时候，能够实时通知到收集器调整任务分配。</p>
<h3 id="用户从集群中哪个节点读写数据？"><a href="#用户从集群中哪个节点读写数据？" class="headerlink" title="用户从集群中哪个节点读写数据？"></a>用户从集群中哪个节点读写数据？</h3><p>为了保证数据的强一致性，etcd集群中所有的数据流向都是一个方向，从 Leader （主节点）流向 Follower，也就是所有 Follower 的数据必须与 Leader 保持一致，如果不一致会被覆盖。</p>
<p>简单点说就是，用户可以对etcd集群中的所有节点进行读写，读取非常简单因为每个节点保存的数据是强一致的。对于写入来说，etcd集群中的节点会选举出Leader节点，如果写入请求来自Leader节点即可直接写入然后Leader节点会把写入分发给所有Follower，如果写入请求来自其他Follower节点那么写入请求会给转发给Leader节点，由Leader节点写入之后再分发给集群上的所有其他节点。</p>
<h4 id="如何选举Leader节点"><a href="#如何选举Leader节点" class="headerlink" title="如何选举Leader节点"></a>如何选举Leader节点</h4><p><strong>假设集群中有三个节点，集群启动之初节点中并没有被选举出的Leader。</strong></p>
<ul>
<li><p>Raft算法使用 <code>随机Timer</code> 来初始化Leader选举流程。比如说在上面三个节点上都运行了Timer（每个Timer的持续时间是随机的），第一个节点率先完成了Timer，随后它就会向其他两个节点发送成为Leader的请求，其他节点接收到请求后会以 <code>投票回应</code> 然后第一个节点被选举为Leader。</p>
</li>
<li><p>成为Leader后，该节点会 <code>以固定时间间隔向其他节点发送通知，确保自己仍是Leader。</code> 有些情况下当Follower们收不到Leader的通知后，比如说Leader节点宕机或者失去了连接，其他节点会重复之前选举过程选举出新的Leader。</p>
</li>
</ul>
<h3 id="判断写入是否成功"><a href="#判断写入是否成功" class="headerlink" title="判断写入是否成功"></a>判断写入是否成功</h3><p>etcd认为写入请求被Leader节点处理并分发给了 <code>多数节点</code> 后，就是一个成功的写入。如何界定多数节点呢？假设总结点数是N，那么界定多数节点的公式是 <code>Quorum=N/2+1</code>。</p>
<p><code>容错节点数</code>：集群中节点总数(Instances)对应的Quorum数量，用Instances减去Quorom就是集群中容错节点（允许出故障的节点）的数量。</p>
<p>所以在集群中推荐的最少节点数量是3个，因为1和2个节点的容错节点数都是0，一旦有一个节点宕掉整个集群就不能正常工作了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Instances    Quorum    Fault Toleran</div><div class="line"></div><div class="line"><span class="number">1</span>            <span class="number">1</span>/<span class="number">2</span>+<span class="number">1</span>=<span class="number">1</span>       <span class="number">1</span><span class="number">-1</span>=<span class="number">0</span></div><div class="line"><span class="number">2</span>            <span class="number">2</span>/<span class="number">2</span>+<span class="number">1</span>=<span class="number">2</span>       <span class="number">2</span><span class="number">-2</span>=<span class="number">0</span></div><div class="line"><span class="number">3</span>            <span class="number">3</span>/<span class="number">2</span>+<span class="number">1</span>=<span class="number">2</span>       <span class="number">3</span><span class="number">-2</span>=<span class="number">1</span></div><div class="line"><span class="number">4</span>               <span class="number">3</span>            <span class="number">1</span></div><div class="line"><span class="number">5</span>               <span class="number">3</span>            <span class="number">2</span></div><div class="line"><span class="number">6</span>               <span class="number">4</span>            <span class="number">2</span></div><div class="line"><span class="number">7</span>               <span class="number">4</span>            <span class="number">3</span></div></pre></td></tr></table></figure>
<p>如上所示：<strong>当决定集群中节点的数量时，强烈推荐奇数数量的节点。</strong> 例如：6个节点的集群它的容错能力并没有比5个节点的好，他们的容错节点数一样，一旦容错节点超过2后，由于Quorum节点数小于4整个集群也变为不可用的状态了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;etcd简介&quot;&gt;&lt;a href=&quot;#etcd简介&quot; class=&quot;headerlink&quot; title=&quot;etcd简介&quot;&gt;&lt;/a&gt;etcd简介&lt;/h2&gt;&lt;p&gt;etcd 是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="etcd" scheme="https://pengfeidai.github.io/tags/etcd/"/>
    
      <category term="分布式" scheme="https://pengfeidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识etcd</title>
    <link href="https://pengfeidai.github.io/2020/05/10/%E5%88%9D%E8%AF%86%20etcd/"/>
    <id>https://pengfeidai.github.io/2020/05/10/初识 etcd/</id>
    <published>2020-05-10T14:52:28.000Z</published>
    <updated>2020-05-25T17:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>etcd</code> 是一个 <code>golang</code> 编写的分布式、高可用的一致性键值存储系统，用于提供可靠的分布式键值(key-value)存储、配置共享和服务发现等功能。etcd可以用于存储关键数据和实现分布式调度，在现代化的集群运行中能够起到关键性的作用。</p>
<p>etcd基于 <code>raft协议</code>，通过复制日志文件的方式来保证数据的强一致性。在etcd之前，常用的是基于paxos协议的zookeeper。</p>
<h3 id="单机安装etcd"><a href="#单机安装etcd" class="headerlink" title="单机安装etcd"></a>单机安装etcd</h3><p>etcd在生产环境中一般推荐集群方式部署。在这里，主要讲讲单节点安装和基本使用。</p>
<p><strong>CentOS</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y etcd</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 设置开机自启动</div><div class="line"><span class="meta">$</span> systemctl enable etcd</div><div class="line"><span class="meta">#</span> 启动etcd</div><div class="line"><span class="meta">$</span> systemctl start etcd</div><div class="line"><span class="meta">#</span> 查看etcd运行状态</div><div class="line"><span class="meta">$</span> systemctl status etcd</div><div class="line"></div><div class="line">● etcd.service - Etcd Server</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/etcd.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Sun 2020-05-24 23:08:57 CST; 7s ago</div><div class="line"> Main PID: 20272 (etcd)</div><div class="line">    Tasks: 8</div><div class="line">   Memory: 10.0M</div><div class="line">   CGroup: /system.slice/etcd.service</div><div class="line">           └─20272 /usr/bin/etcd --name=default --data-dir=/var/lib/etcd/default.etcd --listen-client-urls=http://localhost:2379</div><div class="line"></div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: 8e9e05c52164694d received MsgVoteResp from 8e9e05c52164694d at term 2</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: 8e9e05c52164694d became leader at term 2</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: raft.node: 8e9e05c52164694d elected leader 8e9e05c52164694d at term 2</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: setting up the initial cluster version to 3.3</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: published &#123;Name:default ClientURLs:[http://localhost:2379]&#125; to cluster cdf818194e3a8c32</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: ready to serve client requests</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: serving insecure client requests on 127.0.0.1:2379, this is strongly discouraged!</div><div class="line">May 24 23:08:57 VM_0_3_centos systemd[1]: Started Etcd Server.</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: set the initial cluster version to 3.3</div><div class="line">May 24 23:08:57 VM_0_3_centos etcd[20272]: enabled capabilities for version 3.3</div></pre></td></tr></table></figure>
<h3 id="systemd配置"><a href="#systemd配置" class="headerlink" title="systemd配置"></a>systemd配置</h3><p>从 <code>systemctl status etcd</code> 命令的输出可以看到，etcd的 systemd配置文件位于 <code>/usr/lib/systemd/system/etcd.service</code>，该配置文件的内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Etcd Server</div><div class="line">After=network.target</div><div class="line">After=network-online.target</div><div class="line">Wants=network-online.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">WorkingDirectory=/var/lib/etcd/</div><div class="line">EnvironmentFile=-/etc/etcd/etcd.conf</div><div class="line">User=etcd</div><div class="line"><span class="meta">#</span> set GOMAXPROCS to number of processors</div><div class="line">ExecStart=/bin/bash -c "GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\"$&#123;ETCD_NAME&#125;\" --data-dir=\"$&#123;ETCD_DATA_DIR&#125;\" --listen-client-urls=\"$&#123;ETCD_LISTEN_CLIENT_URLS&#125;\""</div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>从上面可以看出，etcd的配置文件： <code>EnvironmentFile=-/etc/etcd/etcd.conf</code>。如果我们想要修改某些配置项，可以编辑该文件。</p>
<h3 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h3><p>etcd安装完成后，默认只能本机访问，如果想要其他主机访问，还需要修改 <code>/etc/etcd/etcd.conf</code> 中的配置。例如，本实例安装etcd的机器IP是 127.0.0.1（下面服务器ip用127.0.0.1替代，自己根据实际更改），在自己的机器远程访问服务器上安装的etcd的2379端口，结果访问被拒绝：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> telnet 127.0.0.1 2379</div><div class="line">Trying 127.0.0.1...</div><div class="line">telnet: connect to address 127.0.0.1: Connection refused</div><div class="line">telnet: Unable to connect to remote host</div></pre></td></tr></table></figure>
<p><strong>修改 /etc/etcd/etcd.conf 配置：</strong></p>
<p><strong>注意：此处 127.0.0.1 使用内网ip</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ETCD_LISTEN_CLIENT_URLS="http://127.0.0.1:2379,http://localhost:2379"</div></pre></td></tr></table></figure>
<p><strong>重启etcd</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> systemctl restart etcd</div></pre></td></tr></table></figure></p>
<h2 id="etcdctl-常用命令"><a href="#etcdctl-常用命令" class="headerlink" title="etcdctl 常用命令"></a>etcdctl 常用命令</h2><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">etcdctl -v</div><div class="line"></div><div class="line">etcdctl version: 3.3.11</div><div class="line">API version: 2</div></pre></td></tr></table></figure>
<p>可以看到默认 API version: 2，由于etcdctl的版本2和版本3并不兼容，我们使用以下命令设置。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 设置环境变量，版本3。</div><div class="line">export ETCDCTL_API=3</div><div class="line"></div><div class="line">etcdctl version</div><div class="line">etcdctl version: 3.3.11</div><div class="line">API version: 3.3</div></pre></td></tr></table></figure>
<h3 id="COMMANDS"><a href="#COMMANDS" class="headerlink" title="COMMANDS"></a>COMMANDS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">get			Gets the key or a range of keys</div><div class="line">put			Puts the given key into the store</div><div class="line">del			Removes the specified key or range ofkeys [key, range_end)</div><div class="line">txn			Txn processes all the requests in onetransaction</div><div class="line">compaction		Compacts the event history in etcd</div><div class="line">alarm disarm		Disarms all alarms</div><div class="line">alarm list		Lists all alarms</div><div class="line">defrag			Defragments the storage of the etcdmembers with given endpoints</div><div class="line">endpoint health		Checks the healthiness ofendpoints specified in `--endpoints` flag</div><div class="line">endpoint status		Prints out the status ofendpoints specified in `--endpoints` flag</div><div class="line">endpoint hashkv		Prints the KV history hash foreach endpoint in --endpoints</div><div class="line">move-leader		Transfers leadership to another etcdcluster member.</div><div class="line">watch			Watches events stream on keys orprefixes</div><div class="line">version			Prints the version of etcdctl</div><div class="line">lease grant		Creates leases</div><div class="line">lease revoke		Revokes leases</div><div class="line">lease timetolive	Get lease information</div><div class="line">lease list		List all active leases</div><div class="line">lease keep-alive	Keeps leases alive (renew)</div><div class="line">member add		Adds a member into the cluster</div><div class="line">member remove		Removes a member from the cluster</div><div class="line">member update		Updates a member in the cluster</div><div class="line">member list		Lists all members in the cluster</div><div class="line">snapshot save		Stores an etcd node backendsnapshot to a given file</div><div class="line">snapshot restore	Restores an etcd member snapshotto an etcd directory</div><div class="line">snapshot status		Gets backend snapshot statusof a given file</div><div class="line">make-mirror		Makes a mirror at the destinationetcd cluster</div><div class="line">migrate			Migrates keys in a v2 store to amvcc store</div><div class="line">lock			Acquires a named lock</div><div class="line">elect			Observes and participates in leaderelection</div><div class="line">auth enable		Enables authentication</div><div class="line">auth disable		Disables authentication</div><div class="line">user add		Adds a new user</div><div class="line">user delete		Deletes a user</div><div class="line">user get		Gets detailed information of a user</div><div class="line">user list		Lists all users</div><div class="line">user passwd		Changes password of user</div><div class="line">user grant-role		Grants a role to a user</div><div class="line">user revoke-role	Revokes a role from a user</div><div class="line">role add		Adds a new role</div><div class="line">role delete		Deletes a role</div><div class="line">role get		Gets detailed information of a role</div><div class="line">role list		Lists all roles</div><div class="line">role grant-permission	Grants a key to a role</div><div class="line">role revoke-permission	Revokes a key from a role</div><div class="line">check perf		Check the performance of the etcdcluster</div><div class="line">help			Help about any command</div></pre></td></tr></table></figure>
<h3 id="查看集群状态和节点"><a href="#查看集群状态和节点" class="headerlink" title="查看集群状态和节点"></a>查看集群状态和节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">etcdctl member list</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>可以把key理解成目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">etcdctl put /hello/key1 "world1"</div><div class="line">OK</div><div class="line"></div><div class="line">etcdctl put /hello/key2 "world2"</div><div class="line">OK</div><div class="line"></div><div class="line">etcdctl put /hello/key3 "world3"</div><div class="line">OK</div></pre></td></tr></table></figure>
<h3 id="根据key查询"><a href="#根据key查询" class="headerlink" title="根据key查询"></a>根据key查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">etcdctl get /hello/key1</div><div class="line"></div><div class="line">/hello/key1</div><div class="line">world1</div></pre></td></tr></table></figure>
<h3 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">etcdctl del /hello/key3</div><div class="line"></div><div class="line">1</div></pre></td></tr></table></figure>
<h3 id="批量获取目录下的内容"><a href="#批量获取目录下的内容" class="headerlink" title="批量获取目录下的内容"></a>批量获取目录下的内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 获取key value</div><div class="line">etcdctl get /hello/ --prefix</div><div class="line"><span class="meta">#</span> 返回值</div><div class="line">/hello/key1</div><div class="line">world1</div><div class="line">/hello/key2</div><div class="line">world2</div><div class="line"><span class="meta"></span></div><div class="line">#只获取key</div><div class="line">etcdctl get /hello/ --prefix --keys-only</div><div class="line"><span class="meta">#</span> 返回值</div><div class="line">/hello/key1</div><div class="line">/hello/key2</div><div class="line"><span class="meta"></span></div><div class="line"># 只获取value</div><div class="line">etcdctl get /hello/ --prefix --print-value-only</div><div class="line"><span class="meta">#</span> 返回值</div><div class="line">world1</div><div class="line">world2</div></pre></td></tr></table></figure>
<h3 id="watch监听key"><a href="#watch监听key" class="headerlink" title="watch监听key"></a>watch监听key</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">etcdctl watch /hello/key1</div></pre></td></tr></table></figure>
<h3 id="租约（可以理解成定时器，把key绑定上之后，到时间了key就被删除了）"><a href="#租约（可以理解成定时器，把key绑定上之后，到时间了key就被删除了）" class="headerlink" title="租约（可以理解成定时器，把key绑定上之后，到时间了key就被删除了）"></a>租约（可以理解成定时器，把key绑定上之后，到时间了key就被删除了）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">etcdctl lease grant 60</div><div class="line"><span class="meta">#</span> 返回值</div><div class="line">lease 694d72477c721546 granted with TTL(60s)</div><div class="line"><span class="meta"></span></div><div class="line"># 创建一条数据并绑定到上面租约上</div><div class="line">etcdctl put --lease=694d72477c721546 /hello/key3 "world3"</div><div class="line"><span class="meta"></span></div><div class="line"># 马上获取数据</div><div class="line">etcdctl get /hello/key3 </div><div class="line"><span class="meta"></span></div><div class="line"># 可以删除租约（对应的key也会被直接删除）</div><div class="line">etcdctl lease revoke 694d72477c721546</div><div class="line"><span class="meta"></span></div><div class="line"># 续租（60s）</div><div class="line">etcdctl lease keep-alive 694d72477c721546</div></pre></td></tr></table></figure>
<h3 id="snapshot"><a href="#snapshot" class="headerlink" title="snapshot"></a>snapshot</h3><p>保存备份当前集群etcd的信息，用于新的etcd集群</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">etcdctl snapshot save snapshot.db</div><div class="line"><span class="meta">#</span> 返回</div><div class="line">Snapshot saved at snapshot.db</div><div class="line">ls</div><div class="line">snapshot.db</div></pre></td></tr></table></figure>
<h3 id="访问控制相关"><a href="#访问控制相关" class="headerlink" title="访问控制相关"></a>访问控制相关</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> root用户</div><div class="line">etcdctl user add root</div><div class="line"><span class="meta"></span></div><div class="line"># 非root用户</div><div class="line">etcdctl user add mochu</div></pre></td></tr></table></figure>
<h4 id="添加role"><a href="#添加role" class="headerlink" title="添加role"></a>添加role</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">etcdctl role add admin</div></pre></td></tr></table></figure>
<h4 id="将用户加入角色中"><a href="#将用户加入角色中" class="headerlink" title="将用户加入角色中"></a>将用户加入角色中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">etcdctl user grant-role mochu admin</div></pre></td></tr></table></figure>
<p><strong>本文只介绍简单的指令，仅供学习使用，更多详细命令，请查看官方文档。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;etcd&lt;/code&gt; 是一个 &lt;code&gt;golang&lt;/code&gt; 编写的分布式、高可用的一致性键值存储系统，用于提供可靠的
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
      <category term="etcd" scheme="https://pengfeidai.github.io/tags/etcd/"/>
    
      <category term="分布式" scheme="https://pengfeidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>新机器nginx安装机器使用</title>
    <link href="https://pengfeidai.github.io/2020/05/05/%E6%96%B0%E6%9C%BA%E5%99%A8nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://pengfeidai.github.io/2020/05/05/新机器nginx安装及其使用/</id>
    <published>2020-05-05T14:52:28.000Z</published>
    <updated>2020-05-25T17:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>gcc安装，nginx源码编译需要</div><div class="line">yum install gcc-c++</div><div class="line"><span class="meta"></span></div><div class="line">#PCRE pcre-devel 安装，nginx 的 http 模块使用 pcre 来解析正则表达式</div><div class="line">yum install -y pcre pcre-devel</div><div class="line"><span class="meta"></span></div><div class="line">#zlib安装，nginx 使用zlib对http包的内容进行gzip</div><div class="line">yum install -y zlib zlib-devel</div><div class="line"><span class="meta"></span></div><div class="line">#OpenSSL 安装，强大的安全套接字层密码库，nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http）</div><div class="line">yum install -y openssl openssl-devel</div></pre></td></tr></table></figure>
<h3 id="2-使用wget命令下载（推荐）"><a href="#2-使用wget命令下载（推荐）" class="headerlink" title="2. 使用wget命令下载（推荐）"></a>2. 使用wget命令下载（推荐）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 版本自行选择稳定版即可</div><div class="line">wget -c https://nginx.org/download/nginx-1.16.1.tar.gz</div></pre></td></tr></table></figure>
<h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 解压到指定目录</div><div class="line">tar -zxvf nginx-1.16.1.tar.gz -C /opt/bin</div><div class="line"><span class="meta"></span></div><div class="line"># 进入目录</div><div class="line">cd /opt/bin/nginx-1.16.1</div><div class="line"><span class="meta"></span></div><div class="line">#使用默认配置</div><div class="line">./configure</div><div class="line"><span class="meta"></span></div><div class="line">#编译安装</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="meta"></span></div><div class="line"># 查找安装路径，默认都是这个路径</div><div class="line">[root@VM_0_3_centos nginx-1.16.1]# whereis nginx</div><div class="line">nginx: /usr/local/nginx</div><div class="line"><span class="meta"></span></div><div class="line"># 启动、停止nginx</div><div class="line">cd /usr/local/nginx/sbin/</div><div class="line">./nginx  #启动</div><div class="line">./nginx -s stop  #停止，直接查找nginx进程id再使用kill命令强制杀掉进程</div><div class="line">./nginx -s quit  #退出停止，等待nginx进程处理完任务再进行停止</div><div class="line">./nginx -s reload  #重新加载配置文件，修改nginx.conf后使用该命令，新配置即可生效</div><div class="line"><span class="meta"></span></div><div class="line">#重启nginx，建议先停止，再启动</div><div class="line">./nginx -s stop</div><div class="line">./nginx</div><div class="line"><span class="meta"></span></div><div class="line">#查看nginx进程</div><div class="line">[root@VM_0_12_centos ~]# ps aux|grep nginx</div><div class="line">root     21888  0.0  0.0  20556   616 ?        Ss   21:24   0:00 nginx: master process ./nginx</div><div class="line">nobody   21889  0.0  0.0  23092  1636 ?        S    21:24   0:00 nginx: worker process</div><div class="line">root     25687  0.0  0.0 112712   960 pts/0    R+   21:52   0:00 grep --color=auto nginx</div></pre></td></tr></table></figure>
<h3 id="4-设置开机自启动"><a href="#4-设置开机自启动" class="headerlink" title="4. 设置开机自启动"></a>4. 设置开机自启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 第一步</div><div class="line">vi /etc/rc.local</div><div class="line"><span class="meta"></span></div><div class="line"># 增加一行</div><div class="line">/usr/local/nginx/sbin/nginx</div><div class="line"><span class="meta"></span></div><div class="line">#设置执行权限</div><div class="line">cd /etc</div><div class="line">chmod 755 rc.local</div></pre></td></tr></table></figure>
<p>此时浏览器输入服务器ip即可访问 <code>nginx</code> 页面。</p>
<h3 id="5-配置域名映射"><a href="#5-配置域名映射" class="headerlink" title="5. 配置域名映射"></a>5. 配置域名映射</h3><p>nginx 配置文件都在 <code>/usr/local/nginx/conf/</code> 目录下，文件名称是 <code>nginx.conf</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 进入nginx配置文件目录</div><div class="line">cd /usr/local/nginx/conf</div><div class="line"><span class="meta"></span></div><div class="line"># 修改配置文件</div><div class="line">vi nginx.conf</div></pre></td></tr></table></figure>
<p><strong>域名配置：</strong></p>
<p>只需要修改 <code>server_name</code> 和 <code>location</code> 里面的内容即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">listen       80;</div><div class="line"><span class="meta">#</span> 域名</div><div class="line">server_name  www.example.com;</div><div class="line"><span class="meta">#</span> 访问地址的设置</div><div class="line">location / &#123;</div><div class="line">proxy_pass http://localhost:9000; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后，重新加载配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/sbin/</div><div class="line">./nginx -s reload</div></pre></td></tr></table></figure>
<h3 id="6-静态资源访问（图片为例）"><a href="#6-静态资源访问（图片为例）" class="headerlink" title="6. 静态资源访问（图片为例）"></a>6. 静态资源访问（图片为例）</h3><ol>
<li>创建一个存储images的目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/nginx/www/images</div></pre></td></tr></table></figure>
<ol>
<li>编辑配置</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 修改用户权限</div><div class="line">user  root;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">server &#123;</div><div class="line">  listen   8000;</div><div class="line">  server_name  localhost;</div><div class="line"></div><div class="line">  location ~ .*\.(gif|jpg|jpeg|png)$ &#123;</div><div class="line">    root /opt/nginx/www/images/;</div><div class="line">    autoindex on;  # 打开浏览功能</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>重启nginx服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart nginx 或 nginx -s reload</div></pre></td></tr></table></figure>
<ol>
<li>在浏览器访问测试</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装依赖&quot;&gt;&lt;a href=&quot;#1-安装依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 安装依赖&quot;&gt;&lt;/a&gt;1. 安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
    
      <category term="nginx" scheme="https://pengfeidai.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Golang中strings常用方法整理</title>
    <link href="https://pengfeidai.github.io/2020/05/03/Golang%E4%B8%ADstrings%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://pengfeidai.github.io/2020/05/03/Golang中strings常用方法/</id>
    <published>2020-05-03T14:52:28.000Z</published>
    <updated>2020-06-25T12:49:30.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h3><ul>
<li>func Fields(s string) []string</li>
<li>func FieldsFunc(s string, f func(rune) bool) []string</li>
</ul>
<p><code>Fields</code>：使用空白分割字符串。<br><code>FieldsFunc</code>：根据传入的函数分割字符串，如果当前参数c不是数字或者字母，返回true作为分割符号。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fmt.Println(strings.Fields(<span class="string">"  foo bar  baz   "</span>)) <span class="comment">//  ["foo" "bar" "baz"]</span></div><div class="line"></div><div class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c)</div><div class="line">&#125;</div><div class="line">fmt.Println(strings.FieldsFunc(<span class="string">"  foo1;bar2,baz3..."</span>, f)) <span class="comment">// ["foo1" "bar2" "baz3"]</span></div></pre></td></tr></table></figure>
<h3 id="HasPrefix-和-HasSuffix"><a href="#HasPrefix-和-HasSuffix" class="headerlink" title="HasPrefix 和 HasSuffix"></a>HasPrefix 和 HasSuffix</h3><blockquote>
<p>判断字符串是否是以某个子串作为开头或者结尾。(注：可以理解为js中startsWith和endsWith)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strings.HasPrefix(<span class="string">"hello"</span>, <span class="string">"he"</span>) <span class="comment">// true</span></div><div class="line">strings.HasSuffix(<span class="string">"hello"</span>, <span class="string">"lo"</span>)  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote>
<p>使用某个sep，连接字符串。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s := []<span class="keyword">string</span>&#123;<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>&#125;</div><div class="line">strings.Join(s, <span class="string">", "</span>)  <span class="comment">// foo,bar,baz</span></div></pre></td></tr></table></figure>
<h3 id="Index，IndexAny，IndexByte，IndexFunc，IndexRune"><a href="#Index，IndexAny，IndexByte，IndexFunc，IndexRune" class="headerlink" title="Index，IndexAny，IndexByte，IndexFunc，IndexRune"></a>Index，IndexAny，IndexByte，IndexFunc，IndexRune</h3><blockquote>
<p>都是返回满足条件的第一个位置，如果没有满足条件的数据，返回-1。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Index</span></div><div class="line">strings.Index(<span class="string">"hello"</span>, <span class="string">"lo"</span>) <span class="comment">// 3</span></div><div class="line">strings.Index(<span class="string">"hello"</span>, <span class="string">"ab"</span>) <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<h3 id="LastIndex，LastIndexAny，LastIndexByte和LastIndexFunc"><a href="#LastIndex，LastIndexAny，LastIndexByte和LastIndexFunc" class="headerlink" title="LastIndex，LastIndexAny，LastIndexByte和LastIndexFunc"></a>LastIndex，LastIndexAny，LastIndexByte和LastIndexFunc</h3><blockquote>
<p>与 Index 用法保持一致，从右往前计数。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">strings.LastIndex(<span class="string">"hello"</span>, <span class="string">"h"</span>) <span class="comment">// 0</span></div><div class="line">fmt.Println(strings.LastIndex(<span class="string">"hello"</span>, <span class="string">"el"</span>)) <span class="comment">// 1</span></div><div class="line">strings.LastIndex(<span class="string">"hello"</span>, <span class="string">"ab"</span>)  <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<h3 id="Contains，ContainsAny-和-ContainsRune"><a href="#Contains，ContainsAny-和-ContainsRune" class="headerlink" title="Contains，ContainsAny 和 ContainsRune"></a>Contains，ContainsAny 和 ContainsRune</h3><blockquote>
<p>字符串s中是否包含substr，返回true或者false。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strings.Contains(<span class="string">"hello"</span>, <span class="string">"he"</span>) <span class="comment">// true</span></div><div class="line">strings.Contains(<span class="string">"hello"</span>, <span class="string">"ab"</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><blockquote>
<p>判断子串在源串中的数量，如果子串为空，则长度为源串的长度+1。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strings.Count(<span class="string">"hello"</span>, <span class="string">"l"</span>) <span class="comment">// 2</span></div><div class="line">strings.Count(<span class="string">"hello"</span>, <span class="string">""</span>) <span class="comment">// 6 = 5 + 1</span></div></pre></td></tr></table></figure>
<h3 id="EqualFold"><a href="#EqualFold" class="headerlink" title="EqualFold"></a>EqualFold</h3><blockquote>
<p>在不区分大小写的情况下，判断两个字符串是否相同。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings.EqualFold(<span class="string">"hello"</span>, <span class="string">"HeLLo"</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h3><blockquote>
<p>重复一下s，count是重复的次数，不能传负数。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings.Repeat(<span class="string">"hello"</span>, <span class="number">2</span>) <span class="comment">// hellohello</span></div></pre></td></tr></table></figure>
<h3 id="Replace和ReplaceAll"><a href="#Replace和ReplaceAll" class="headerlink" title="Replace和ReplaceAll"></a>Replace和ReplaceAll</h3><blockquote>
<p>使用 <code>new</code> 来替换 <code>old</code> ，替换的次数为 n。如果n为负数，则替换所有的满足条件的子串。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">strings.Replace(<span class="string">"hello world"</span>, <span class="string">"o"</span>, <span class="string">"oo"</span>, <span class="number">1</span>) <span class="comment">// "helloo world"</span></div><div class="line"></div><div class="line">strings.Replace(<span class="string">"hello world"</span>, <span class="string">"o"</span>, <span class="string">"oo"</span>, <span class="number">-1</span>) <span class="comment">// "helloo woorld"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>ReplaceAll 使用new替换所有的old，相当于使用Replace时 n&lt;0。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings.ReplaceAll(<span class="string">"hello world"</span>, <span class="string">"o"</span>, <span class="string">"oo"</span>) <span class="comment">// "helloo woorld"</span></div></pre></td></tr></table></figure>
<h3 id="Split，SplitN，SplitAfter和SplitAfterN"><a href="#Split，SplitN，SplitAfter和SplitAfterN" class="headerlink" title="Split，SplitN，SplitAfter和SplitAfterN"></a>Split，SplitN，SplitAfter和SplitAfterN</h3><blockquote>
<p>将字符串切割成数组。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">strings.Split(<span class="string">"a,b,c"</span>, <span class="string">","</span>) <span class="comment">// ["a","b","c"]</span></div><div class="line"></div><div class="line">strings.Split(<span class="string">"a man a plan a canal panama"</span>, <span class="string">"a "</span>) <span class="comment">// ["" "man " "plan " "canal panama"]</span></div><div class="line"></div><div class="line"><span class="comment">// SplitN 定义返回之后的切片中包含的长度，最后一部分是未被处理的。</span></div><div class="line">strings.SplitN(<span class="string">"a,b,c"</span>, <span class="string">","</span>, <span class="number">2</span>)) <span class="comment">// ["a", "b,c"]</span></div></pre></td></tr></table></figure>
<h3 id="Trim，TrimFunc，TrimLeft，TrimLeftFunc，TrimPrefix，TrimSuffix，TrimRight，TrimRightFunc"><a href="#Trim，TrimFunc，TrimLeft，TrimLeftFunc，TrimPrefix，TrimSuffix，TrimRight，TrimRightFunc" class="headerlink" title="Trim，TrimFunc，TrimLeft，TrimLeftFunc，TrimPrefix，TrimSuffix，TrimRight，TrimRightFunc"></a>Trim，TrimFunc，TrimLeft，TrimLeftFunc，TrimPrefix，TrimSuffix，TrimRight，TrimRightFunc</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Trim 包含在cutset中的元素都会被去掉</span></div><div class="line">strings.Trim(<span class="string">"¡¡¡Hello, Gophers!!!"</span>, <span class="string">"!¡"</span>) <span class="comment">// Hello, Gophers</span></div><div class="line"></div><div class="line"><span class="comment">// TrimLeft 去掉左边满足包含在cutset中的元素，直到遇到不在cutset中的元素为止</span></div><div class="line">strings.TrimLeft(<span class="string">"   Hello, Gophers"</span>, <span class="string">"! "</span>) <span class="comment">// Hello, Gophers</span></div><div class="line">strings.TrimRight(<span class="string">"Hello, Gophers  "</span>, <span class="string">"! "</span>) <span class="comment">// Hello, Gophers</span></div><div class="line"></div><div class="line"><span class="comment">// TrimPrefix 去掉开头部分；TrimSuffix 去掉结尾部分 </span></div><div class="line"><span class="keyword">var</span> s = <span class="string">"¡¡¡Hello, Gophers!!!"</span></div><div class="line">s = strings.TrimPrefix(s, <span class="string">"¡¡¡Hello, "</span>) <span class="comment">// Gophers!!!</span></div><div class="line">s = strings.TrimPrefix(s, <span class="string">"Gophers!!!"</span>) <span class="comment">// ¡¡¡Hello,</span></div></pre></td></tr></table></figure>
<h3 id="strings-Builder"><a href="#strings-Builder" class="headerlink" title="strings.Builder"></a>strings.Builder</h3><blockquote>
<p>strings.Builder 使用 Write 方法来高效的构建字符串。它最小化了内存拷贝，耗费零内存，不要拷贝非零的Builder。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b strings.Builder</div><div class="line"><span class="keyword">for</span> i := <span class="number">3</span>; i &gt;= <span class="number">1</span>; i-- &#123;</div><div class="line">  fmt.Fprintf(&amp;b, <span class="string">"%d..."</span>, i)</div><div class="line">&#125;</div><div class="line">b.WriteString(<span class="string">"ignition"</span>)</div><div class="line">fmt.Println(b.String())  <span class="comment">// 3...2...1...ignition</span></div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Cap</span><span class="params">()</span> <span class="title">int</span> // 容量，涉及批量内存分配机制</span></div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">Grow</span><span class="params">(n <span class="keyword">int</span>)</span> // 手动分配内存数量</div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span> // 当前<span class="title">builder</span>中含有的所有字符长度</div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">Reset</span><span class="params">()</span> // 清空<span class="title">builder</span></div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span> // 转化为字符串输出 </div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span> // 往<span class="title">builder</span>写入数据 </div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteByte</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">error</span> // 往<span class="title">builder</span>写入数据 </div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteRune</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span> // 往<span class="title">builder</span>写入数据  </div><div class="line"><span class="title">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span> // 往<span class="title">builder</span>写入数据</div></pre></td></tr></table></figure>
<h3 id="strings-Reader"><a href="#strings-Reader" class="headerlink" title="strings.Reader"></a>strings.Reader</h3><p><code>Reader</code> 通过读取字符串的方式，实现了接口 <code>io.Reader</code>, <code>io.ReaderAt</code>, <code>io.Seeker</code>, <code>io.WriterTo</code>, <code>io.ByteScanner</code> 和 <code>io.RuneScanner</code>。零值Reader操作起来就像操作空字符串的io.Reader一样。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</div><div class="line">	s        <span class="keyword">string</span>   <span class="comment">//对应的字符串</span></div><div class="line">	i        <span class="keyword">int64</span>   <span class="comment">// 当前读取到的位置</span></div><div class="line">	prevRune <span class="keyword">int</span>   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(s <span class="keyword">string</span>)</span> *<span class="title">Reader</span> // 初始化<span class="title">reader</span>实例</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span> // 未读字符长度 </div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span>  </div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">ReadAt</span><span class="params">(b []<span class="keyword">byte</span>, off <span class="keyword">int64</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">ReadByte</span><span class="params">()</span> <span class="params">(<span class="keyword">byte</span>, error)</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">ReadRune</span><span class="params">()</span> <span class="params">(ch <span class="keyword">rune</span>, size <span class="keyword">int</span>, err error)</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">Reset</span><span class="params">(s <span class="keyword">string</span>)</span> // 重置以从<span class="title">s</span>中读</div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">Seek</span><span class="params">(offset <span class="keyword">int64</span>, whence <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int64</span>, error)</span> // <span class="title">Seek</span> <span class="title">implements</span> <span class="title">the</span> <span class="title">io</span>.<span class="title">Seeker</span> <span class="title">interface</span>. </div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int64</span> // 字符串的原始长度</div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">UnreadByte</span><span class="params">()</span> <span class="title">error</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">UnreadRune</span><span class="params">()</span> <span class="title">error</span></div><div class="line"><span class="title">func</span> <span class="params">(r *Reader)</span> <span class="title">WriteTo</span><span class="params">(w io.Writer)</span> <span class="params">(n <span class="keyword">int64</span>, err error)</span> // <span class="title">WriteTo</span> <span class="title">implements</span> <span class="title">the</span> <span class="title">io</span>.<span class="title">WriterTo</span> <span class="title">interface</span>.</div></pre></td></tr></table></figure>
<h3 id="Len，Size，Read"><a href="#Len，Size，Read" class="headerlink" title="Len，Size，Read"></a>Len，Size，Read</h3><ul>
<li><code>Len</code>: 返回未读的字符串长度。</li>
<li><code>Size</code>: 返回字符串的长度。</li>
<li><code>Read</code>: 读取字符串信息，读取之后会改变Len的返回值</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">r := strings.NewReader(<span class="string">"abcdefghijklmn"</span>)</div><div class="line">fmt.Println(r.Len())   <span class="comment">// 输出14  初始时，未读长度等于字符串长度</span></div><div class="line"><span class="keyword">var</span> buf []<span class="keyword">byte</span></div><div class="line">buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</div><div class="line">readLen, err := r.Read(buf)</div><div class="line">fmt.Println(<span class="string">"读取到的长度:"</span>, readLen) <span class="comment">//读取到的长度5</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	fmt.Println(<span class="string">"错误:"</span>, err)</div><div class="line">&#125;</div><div class="line">fmt.Println(buf)            <span class="comment">//adcde</span></div><div class="line">fmt.Println(r.Len())        <span class="comment">//9   读取到了5个 剩余未读是14-5</span></div><div class="line">fmt.Println(r.Size())       <span class="comment">//14   字符串的长度</span></div></pre></td></tr></table></figure>
<h3 id="ReadAt"><a href="#ReadAt" class="headerlink" title="ReadAt"></a>ReadAt</h3><blockquote>
<p>读取偏移off字节后的剩余信息到b中，ReadAt函数不会影响Len的数值。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">r := strings.NewReader(<span class="string">"abcdefghijklmn"</span>)</div><div class="line"><span class="keyword">var</span> bufAt, buf []<span class="keyword">byte</span></div><div class="line">buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</div><div class="line">r.Read(buf)</div><div class="line">fmt.Println(<span class="string">"剩余未读的长度"</span>, r.Len())   <span class="comment">//剩余未读的长度 9</span></div><div class="line">fmt.Println(<span class="string">"已读取的内容"</span>, <span class="keyword">string</span>(buf)) <span class="comment">//已读取的内容 abcde</span></div><div class="line">bufAt = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">256</span>)</div><div class="line">r.ReadAt(bufAt, <span class="number">5</span>)</div><div class="line">fmt.Println(<span class="keyword">string</span>(bufAt))              <span class="comment">//fghijklmn</span></div><div class="line"></div><div class="line"><span class="comment">//测试下是否影响Len和Read方法</span></div><div class="line">fmt.Println(<span class="string">"剩余未读的长度"</span>, r.Len())    <span class="comment">//剩余未读的长度 9</span></div><div class="line">fmt.Println(<span class="string">"已读取的内容"</span>, <span class="keyword">string</span>(buf))  <span class="comment">//已读取的内容 abcde</span></div></pre></td></tr></table></figure>
<h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 反转字符串</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">    runes := []<span class="keyword">rune</span>(s)</div><div class="line">    <span class="keyword">for</span> from, to := <span class="number">0</span>, <span class="built_in">len</span>(runes)<span class="number">-1</span>; from &lt; to; from, to = from+<span class="number">1</span>, to<span class="number">-1</span> &#123;</div><div class="line">        runes[from], runes[to] = runes[to], runes[from]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(runes)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fields&quot;&gt;&lt;a href=&quot;#Fields&quot; class=&quot;headerlink&quot; title=&quot;Fields&quot;&gt;&lt;/a&gt;Fields&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;func Fields(s string) []string&lt;/li&gt;
&lt;li&gt;func Fie
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>defer 语句的三种机制</title>
    <link href="https://pengfeidai.github.io/2019/04/16/defer%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%9C%BA%E5%88%B6/"/>
    <id>https://pengfeidai.github.io/2019/04/16/defer语句的三种机制/</id>
    <published>2019-04-16T14:33:25.000Z</published>
    <updated>2020-06-29T15:18:32.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆上分配"><a href="#堆上分配" class="headerlink" title="堆上分配"></a>堆上分配</h2><p>Golang 1.13 之前的版本中，所有 defer 都是在堆上分配，该机制在编译时会进行两个步骤：</p>
<ol>
<li><p>在 defer 语句的位置插入 <code>runtime.deferproc</code>，当被执行时，延迟调用会被保存为一个 <code>_defer</code> 记录，并将被延迟调用的入口地址及其参数复制保存，存入 Goroutine 的调用链表中。</p>
</li>
<li><p>在函数返回之前的位置插入 <code>runtime.deferreturn</code>，当被执行时，会将延迟调用从 Goroutine 链表中取出并执行，多个延迟调用则以 <code>jmpdefer</code> 尾递归调用方式连续执行。 </p>
</li>
</ol>
<p><strong>这种机制的主要性能问题存在于每个 defer 语句产生记录时的内存分配，以及记录参数和完成调用时参数移动的系统调用开销。</strong></p>
<h2 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h2><p>Go 1.13 版本新加入 <code>deferprocStack</code> 实现了在栈上分配的形式来取代 deferproc，相比堆上分配，栈上分配在函数返回后 _defer 便得到释放，省去了内存分配时产生的性能开销，只需适当维护 _defer 的链表即可。</p>
<p><strong>不过在 defer 语句出现在了循环语句里，或者无法执行更高阶的编译器优化时，亦或者同一个函数中使用了过多的 defer 时，依然会使用 deferproc。</strong></p>
<h2 id="开放编码"><a href="#开放编码" class="headerlink" title="开放编码"></a>开放编码</h2><p>Go 1.14 版本继续加入了 <code>开发编码（open coded）</code>，该机制会将延迟调用直接插入函数返回之前，省去了运行时的 deferproc 或 deferprocStack 操作，在运行时的 deferreturn 也不会进行尾递归调用，而是直接 <code>在一个循环中遍历所有延迟函数执行</code>。</p>
<p>限制条件：</p>
<ul>
<li>没有禁用编译器优化，即没有设置 -gcflags “-N”；</li>
<li>函数内 defer 的数量不超过 8 个，且返回语句与延迟语句个数的乘积不超过 15；</li>
<li>defer 不是在循环语句中。</li>
</ul>
<p>该机制还引入了一种元素 —— <code>延迟比特（defer bit）</code>，用于运行时记录每个 defer 是否被执行（尤其是在条件判断分支中的 defer），从而便于判断最后的延迟调用该执行哪些函数。</p>
<p><strong>延迟比特的原理</strong>： 同一个函数内每出现一个 defer 都会为其分配 1 个比特，如果被执行到则设为 1，否则设为 0，当到达函数返回之前需要判断延迟调用时，则用掩码判断每个位置的比特，若为 1 则调用延迟函数，否则跳过。</p>
<p>为了轻量，官方将延迟比特限制为 1 个字节，即 8 个比特，这就是为什么不能超过 8 个 defer 的原因，若超过依然会选择堆栈分配，但显然大部分情况不会超过 8 个。</p>
<p>代码演示：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">deferBits = <span class="number">0</span>  <span class="comment">// 延迟比特初始值 00000000</span></div><div class="line"></div><div class="line">deferBits |= <span class="number">1</span>&lt;&lt;<span class="number">0</span>  <span class="comment">// 执行第一个 defer，设置为 00000001</span></div><div class="line">_f1 = f1  <span class="comment">// 延迟函数</span></div><div class="line">_a1 = a1  <span class="comment">// 延迟函数的参数</span></div><div class="line"><span class="keyword">if</span> cond &#123;</div><div class="line">    <span class="comment">// 如果第二个 defer 被执行，则设置为 00000011，否则依然为 00000001</span></div><div class="line">    deferBits |= <span class="number">1</span>&lt;&lt;<span class="number">1</span></div><div class="line">    _f2 = f2</div><div class="line">    _a2 = a2</div><div class="line">&#125;</div><div class="line">...</div><div class="line">exit:</div><div class="line"><span class="comment">// 函数返回之前，倒序检查延迟比特，通过掩码逐位进行与运算，来判断是否调用函数</span></div><div class="line"></div><div class="line"><span class="comment">// 假如 deferBits 为 00000011，则 00000011 &amp; 00000010 != 0，因此调用 f2</span></div><div class="line"><span class="comment">// 否则 00000001 &amp; 00000010 == 0，不调用 f2</span></div><div class="line"><span class="keyword">if</span> deferBits &amp; <span class="number">1</span>&lt;&lt;<span class="number">1</span> != <span class="number">0</span> &#123;</div><div class="line">    deferBits &amp;^= <span class="number">1</span>&lt;&lt;<span class="number">1</span>  <span class="comment">// 移位为下次判断准备</span></div><div class="line">    _f2(_a2)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 同理，由于 00000001 &amp; 00000001 != 0，调用 f1</span></div><div class="line"><span class="keyword">if</span> deferBits &amp;&amp; <span class="number">1</span>&lt;&lt;<span class="number">0</span> != <span class="number">0</span> &#123;</div><div class="line">    deferBits &amp;^= <span class="number">1</span>&lt;&lt;<span class="number">0</span></div><div class="line">    _f1(_a1)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;堆上分配&quot;&gt;&lt;a href=&quot;#堆上分配&quot; class=&quot;headerlink&quot; title=&quot;堆上分配&quot;&gt;&lt;/a&gt;堆上分配&lt;/h2&gt;&lt;p&gt;Golang 1.13 之前的版本中，所有 defer 都是在堆上分配，该机制在编译时会进行两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://pengfeidai.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>javascript数组方法总结</title>
    <link href="https://pengfeidai.github.io/2017/09/20/array/"/>
    <id>https://pengfeidai.github.io/2017/09/20/array/</id>
    <published>2017-09-20T14:02:52.000Z</published>
    <updated>2017-09-30T15:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><p>第一种，使用 Array 构造函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//创建一个空数组</span></div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// 创建一个包含10项的数组</span></div><div class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>,<span class="string">"c"</span>); <span class="comment">// 创建一个包含3个字符串的数组</span></div></pre></td></tr></table></figure></p>
<p>第二种，使用数组字面量表示法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">//创建一个空数组</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]; <span class="comment">// 创建一个包含3个字符串的数组</span></div></pre></td></tr></table></figure></p>
<p>在读取和设置数组的值时，要使用方括号并提供相应值的基于 0 的数字索引：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// a</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"d"</span>; <span class="comment">// 将下标为2的 c 修改为 d</span></div><div class="line">arr[<span class="number">3</span>] = <span class="string">"e"</span>; <span class="comment">// 增加第四项为e</span></div></pre></td></tr></table></figure></p>
<p>JavaScript中数组的length属性是可以修改的，看下面的示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">arr[arr.length] = <span class="string">"d"</span>; <span class="comment">// 在数组尾部添加一项"d"</span></div><div class="line">arr.length = arr.length<span class="number">-1</span>; <span class="comment">//将最后一项删除</span></div></pre></td></tr></table></figure></p>
<p>如何判断一个变量是不是数组对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="comment">// ES5之前</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</div><div class="line"><span class="comment">// ES5新增</span></div><div class="line">arr.isArray();</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> arr;  <span class="comment">// object</span></div></pre></td></tr></table></figure></p>
<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p><code>join()</code>：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">// a, b, c</span></div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>)); <span class="comment">// a-b-c</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [a, b, c]（原数组不变）</span></div></pre></td></tr></table></figure></p>
<p>应用：通过join()方法可以实现重复字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatString</span>(<span class="params">str, n</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>).join(str);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"a"</span>, <span class="number">3</span>)); <span class="comment">// aaa</span></div></pre></td></tr></table></figure></p>
<h3 id="push-和pop"><a href="#push-和pop" class="headerlink" title="push()和pop()"></a>push()和pop()</h3><p><code>push()</code>：可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<br><code>pop()</code>：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">var</span> count = arr.push(<span class="string">"d"</span>, <span class="string">"e"</span>);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d", "e"]</span></div><div class="line"><span class="keyword">var</span> item = arr.pop();</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">// e</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d"]</span></div></pre></td></tr></table></figure></p>
<h3 id="shift-和-unshift"><a href="#shift-和-unshift" class="headerlink" title="shift() 和 unshift()"></a>shift() 和 unshift()</h3><p><code>shift()</code>：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。<br><code>unshift()</code>：将参数添加到原数组开头，并返回数组的长度 。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</div><div class="line"><span class="keyword">var</span> count = arr.unshift(<span class="string">"a"</span>,<span class="string">"b"</span>);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", "c", "d", "e"]</span></div><div class="line"><span class="keyword">var</span> item = arr.shift();</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">// a</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["b", "c", "d", "e"]</span></div></pre></td></tr></table></figure></p>
<h3 id="sort-（原数组改变）"><a href="#sort-（原数组改变）" class="headerlink" title="sort()（原数组改变）"></a>sort()（原数组改变）</h3><p><code>sort()</code>：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。</p>
<p>在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">"a"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr1.sort()); <span class="comment">// ["a", "b", "c", "d"]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">// ["a", "b", "c", "d"]</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort()); <span class="comment">// [15, 22, 3, 46]</span></div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [15, 22, 3, 46]</span></div></pre></td></tr></table></figure></p>
<p>解决方法：sort()方法可以接收一个比较函数作为参数，比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort(compare)); <span class="comment">// [3, 15, 22, 46]</span></div></pre></td></tr></table></figure></p>
<p>如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">arr2 = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.sort(compare)); <span class="comment">// [46, 22, 15, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="reverse-（原数组改变）"><a href="#reverse-（原数组改变）" class="headerlink" title="reverse()（原数组改变）"></a>reverse()（原数组改变）</h3><p><code>reverse()</code>：反转数组项的顺序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">15</span>, <span class="number">22</span>, <span class="number">46</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [3, 46, 22, 15]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [3, 46, 22, 15]</span></div></pre></td></tr></table></figure></p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code>：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。</p>
<p>传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.concat(<span class="number">9</span>, [<span class="number">11</span>, <span class="number">13</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 3, 5, 7, 9, 11, 13]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 3, 5, 7]</span></div></pre></td></tr></table></figure></p>
<p>若传入的是一个二维数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr2 = arr.concat([<span class="number">9</span>, [<span class="number">11</span>, <span class="number">13</span>]]);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 3, 5, 7, 9, Array[2]]</span></div><div class="line"><span class="built_in">console</span>.log(arr2[<span class="number">5</span>]); <span class="comment">// [11, 13]</span></div></pre></td></tr></table></figure></p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code>：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.slice(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> arr2 = arr.slice(<span class="number">1</span>, <span class="number">4</span>);</div><div class="line"><span class="keyword">var</span> arr3 = arr.slice(<span class="number">1</span>, <span class="number">-2</span>);</div><div class="line"><span class="keyword">var</span> arr4 = arr.slice(<span class="number">-4</span>, <span class="number">-1</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 3, 5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [3, 5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [3, 5, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [3, 5, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [5, 7, 9]</span></div></pre></td></tr></table></figure></p>
<p>arr1只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。<br>arr2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。<br>arr3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。<br>arr4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2, 5)。</p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>splice()</code>：可以实现删除、插入和替换。</p>
<p><strong>删除</strong>：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。</p>
<p><strong>插入</strong>：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。</p>
<p><strong>替换</strong>：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。</p>
<p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.splice(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[5, 7, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[1, 3]</span></div><div class="line"><span class="keyword">var</span> arr2 = arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 7, 4, 6, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arrR2); <span class="comment">// []</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 2, 4, 4, 6, 9, 11]</span></div><div class="line"><span class="built_in">console</span>.log(arrR3); <span class="comment">// [7]</span></div></pre></td></tr></table></figure></p>
<h3 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf()和 lastIndexOf()"></a>indexOf()和 lastIndexOf()</h3><p><code>indexOf()</code>：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。<br><code>lastIndexOf()</code>：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。<br>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">5</span>));  <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">5</span>)); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">5</span>,<span class="number">2</span>)); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">5</span>, <span class="number">4</span>)); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">"5"</span>)); <span class="comment">// -1</span></div></pre></td></tr></table></figure></p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p><code>forEach()</code>：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：值，索引。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(index, item);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0, 1</span></div><div class="line"><span class="comment">// 1, 2</span></div><div class="line"><span class="comment">// 2, 3</span></div></pre></td></tr></table></figure></p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p><code>map()</code>：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。<br>下面代码利用map方法实现数组中每个数求平方。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> item*item;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 4, 9, 16]</span></div></pre></td></tr></table></figure></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code>：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x, index</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> index % <span class="number">3</span> === <span class="number">0</span> || x &gt;= <span class="number">8</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 4, 7, 8, 9, 10]</span></div></pre></td></tr></table></figure></p>
<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p><code>every()</code>：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p><code>some()</code>：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h3 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce()和 reduceRight()"></a>reduce()和 reduceRight()</h3><p>这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。<br><code>reduce()</code>方法从数组的第一项开始，逐个遍历到最后。<code>reduceRight()</code>则从数组的最后一项开始，向前遍历到第一项。<br>这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。<br>传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。<br>这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。<br>下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum = values.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">&#125;, <span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//25</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组创建&quot;&gt;&lt;a href=&quot;#数组创建&quot; class=&quot;headerlink&quot; title=&quot;数组创建&quot;&gt;&lt;/a&gt;数组创建&lt;/h2&gt;&lt;p&gt;第一种，使用 Array 构造函数：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://pengfeidai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="https://pengfeidai.github.io/2017/09/10/MongoDB/"/>
    <id>https://pengfeidai.github.io/2017/09/10/MongoDB/</id>
    <published>2017-09-10T13:58:21.000Z</published>
    <updated>2017-09-27T09:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL?"></a>什么是NoSQL?</h3><p>NoSQL，指的是非关系型的数据库。</p>
<p>没有行、列的概念。用 JSON 来存储数据。集合就相当于 SQL 数据库中的“表”，文档就相当于“行”。</p>
<p>适用于：</p>
<ol>
<li><p>数据模型比较简单；</p>
</li>
<li><p>需要灵活性更强的IT系统；</p>
</li>
<li><p>对数据库性能要求较高；</p>
</li>
<li><p>不需要高度的数据一致性；</p>
</li>
<li><p>对于给定key，比较容易映射复杂值的环境。</p>
</li>
</ol>
<h3 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB?"></a>什么是MongoDB?</h3><p>官网：<a href="https://www.mongodb.com" target="_blank" rel="external">https://www.mongodb.com</a></p>
<p>手册：<a href="https://docs.mongodb.org/manual" target="_blank" rel="external">https://docs.mongodb.org/manual</a></p>
<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<h2 id="MongoDB安装及运行"><a href="#MongoDB安装及运行" class="headerlink" title="MongoDB安装及运行"></a>MongoDB安装及运行</h2><p>下载最新的stable版：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a></p>
<p>安装好之后，我们看一下安装的文件夹，例如：<br>C:\Program Files\MongoDB\Server\3.0\bin，将其加入到系统的path环境变量中，那么我们就能在系统的任何盘符，使用mongo命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongo   使用数据库</div><div class="line">mongod  开机</div><div class="line">mongoimport  导入数据</div></pre></td></tr></table></figure>
<ol>
<li>启动mongod服务</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-15/3164111.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>–dbpath就是选择数据库文档所在的文件夹。</p>
<ol>
<li>管理数据库（新开一个cmd）</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-15/685892.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>那么，运行环境就是mongo语法了。</p>
<h2 id="MongoDB常用操作"><a href="#MongoDB常用操作" class="headerlink" title="MongoDB常用操作"></a>MongoDB常用操作</h2><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure>
<h3 id="使用数据库、创建数据库"><a href="#使用数据库、创建数据库" class="headerlink" title="使用数据库、创建数据库"></a>使用数据库、创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use test</div></pre></td></tr></table></figure>
<p>use一个不存在的，就是新建。</p>
<h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库"></a>查看当前所在数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>数据库中不能直接插入数据，只能往集合(collections)中插入数据。不需要创建集合，只需要写点语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.insert(&#123;&quot;name&quot;:&quot;Davis&quot;,&quot;age&quot;:&quot;22&quot;,&quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
<p>db.student  系统发现student是一个陌生的集合名字，所以就自动创建了集合。</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>删除当前数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase();</div></pre></td></tr></table></figure></p>
<h2 id="数据库使用"><a href="#数据库使用" class="headerlink" title="数据库使用"></a>数据库使用</h2><h3 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据，随着数据的插入，数据库创建成功了，集合也创建成功了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.insert(&#123;&quot;name&quot;:&quot;Davis&quot;,&quot;age&quot;:&quot;22&quot;,&quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
<p>我们不可能一条一条的insert。所以，我们希望用sublime在外部写好数据库的形式，然后导入数据库：</p>
<p>导入json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoimport --db test --collection student --drop --file data.json</div></pre></td></tr></table></figure></p>
<p>导入json数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoimport --db test --collection student --drop --file data.json --jsonArray</div></pre></td></tr></table></figure></p>
<p><code>-db test</code>  想往哪个数据库里面导入<br><code>--collection student</code>  想往哪个集合中导入<br><code>--drop</code> 把已存在数据清空<br><code>--file data.json</code>  哪个文件</p>
<p>这样，我们就能用sublime创建一个json文件，然后用mongoimport命令导入。</p>
<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><ol>
<li><p>查找数据，用find。find中没有参数，那么将列出这个集合的所有文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find()</div></pre></td></tr></table></figure>
</li>
<li><p>精确匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:22&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>多个条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:12, &quot;sex&quot;:&quot;男&quot;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>大于条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>或者（寻找所有年龄是20岁，或者22岁的学生）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:22&#125;]&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>查找完毕之后，打点调用sort，表示升（1）降（-1）排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find().sort(&#123;&quot;age&quot;:1, &quot;score.English&quot;:1&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前Mongodb运行状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.stats();</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>分页查询</strong></p>
<p>通过 <code>sike()</code> 与 <code>limit()</code> 方法</p>
<p>假如，第一页是page=0。每页10条，所以当前页的查询语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.find(&#123;&#125;).limit(10).skip(page*10)</div></pre></td></tr></table></figure></p>
<p><code>limit()</code>表示读取的条数，sike()表示略过的条数。</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ol>
<li>修改里面还有查询条件</li>
</ol>
<p>查找名字叫做Davis的，把年龄更改为20岁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;name&quot;:&quot;Davis&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:20&#125;&#125;)</div></pre></td></tr></table></figure></p>
<ol>
<li><p>更改所有匹配项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:20&#125;&#125;,&#123;multi: true&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>完整替换，不出现$set关键字了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.update(&#123;&quot;name&quot;:&quot;Davis&quot;&#125;,&#123;&quot;name&quot;:&quot;dpf&quot;,&quot;age&quot;:20&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ol>
<li><p>删除集合中高数成绩为 60 的学生</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.remove(&#123;&apos;score.English&apos;:60&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>删除第一条找到的记录可以设置 justOne 为 1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.student.remove(&#123;&apos;score.English&apos;:60&#125;,1);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><p>Mongoose，是一个将JavaScript对象与数据库产生关系的一个框架，object related model。所有的操作都不是对数据库进行的。而是对类、实例进行的，对象产生了，同时也持久化了。</p>
<p>官网：<a href="http://mongoosejs.com/" target="_blank" rel="external">http://mongoosejs.com/</a></p>
<h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="comment">//创建数据库连接</span></div><div class="line"><span class="keyword">var</span> db = mongoose.createConnection(<span class="string">'mongodb://127.0.0.1:27017/test'</span>);</div><div class="line"><span class="comment">//监听open事件</span></div><div class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"数据库成功连接"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-9-24/7201811.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>创造schema → 定义一些schema的静态方法 → 创造模型</p>
<p>创造schema<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new mongoose.schema(&#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>创造模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.model(“Student”,schema名字);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建了一个schema结构。</span></div><div class="line"><span class="keyword">var</span> studentSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">name</span>     :  &#123;<span class="attr">type</span> : <span class="built_in">String</span>&#125;,</div><div class="line">    <span class="attr">age</span>      :  &#123;<span class="attr">type</span> : <span class="built_in">Number</span>&#125;,</div><div class="line">    <span class="attr">sex</span>      :  &#123;<span class="attr">type</span> : <span class="built_in">String</span>&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//创建静态方法</span></div><div class="line">studentSchema.statics.zhaoren = <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.model(<span class="string">'Student'</span>).find(&#123;<span class="attr">name</span>: name&#125;, callback);   <span class="comment">//this.model('Student')指的是当前这个类</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//创建修改的静态方法</span></div><div class="line">studentSchema.statics.xiugai = <span class="function"><span class="keyword">function</span>(<span class="params">conditions,update,options,callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.model(<span class="string">"Student"</span>).update(conditions, update, options, callback);</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建了一个模型，就是学生模型，就是学生类。</span></div><div class="line"><span class="comment">//类是基于schema创建的。</span></div><div class="line"><span class="keyword">var</span> studentModel = db.model(<span class="string">'Student'</span>, studentSchema);</div></pre></td></tr></table></figure>
<h2 id="MongoVUE连接MongoDB"><a href="#MongoVUE连接MongoDB" class="headerlink" title="MongoVUE连接MongoDB"></a>MongoVUE连接MongoDB</h2><p><strong>不显示数据问题</strong></p>
<p>mongoDB3.2版本之后默认开启的存储引擎是 <code>wiredTiger</code>，使用这种存储引擎存储的数据只能在命令行中看到，在 mongoVUE 中看不到。</p>
<p>所以，需要换成 <code>mmapv1</code> 操作引擎，此时就可以在 mongoVUE 中看到 Collections 下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --storageEngine mmapv1 --dbpath D:\mongo(路径)</div></pre></td></tr></table></figure></p>
<p>选择 <code>mmapv1</code>存储引擎后，<code>ns</code> 后缀文件就是数据库</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;什么是NoSQL&quot;&gt;&lt;a href=&quot;#什么是NoSQL&quot; class=&quot;headerlink&quot; title=&quot;什么是NoSQL?
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pengfeidai.github.io/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="https://pengfeidai.github.io/tags/MongoDB/"/>
    
      <category term="mongoose" scheme="https://pengfeidai.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript最全设计模式详解</title>
    <link href="https://pengfeidai.github.io/2017/08/10/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://pengfeidai.github.io/2017/08/10/JavaScript设计模式/</id>
    <published>2017-08-10T07:29:04.000Z</published>
    <updated>2020-05-22T12:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>让系统代码可重用、可扩展、可解耦、更容易被人理解且保证代码可靠性。设计模式使代码真正工程化。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-20/53954459.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>设计原则：</p>
<ol>
<li><p>开闭原则： 对扩展开放，对修改关闭</p>
</li>
<li><p>里氏转换原则： 子类继承父类，单独完全可以运行</p>
</li>
<li><p>依赖倒转原则： 引用一个对象，如果这个对象有底层类型，直接引用底层类型</p>
</li>
<li><p>接口隔离原则： 每一个接口应该是一种角色</p>
</li>
<li><p>合成/聚合复用原则： 新的对象应使用一些已有的对象，使之成为新对象的一部分</p>
</li>
<li><p>迪米特原则： 一个对象应对其他对象有尽可能少的了解</p>
</li>
</ol>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>保证一个类只有一个实例，实现方法是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，确保一个类只有一个实例对象。</p>
<p>在 JavaScript 中，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instantiated;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*这里定义单例代码*/</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">publicProperty</span>: <span class="string">'test'</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getInstance</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!instantiated) &#123;     <span class="comment">//确保只有一个实例</span></div><div class="line">                instantiated = init();  <span class="comment">//使用init方法，是使publicMethod和publicProperty只在要使用的时候才初始化;</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instantiated;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">/*调用公有的方法来获取实例:*/</span></div><div class="line">Singleton.getInstance().publicMethod();  <span class="comment">// hello world</span></div></pre></td></tr></table></figure>
<h3 id="作用和注意事项"><a href="#作用和注意事项" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>模块间通信</p>
</li>
<li><p>系统中某个类的对象只能存在一个</p>
</li>
<li><p>保护自己的属性和方法</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>注意this的使用</p>
</li>
<li><p>闭包容易造成内存泄露，不需要的要赶快清除</p>
</li>
<li><p>注意new的成本。（继承）</p>
</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在网页上实现一个登陆弹框，无论我们点击多少次登陆按钮，界面上始终只会显示一个登陆弹框，无法再创建第二个。</p>
<p><a href="https://github.com/pengfeidai/JavaScript" target="_blank" rel="external">源码下载</a> &nbsp;&nbsp;&nbsp; <a href="http://https://pengfeidai.github.io/JavaScript/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="external">demo演示</a></p>
<p>（1）获取DOM对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">'string'</span> ? <span class="built_in">document</span>.getElementById(id) : id;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为了便于之后关于DOM的一些操作，我们这里利用函数式编程的原理将获取目标 id 的元素对象方法封装了一下，直接利用 $(id) 就可以获取。</p>
<p>（2）弹框构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Modal = <span class="function"><span class="keyword">function</span>(<span class="params">id, html</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.html = html;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.open = <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这里我们声明了一个 Modal 作为弹框的构造函数，并且再其内部定义了公有属性 html、id 和 open。html 用来定义弹框内部的内容，id 用来给弹框定义 id 名称，open 用于判断弹框是否打开。</p>
<p>（3）open方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Modal.prototype.create = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.open) &#123;</div><div class="line">        <span class="keyword">var</span> modal = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"></div><div class="line">        modal.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">        modal.id = <span class="keyword">this</span>.id;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(modal);</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            modal.classList.add(<span class="string">'show'</span>);</div><div class="line">        &#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.open = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在 Modal 的原型链上定义了 create 方法，方法内部我们创建并向 DOM 中插入弹框，同时给弹框加上一个 class 为 “show” 的动画效果。</p>
<p>（4）close方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Modal.prototype.delete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.open) &#123;</div><div class="line">        <span class="keyword">var</span> modal = $(<span class="keyword">this</span>.id);</div><div class="line"></div><div class="line">        modal.classList.add(<span class="string">'hide'</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.removeChild(modal);</div><div class="line">        &#125;, <span class="number">200</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.open = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>定义了 open 方法后我们这里定义关闭弹框的方法，在其内部给弹框对象添加 hide 类动画效果，最后在页面上移除弹框对象。</p>
<p>（5）创建实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> createIntance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance || (instance = <span class="keyword">new</span> Modal(<span class="string">'modal'</span>, <span class="string">'这是一个弹框'</span>))</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>这是实现单例模式的重要部分:</p>
<ol>
<li>使用闭包封装了 instance 私有变量并返回一个函数</li>
<li>利用 || 语法判断如果 instance 不存在则执行后者的实例化 Modal 方法，存在则直接返回 instance，确保了只存在一个弹框实例</li>
</ol>
<p>（6）按钮操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> operate = &#123;</div><div class="line">    <span class="attr">setModal</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">open</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setModal = createIntance();</div><div class="line">        <span class="keyword">this</span>.setModal.create();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setModal ? <span class="keyword">this</span>.setModal.delete() : <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这里我们将按钮操作放在 operate 对象里，使得打开和关闭操作可以通过this获取实例setModal。</p>
<p>（7）绑定事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'open'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    operate.open();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="string">'delete'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    operate.delete();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>最后我们将打开和删除方法绑定到两个按钮上去，至此我们用单例模式实现的弹框demo就实现了。</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p> 构造函数用于创建特定类型的对象——不仅声明了使用过的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。</p>
<h3 id="作用和注意事项-1"><a href="#作用和注意事项-1" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>用于创建特定类型的对象</p>
</li>
<li><p>第一次声明的时候给对象赋值</p>
</li>
<li><p>自己声明构造函数，赋予属性和方法</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>声明函数的时候处理业务逻辑</p>
</li>
<li><p>区分和单例的区别，配合单例实现初始化</p>
</li>
<li><p>构造函数大写字母开头</p>
</li>
<li><p>注意 new 的成本 （继承）</p>
</li>
</ol>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>强制使用new<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'is'</span> +  <span class="keyword">this</span>.age + <span class="string">'years old'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Davis"</span>, <span class="number">22</span>, <span class="string">"student"</span>);</div><div class="line"><span class="keyword">var</span> person2 = Person(<span class="string">"Faker"</span>, <span class="number">21</span>, <span class="string">"player"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.sayName());  <span class="comment">// Davis is 22 years old</span></div><div class="line"><span class="built_in">console</span>.log(person2.sayName());  <span class="comment">// Faker is 21 years old</span></div></pre></td></tr></table></figure></p>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p> 建造者模式可以将一个复杂的对象的构建与其表示相分离，使同样的构建过程可以创建不同的表示。如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。建造者模式实际就是一个指挥者，一个建造者，一个使用指挥者调用具体建造者工作得出结果的客户。主要用于“分步骤构建一个复杂的对象”。</p>
<h3 id="作用和注意事项-2"><a href="#作用和注意事项-2" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>分步创建一个复杂的对象</p>
</li>
<li><p>解耦封装过程和具体创建组件</p>
</li>
<li><p>无需关心组件如何组装</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li><p>一定要一个稳定的算法进行支持（“分步骤”是一个稳定的算法）</p>
</li>
<li><p>加工工艺是暴露的</p>
</li>
</ol>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>一个土豪需要建一个别墅，然后直接找包工头，包工头再找工人把别墅建好。这里土豪不用直接一个一个工人的去找。只需包工头知道土豪需求，然后去找工人，工人干活，土豪也不需要知道房子具体怎么建，最后能拿到房就可以了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.产出东西是房子</span></div><div class="line"><span class="comment">//2.包工头调用工人进行开工而且他要很清楚工人们具体的某一个大项</span></div><div class="line"><span class="comment">//3.工人是盖房子的 工人可以建厨房、卧室、建客厅</span></div><div class="line"><span class="comment">//4.包工头只是一个接口而已 他不干活 他只对外说我能建房子</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">House</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.kitchen = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.bedroom = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.livingroom = <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Contractor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.construct = <span class="function"><span class="keyword">function</span>(<span class="params">worker</span>) </span>&#123;</div><div class="line">        worker.construct_kitchen();</div><div class="line">        worker.construct_bedroom();</div><div class="line">        worker.construct_livingroom();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.construct_kitchen =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"厨房建好了"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.construct_bedroom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"卧室建好了"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.construct_livingroom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"客厅建好了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.submit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _house = <span class="keyword">new</span> House();</div><div class="line">        _house.kitchen = <span class="string">"finished"</span>;</div><div class="line">        _house.bedroom = <span class="string">"finished"</span>;</div><div class="line">        _house.livingroom = <span class="string">"finished"</span>;</div><div class="line">        <span class="keyword">return</span> _house;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker();</div><div class="line"><span class="keyword">var</span> contractor = <span class="keyword">new</span> Contractor();</div><div class="line">contractor.construct(worker);</div><div class="line"><span class="comment">// 主人要房子</span></div><div class="line"><span class="keyword">var</span> myhouse = worker.submit();</div><div class="line"><span class="built_in">console</span>.log(myhouse);</div></pre></td></tr></table></figure>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型（抽象工厂）。</p>
<h3 id="作用和注意事项-3"><a href="#作用和注意事项-3" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>对象构建十分复杂</p>
</li>
<li><p>需要依赖具体的环境创建不同的实例</p>
</li>
<li><p>处理大量具有相同属性的小对象</p>
</li>
</ol>
<p>注意事项：</p>
<p>1、不能滥用工厂，有时候仅仅是给代码增加复杂度</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>简单工厂模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> XMLHttpFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">XMLHttpFactory.createXMLHttp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = <span class="literal">null</span>;</div><div class="line">    <span class="comment">// XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XMLHttp;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> AjaxHander = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class="line">    <span class="comment">/*...具体操作... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象工厂模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> XMLHttpFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">XMLHttpFactory.prototype = &#123;</div><div class="line"><span class="comment">// 如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类</span></div><div class="line">    createFactory:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This is an abstract class"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> XHRHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    XMLHttpFactory.call(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line">XHRHandler.prototype = <span class="keyword">new</span> XMLHttpFactory();</div><div class="line">XHRHandler.prototype.constructor = XHRHandler;  <span class="comment">// 重新定义 createFactory 方法</span></div><div class="line"></div><div class="line">XHRHandler.prototype.createFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        XMLHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XMLHttp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> AjaxHander = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class="line">    <span class="comment">/*...具体操作... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象工厂只留一个接口，不做具体的事，让别的子类来继承我这个类，然后做它自己的事。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>代理模式（Proxy），为其他对象提供一种代理以控制对这个对象的访问。代理模式使得代理对象控制具体对象的引用。代理几乎可以是任何对象：文件，资源，内存中的对象，或者是一些难以复制的东西。</p>
<h3 id="作用和注意事项-4"><a href="#作用和注意事项-4" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>远程代理（一个对象将不同空间的对象进行局部代理）</p>
</li>
<li><p>虚拟代理（根据需要创建开销很大的对象，如图片预加载）</p>
</li>
<li><p>安全代理（控制真实对象的访问权限）</p>
</li>
<li><p>智能指引（调用对象代理处理另外一些事情，如垃圾回收机制）</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li>不能滥用代理，有时候仅仅是给代码增加复杂度</li>
</ol>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理模式需要三方</span></div><div class="line"><span class="comment">// 1.买家</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buyer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Davis"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2.中介</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">agent</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">agent.prototype.sell = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">new</span> seller(<span class="keyword">new</span> buyer()).sell(<span class="string">"50万"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.卖家  收钱</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">seller</span>(<span class="params">buyer</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.buyer_name = buyer.name;</div><div class="line">    <span class="keyword">this</span>.sell = <span class="function"><span class="keyword">function</span>(<span class="params">money</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"收到了来自"</span> +  <span class="keyword">this</span>.buyer_name + money + <span class="string">"人民币"</span>);  <span class="comment">// 收到了来自Davis50万人民币</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">(<span class="keyword">new</span> agent).sell();</div></pre></td></tr></table></figure>
<p>虚拟代理实现图片预加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图片加载函数</span></div><div class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;   <span class="comment">//  提供一个对外的setSrc接口，外界调用这个接口，可以给该img标签设置src属性</span></div><div class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">      imgNode.src = src;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 引入代理对象</span></div><div class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image;</div><div class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 图片加载完成，正式加载图片</span></div><div class="line">    myImage.setSrc(<span class="keyword">this</span>.src);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">setSrc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">      <span class="comment">// 图片未被载入时，加载一张提示图片</span></div><div class="line">      myImage.setSrc(<span class="string">"file://c:/loading.png"</span>);</div><div class="line">      img.src = src;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 调用代理对象加载图片</span></div><div class="line">proxyImage.setSrc(<span class="string">"http://images/water.jpg"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>将请求封装成对象，分离命令接受者和发起者之间的耦合。命令执行之前在执行对象中传入接受者，主要目的相互之间的解耦。简单而言分为三个对象：</p>
<ol>
<li><p>发起者：发出调用命令即可，具体如何执行，谁执行并不需要清楚。</p>
</li>
<li><p>接受者：有对应的接口处理不同的命令，至于命令是什么，谁发出的，不用关心。</p>
</li>
<li><p>命令对象：上面讲发起者和接受者分开了，二者之间需要个连接桥梁。这就是命令对象。命令对象接受发送者的调用，然后调用接受者的相应接口。</p>
</li>
</ol>
<h3 id="作用和注意事项-5"><a href="#作用和注意事项-5" class="headerlink" title="作用和注意事项"></a>作用和注意事项</h3><p>模式作用：</p>
<ol>
<li><p>将函数的封装、请求、调用结合为一体</p>
</li>
<li><p>调用具体的函数解耦命令对象与接收对象</p>
</li>
<li><p>提高程序模块化的灵活性</p>
</li>
</ol>
<p>注意事项：</p>
<ol>
<li>不需要借口一致，直接调用函数即可，以免造成浪费</li>
</ol>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>场景如下：有个按钮button，点击之后，调用menu对象的refresh方法，输出“刷新”的内容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发送者</span></div><div class="line"><span class="keyword">var</span> setCommond = <span class="function"><span class="keyword">function</span>(<span class="params">button, fn</span>) </span>&#123;</div><div class="line">    button.onClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn()</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 执行命令者</span></div><div class="line"><span class="keyword">var</span> menu = &#123;</div><div class="line">    <span class="attr">reFresh</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"刷新"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"增加"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"删除"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 命令对象</span></div><div class="line"><span class="keyword">var</span> commondObj = <span class="function"><span class="keyword">function</span>(<span class="params">reciver</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        reciver.reFresh();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> commondObj1 = commondObj(menu);</div><div class="line">setCommond(btn1, commondObj1);</div></pre></td></tr></table></figure>
<p>发送者(setCommond)：不关心给哪个button，以及绑定什么事件，只要通过参数传入就好。</p>
<p>命令对象(commondObj):只需要接收到接受者的参数，当发送者发出命令时，执行就好。</p>
<p>接受者(menu):不用关心在哪里被调用被谁调用，只需要按需执行就好了。</p>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h3><p>定义一系列方法，封装起来使他们可以相互替换。也就是将策略封装在策略类中，当发起请求时管理类将请求委托给对应策略类。</p>
<ol>
<li><p>发起者：发出调用命令即可，具体如何执行，谁执行并不需要清楚。</p>
</li>
<li><p>接受者：有对应的接口处理不同的命令，至于命令是什么，谁发出的，不用关心。</p>
</li>
<li><p>命令对象：上面讲发起者和接受者分开了，二者之间需要个连接桥梁。这就是命令对象。命令对象接受发送者的调用，然后调用接受者的相应接口。</p>
</li>
</ol>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>模式作用：</p>
<ol>
<li><p>策略模式利用组合，委托等技术和思想，有效的避免很多if条件语句。</p>
</li>
<li><p>策略模式提供了开放-封闭原则，使代码更容易理解和扩展。</p>
</li>
<li><p>策略模式中的代码可以复用。</p>
</li>
</ol>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>假设我们现在有这样一个需求：需要根据form表单元素的不同类型，当点击的时候输出对应的表单元素类型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * 针对不同情况的策略算法封装在策略类fucs中，</div><div class="line">  * 从调用事件中去除繁琐的if或者switch逻辑判断。达到解耦的目的</div><div class="line">  * 加入后面再增加‘select’的选项增加对应的方法即可</div><div class="line">  */</div><div class="line"> <span class="keyword">var</span> funcs = &#123;</div><div class="line">   <span class="attr">text</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is text'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">radio</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is radio'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">checkbox</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is checkbox'</span>)</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'this is default'</span>)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> renderDom = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 只需要根据不同的入参，自行匹配策略类中的接口即可。</div><div class="line">      */</div><div class="line">     <span class="keyword">return</span> (funcs[type] || funcs[<span class="string">'default'</span>])()</div><div class="line"> &#125;</div><div class="line">renderDom(<span class="string">'checkbox'</span>)</div></pre></td></tr></table></figure>
<ol>
<li><p>策略对象就是funcs对象，里面的不同属性接口对应的方法就是策略。与逻辑判断分离开，如果有不同的情况的出现，对应的增加属性接口即可。</p>
</li>
<li><p>renderDom方法就是对应的管理类，只需要根据不同的type，去调用funcs不同的方法就ok了。如果type没有对应的接口，那就调用默认的default对应接口。</p>
</li>
<li><p>调用事件，就保持不变。将tyoe类型传过去就好了。</p>
</li>
</ol>
<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><h3 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h3><p>职责链由多个不同的对象组成，发送者是发送请求的对象，而接收者则是链中那些接收请求并且对其进行处理或传递的对象。请求本身有时候也可以是一个对象，它封装了和操作有关的所有数据，基本实现流程如下：</p>
<ol>
<li><p>发送者知道链中的第一个接收者，它向这个接收者发送该请求。</p>
</li>
<li><p>每一个接收者都对请求进行分析，然后要么处理它，要么它往下传递。</p>
</li>
<li><p>每一个接收者知道其他的对象只有一个，即它在链中的下家(successor)。</p>
</li>
<li><p>如果没有任何接收者处理请求，那么请求会从链中离开。</p>
</li>
</ol>
<h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>现有A、B、C、D四个生产线，生产总量为2100，每个生产线的生产量未知且在0~2100(包括0和2100，保证总量为2100即可)，生产完毕后，分6次进行运输，规定每台车辆只能运350，且装满后才能够出发，装车顺序为ABCD,即上一个生产线生产的东西装完后才能够装下一个生产线的东西，要求根据每条生产线的生产量，给出每台车辆的托运安排。</p>
<p>例如： A：100 ， B：1400 ，C：500 ， D：100<br>托运安排：<br>第一辆车： A：100 ， B：250<br>第二辆车： A：0 ， B：350<br>第三辆车： A：0 ， B：350<br>第四辆车： A：0 ， B：350<br>第五辆车： A：0 ， B：100 ，C：250<br>第六辆车： A：0 ， B：0 ， C：250 ，D：100</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(volume,wearHouse)&#123;</div><div class="line">            <span class="keyword">this</span>.volume=volume;</div><div class="line">            <span class="keyword">this</span>.wearHouse=wearHouse;</div><div class="line">            <span class="keyword">this</span>.outString=[];</div><div class="line">        &#125;</div><div class="line">        next(take)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.wearHouse!=<span class="literal">undefined</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">this</span>.wearHouse.takeOut(take).forEach(<span class="function">(<span class="params">subT</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.outString.push(subT)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        takeOut(num)&#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;<span class="keyword">this</span>.volume)&#123;</div><div class="line">                num-=<span class="keyword">this</span>.volume;</div><div class="line">                <span class="keyword">var</span> temp=<span class="keyword">this</span>.volume;</div><div class="line">                <span class="keyword">this</span>.volume=<span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.outString.push(<span class="keyword">this</span>.print(<span class="number">0</span>,temp));</div><div class="line">                <span class="keyword">this</span>.next(num);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">this</span>.volume-=num;</div><div class="line">                <span class="keyword">this</span>.outString.push(<span class="keyword">this</span>.print(<span class="keyword">this</span>.volume,num));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> temOut=<span class="keyword">this</span>.outString;</div><div class="line">            <span class="keyword">this</span>.outString=[];</div><div class="line">            <span class="keyword">return</span> temOut;</div><div class="line">        &#125;</div><div class="line">        print(volumn,takeNum)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseA</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'A'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseB</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'B'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseC</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'C'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WearHouseD</span> <span class="keyword">extends</span> <span class="title">WearHouse</span></span>&#123;</div><div class="line">        print(volumn,takeNum)&#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">'D'</span>,takeNum];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> D=<span class="keyword">new</span> WearHouseD(<span class="number">100</span>,<span class="literal">undefined</span>);</div><div class="line">    <span class="keyword">var</span> C=<span class="keyword">new</span> WearHouseC(<span class="number">500</span>,D);</div><div class="line">    <span class="keyword">var</span> B=<span class="keyword">new</span> WearHouseB(<span class="number">1400</span>,C);</div><div class="line">    <span class="keyword">var</span> A=<span class="keyword">new</span> WearHouseA(<span class="number">100</span>,B);</div><div class="line">    <span class="keyword">var</span> strSet=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)&#123;</div><div class="line">        strSet.push(...A.takeOut(<span class="number">350</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(strSet);</div></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>使用设计模式的是为了提高我们解决问题的效率，不同的设计模式也是针对不同环境的特定方案，不仅仅是单独的某一种设计模式，大多数情况下都是多个模式共存的。切勿为了使用设计模式而强行引入，增加代码复杂度。</p>
<p>学习资源：链接：<a href="http://pan.baidu.com/s/1i5BYiGH" target="_blank" rel="external">http://pan.baidu.com/s/1i5BYiGH</a> 密码：3s4v</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;让系统代码可重用、可扩展、可解耦、更容易被人理解且保证代码可靠性。设计模式使代码真正工程化。&lt;/p&gt;
&lt;figure class=&quot;imag
    
    </summary>
    
    
      <category term="Javascript" scheme="https://pengfeidai.github.io/tags/Javascript/"/>
    
      <category term="设计模式" scheme="https://pengfeidai.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>cubic-bezier(贝塞尔曲线)</title>
    <link href="https://pengfeidai.github.io/2017/08/05/cubic-bezier/"/>
    <id>https://pengfeidai.github.io/2017/08/05/cubic-bezier/</id>
    <published>2017-08-05T08:58:46.000Z</published>
    <updated>2020-05-22T12:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>cubic-bezier</code> 又称三次贝塞尔，主要是为 animation 生成速度曲线的函数, CSS3 动画速度的控制通过三次贝塞尔曲线函数实现，定义规则为： <code>cubic-bezier (x1, y1, x2, y2)</code>。</p>
<p><strong>cubic-bezier：</strong><a href="http://cubic-bezier.com/" target="_blank" rel="external">http://cubic-bezier.com/</a></p>
<p>css3中常用的几个动画效果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)   // 开始和结束慢，中间快</div><div class="line">linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)   // 匀速</div><div class="line">ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)   // 开始慢</div><div class="line">ease-out: cubic-bezier(0, 0, 0.58, 1.0)   // 结速慢</div><div class="line">ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)  // 与ease类似，但比ease幅度大</div></pre></td></tr></table></figure>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>贝塞尔曲线通过控制曲线上的四个点（起始点、终止点以及两个相互分离的中间点）来创造、编辑图形，绘制出一条光滑曲线并以曲线的状态来反映动画过程中速度的变化。</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-18/96108401.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<p>从上图我们知道的是 <code>cubic-bezier</code> 的取值范围:</p>
<ul>
<li>A：默认值 (0, 0)</li>
<li>B：动态取值 (x1, y1)</li>
<li>C：动态取值 (x2, y2)</li>
<li>D：默认值 (1, 1)</li>
</ul>
<p>其中 X 轴的取值范围是 [0, 1]，当取值超出范围时 cubic-bezier 将失效；Y 轴的取值没有规定，当然也毋须超过 [0, 1] 过大。</p>
<p>我们需要关注的是 B 和 C 两点的取值，这两点就是所要动态操控的两个点了,对应cubic-bezier (x1,y1,x2,y2)中的四个参数。</p>
<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>下面用一个简单的实例来看看效果：<a href="http://https://pengfeidai.github.io/CSS3-demo/cubic-bezier" target="_blank" rel="external">demo演示</a></p>
<p>html 部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.normal</span> &#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>:  all <span class="number">2s</span>;</div><div class="line">     <span class="attribute">-moz-transition</span>:  all <span class="number">2s</span>;</div><div class="line">       <span class="attribute">-o-transition</span>:  all <span class="number">2s</span>;</div><div class="line">          <span class="attribute">transition</span>:  all <span class="number">2s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.normal</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">     <span class="attribute">-moz-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">       <span class="attribute">-o-transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">          <span class="attribute">transform</span>:  <span class="built_in">translateX</span>(150px);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.custom</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">-webkit-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">     <span class="attribute">-moz-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">       <span class="attribute">-o-transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">          <span class="attribute">transition</span>:  all <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(.94,-0.25,.32,1.31);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.custom</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">     <span class="attribute">-moz-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">       <span class="attribute">-o-transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">          <span class="attribute">transform</span>:  <span class="built_in">translateX</span>(300px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>红色小球采用默认的速度曲线是 ease，蓝色小球采用自定义cubic-bezier(.94,-0.25,.32,1.31),呈现蓄力加速效果。</p>
<h2 id="transition（过渡）"><a href="#transition（过渡）" class="headerlink" title="transition（过渡）"></a>transition（过渡）</h2><p>transition属性</p>
<ul>
<li><p><code>transition-property</code>: 过渡属性(默认值为all)</p>
</li>
<li><p><code>transition-duration</code>: 过渡持续时间(默认值为0s)</p>
</li>
<li><p><code>transiton-timing-function</code>: 过渡函数(默认值为ease函数)</p>
</li>
<li><p><code>transition-delay</code>: 过渡延迟时间(默认值为0s)</p>
</li>
</ul>
<p>语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">property</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span>;</div></pre></td></tr></table></figure></p>
<h2 id="animation（动画）"><a href="#animation（动画）" class="headerlink" title="animation（动画）"></a>animation（动画）</h2><p>animation属性结合@ keyframes使用，animation中的animation-name需要设置成@ keyframes的name一致。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid black;</div><div class="line">    <span class="attribute">animation</span>: changebox <span class="number">10s</span> ease-in-out <span class="number">3</span> alternate paused;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> changebox &#123;</div><div class="line">    10% &#123;</div><div class="line">        <span class="attribute">background</span>: red;</div><div class="line">    &#125;</div><div class="line">    50% &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">    &#125;</div><div class="line">    70% &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">15px</span> solid yellow;</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">180px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>animation属性</p>
<ul>
<li><p><code>animation-name</code>: 指定要绑定到选择器的关键帧的名称</p>
</li>
<li><p><code>animation-duration</code>: 动画指定需要多少秒或毫秒完成</p>
</li>
<li><p><code>animation-timing-function</code>: 设置动画将如何完成一个周期</p>
</li>
<li><p><code>animation-delay</code>: 设置动画在启动前的延迟间隔</p>
</li>
<li><p><code>animation-iteration-count</code>: 定义动画的播放次数</p>
</li>
<li><p><code>animation-direction</code>: 指定是否应该轮流反向播放动画</p>
</li>
<li><p><code>animation-fill-mode</code>:规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式</p>
</li>
<li><p><code>animation-play-state</code>: 指定动画是否正在运行或已暂停。<br>语法</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span> <span class="selector-tag">fill-mode</span> <span class="selector-tag">play-state</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="transform（变形）"><a href="#transform（变形）" class="headerlink" title="transform（变形）"></a>transform（变形）</h2><p>transform 分为2D 和 3D，其主要包含以下几种变换：translate位移，scale缩放，rotate旋转，skew扭曲等。</p>
<p><strong>2D变形：</strong></p>
<p><code>translate位移</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: translate(50px, 100px);</div><div class="line">transform: translateX(50px);  // x方向移动50px</div><div class="line">transform: translateY(100px);</div></pre></td></tr></table></figure></p>
<p><code>scale缩放</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: scale(2, .5);</div><div class="line">transform: scaleX(2);   // x方向增加一倍</div><div class="line">transform: scaleY(.5);  // y方向缩小一倍</div></pre></td></tr></table></figure></p>
<p><code>rotate旋转</code>：rotate（正数表示顺时针旋转，负数表示逆时针旋转）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(30<span class="selector-tag">deg</span>);</div></pre></td></tr></table></figure></p>
<p><code>skew扭曲</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>, 30<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(30<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(30<span class="selector-tag">deg</span>);</div></pre></td></tr></table></figure></p>
<p><strong>3D变形：</strong></p>
<p><code>translate位移</code>： translate(x, y, z);</p>
<p><code>scale缩放</code>： scale(x, y, z);</p>
<p><code>rotate旋转</code>：rotate3d(x, y, z, angle)  (angle:表示3D舞台上旋转的角度)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cubic-bezier&lt;/code&gt; 又称三次贝塞尔，主要是为 animation 生成速度曲线的函数, CSS3 动画速度的
    
    </summary>
    
    
      <category term="CSS3" scheme="https://pengfeidai.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Javascript面向对象</title>
    <link href="https://pengfeidai.github.io/2017/07/28/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://pengfeidai.github.io/2017/07/28/JS面向对象编程/</id>
    <published>2017-07-28T06:52:56.000Z</published>
    <updated>2017-08-21T02:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript 是一门基于对象的编程语言，在 JavaScript 中一切都是对象，包括函数，也是被当成第一等的对象对待，这正是 JavaScript 极其富有表现力的原因。</p>
<p><center><img src="http://ot4esom84.bkt.clouddn.com/17-7-28/87918823.jpg" style="width: 350;height: 250px;"></center><br></p>
<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>ECMA-262 关于对象的定义是：“无序属性的集合，其属性可以包含基本值、对象或者函数。” 严格说，对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>
<ol>
<li><p>早期，创建对象就是创建一个 Object的实例，并为它添加属性( name、age )和方法( sayName() )，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Davis"</span>;</div><div class="line">person.age = <span class="number">22</span>;</div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>现在，对象字面量成为创建对象的首选模式，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    name = <span class="string">"Davis"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line"></div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这两个例子中 person 对象事一样的，有相同的属性和方法。这些属性在创建时都有一些特征值(characteristic),JavaScript 通过这些特征值来定义他们的行为。</p>
<h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><p>ECMAScript 中有两种属性：数据属性和访问器属性。</p>
<ul>
<li>数据属性<br>数据属性包含一个数据值的位置，在这个位置可以读取和写入值，具有如下4个特性：</li>
</ul>
<p><code>[[Configurable]]:</code>  表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属<br>性修改为访问器属性。直接在对象上定义的属性，默认为 true。<br><code>[[Enumerable]]:</code> 表示能否通过for-in循环返回属性。直接在对象上定义的属性，默认为true。<br><code>[[Writable]]:</code> 表示能否修改属性的值。直接在对象上定义的属性，默认为true。<br><code>[[Value]]:</code> 包含这个属性的数据值；读取属性值的时候，从这个位置读取；写入属性值的时候，把值保存在这里。这个特性默认为undefined</p>
<p>要修改数据属性默认的特性，必须使用ECMAScript5中的Object.defineProperty()方法；接受三个参数：属性所在的对象、属性的名字、描述符对象；其中，数据属性描述符对象的属性必须是：configurable、enumerable、writable和value。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;&#125;;</div><div class="line">Object.defineProperty(person, &quot;name&quot;, &#123;</div><div class="line">   writable: false,</div><div class="line">   value: &quot;Davis&quot;</div><div class="line">&#125;);</div><div class="line">alert(person.name);    //&quot;Davis&quot;</div><div class="line">person.name = &quot;XX&quot;;</div><div class="line">alert(person.name);    //&quot;Davis&quot;</div></pre></td></tr></table></figure></p>
<ul>
<li>访问器属性<br>访问器属性包含一对 getter 和 setter 函数。在读取访问器属性时，会调用 getter 函数，负责返回有效的值；在写入时，会调用 setter 函数并传入新值,负责决定如何处理数据。具有如下4个特性：</li>
</ul>
<p><code>[[Configurable]]:</code>  表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属<br>性修改为访问器属性。直接在对象上定义的属性，默认为 true。<br><code>[[Enumerable]]:</code> 表示能否通过for-in循环返回属性。直接在对象上定义的属性，默认为true。<br><code>[[Get]]:</code> 在读取属性时调用的函数；默认值为undefined。在读取访问器属性时，会调用gette方法，这个函数负责返回有效的值。<br><code>[[Set]]:</code> 在写入属性时调用的函数；默认值为undefined。在写入访问器属性时，会调用setter方法并传入新值，这个函数负责决定如何处理数据。</p>
<p>访问器属性不能直接定义，必须使用Object.defineProperty()方法来定义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="attr">_year</span>: <span class="number">2016</span>,</div><div class="line">    <span class="attr">edition</span>: <span class="number">5</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">            <span class="keyword">this</span>._year = newVal;</div><div class="line">            <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">book.year = <span class="number">2017</span>;</div><div class="line">alert(book.edition);  <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<h3 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h3><p>Object.defineProperties()方法，通过描述符一次性定义多个属性；</p>
<p>接收两个对象参数：第一个对象是要添加或修改其属性的对象；第二个对象的属性与第一个对象中要添加或修改的属性一一对应。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">    <span class="attr">_year</span>: &#123;</div><div class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">value</span>: <span class="number">2016</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">edition</span>: &#123;</div><div class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">value</span>: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">year</span>: &#123;</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">                <span class="keyword">this</span>._year = newVal;</div><div class="line">                <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>以上代码在 book 对象上定义了两个数据属性( _year 和 edition )和一个访问器属性<br>( year )。</p>
<h3 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h3><p>Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符；</p>
<p>接收两个参数：属性所在的对象，要读取其描述符的属性名称。</p>
<p>返回值是一个对象；如果是数据属性，这个对象的属性有configurable、enumerable、writable、value；如果是访问器属性，这个对象的属性有configurable、enumerable、get、set。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">    <span class="attr">_year</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">2016</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">edition</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">year</span>: &#123;</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (newVal &gt; <span class="number">2016</span>) &#123;</div><div class="line">                <span class="keyword">this</span>._year = newVal;</div><div class="line">                <span class="keyword">this</span>.edition += newVal - <span class="number">2016</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line">alert(d.value);   <span class="comment">// 2016</span></div><div class="line">alert(d.configurable);   <span class="comment">// false</span></div><div class="line">alert(type d.get);   <span class="comment">// "undefined"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</div><div class="line">alert(d.value);   <span class="comment">// undefined</span></div><div class="line">alert(d.enumerable);   <span class="comment">// false</span></div><div class="line">alert(type d.get);   <span class="comment">// "function"</span></div></pre></td></tr></table></figure></p>
<p>对于数据属性_year, value 等于最初的值，configurable 是false，而 get 等于 undefined。 对于访问属性 year，value 等于 undefined，enumerable 是 false，而 get 是指向 getter函数的指针。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript 是一门基于对象的编程语言，在 JavaScript 中一切都是对象，包括函数，也是被当成第一等的对象对待，这正是 Ja
    
    </summary>
    
    
      <category term="Javascript" scheme="https://pengfeidai.github.io/tags/Javascript/"/>
    
      <category term="oop" scheme="https://pengfeidai.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现轮播图组件</title>
    <link href="https://pengfeidai.github.io/2017/07/22/Vue-Carousel/"/>
    <id>https://pengfeidai.github.io/2017/07/22/Vue-Carousel/</id>
    <published>2017-07-22T13:37:50.000Z</published>
    <updated>2020-05-22T12:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在学习 Vue，看到大多数项目首页都有轮播效果，然后自己也是做了一个轮播图，希望分享给大家。</p>
<h2 id="主要技术"><a href="#主要技术" class="headerlink" title="主要技术"></a>主要技术</h2><ol>
<li>v-if: 条件渲染</li>
<li>v-for：列表渲染</li>
<li>v-bind：属性绑定</li>
<li>transition: 过渡效果</li>
<li>组件交互: 父组件通过 props 将数据传递给子组件</li>
</ol>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>轮播图中，它显示的那张图片在浏览器中可以看到有dom元素。隐藏的是没有dom元素的。所以如果显示一张图片，实际上，轮播列表中只有一个元素是存在的，其他的都被删掉了。按照这个思路，就很简单了。想要轮播，设置：enter：右边→enter-to：正常位置，并且过渡完成→leave：正常位置→leave-to：左边，并且过渡完成。</p>
<h2 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h2><p>👉<a href="http://https://pengfeidai.github.io/Carousel/" target="_blank" rel="external">http://https://pengfeidai.github.io/Carousel/</a></p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>项目源码：👉<a href="https://github.com/pengfeidai/Carousel" target="_blank" rel="external">https://github.com/pengfeidai/Carousel</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近在学习 Vue，看到大多数项目首页都有轮播效果，然后自己也是做了一个轮播图，希望分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;主要技术&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="Vue" scheme="https://pengfeidai.github.io/tags/Vue/"/>
    
      <category term="Carousel" scheme="https://pengfeidai.github.io/tags/Carousel/"/>
    
  </entry>
  
  <entry>
    <title>ES6编码风格</title>
    <link href="https://pengfeidai.github.io/2017/07/20/ES6%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>https://pengfeidai.github.io/2017/07/20/ES6编码风格/</id>
    <published>2017-07-20T14:18:06.000Z</published>
    <updated>2017-09-26T02:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><h3 id="let-取代-var"><a href="#let-取代-var" class="headerlink" title="let 取代 var"></a>let 取代 var</h3><p>ES6 提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if (true) &#123;</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果用<code>var</code>替代<code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code>命令做不到这一点。</p>
<p><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if(true) &#123;</div><div class="line">  console.log(x); // ReferenceError</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。<br>所以，建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代。</p>
<h3 id="全局常量和线程安全"><a href="#全局常量和线程安全" class="headerlink" title="全局常量和线程安全"></a>全局常量和线程安全</h3><p>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p><code>const</code>优于<code>let</code>有几个原因。一个是<code>const</code>可以提醒阅读程序的人，这个变量不应该改变；另一个是<code>const</code>比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对<code>const</code>进行优化，所以多使用<code>const</code>，有利于提供程序的运行效率，也就是说<code>let</code>和<code>const</code>的本质区别，其实是编译器内部的处理不同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var a = 1, b = 2, c = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = 1;</div><div class="line">const b = 2;</div><div class="line">const c = 3;</div><div class="line"></div><div class="line">// best</div><div class="line">const [a, b, c] = [1, 2, 3];</div></pre></td></tr></table></figure></p>
<p><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时<code>let</code>表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const c = `foobar`;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// bad</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure></p>
<p>函数的参数如果是对象的成员，优先使用解构赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(obj) &#123;</div><div class="line">  const &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// best</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// if reshape unavoidable</div><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure></p>
<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">  [getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>
<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// bad</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>使用扩展运算符（…）拷贝数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure>
<p>使用Array.from方法，将类似数组的对象转为数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>立即执行函数可以写成箭头函数的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">[1, 2, 3].map((x) =&gt; &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// best</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure></p>
<p>箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const self = this;</div><div class="line">const boundMethod = function(...params) &#123;</div><div class="line">  return method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const boundMethod = method.bind(this);</div><div class="line"></div><div class="line">// best</div><div class="line">const boundMethod = (...params) =&gt; method.apply(this, params);</div></pre></td></tr></table></figure></p>
<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>
<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function divide(a, b, option = false ) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用默认值语法设置函数参数的默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h2><p>注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line"></div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const inherits = require(&apos;inherits&apos;);</div><div class="line">function PeekableQueue(contents) &#123;</div><div class="line">  Queue.apply(this, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = function() &#123;</div><div class="line">  return this._queue[0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class PeekableQueue extends Queue &#123;</div><div class="line">  peek() &#123;</div><div class="line">    return this._queue[0];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure></p>
<p>使用export取代module.exports。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// commonJS的写法</div><div class="line">var React = require(&apos;react&apos;);</div><div class="line"></div><div class="line">var Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = Breadcrumbs;</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">class Breadcrumbs extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Breadcrumbs;</div></pre></td></tr></table></figure></p>
<p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。</p>
<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">import * as myObject &apos;./importModule&apos;;</div><div class="line"></div><div class="line">// good</div><div class="line">import myObject from &apos;./importModule&apos;;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个函数，函数名的首字母应该小写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function makeStyleGuide() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default makeStyleGuide;</div></pre></td></tr></table></figure></p>
<p>如果模块默认输出一个对象，对象名的首字母应该大写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const StyleGuide = &#123;</div><div class="line">  es6: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default StyleGuide;</div></pre></td></tr></table></figure></p>
<h2 id="ESLint的使用"><a href="#ESLint的使用" class="headerlink" title="ESLint的使用"></a>ESLint的使用</h2><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p>
<p>首先，安装ESLint。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint</div></pre></td></tr></table></figure></p>
<p>然后，安装Airbnb语法规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure></p>
<p>最后，在项目的根目录下新建一个.eslintrc文件，配置ESLint。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;extends&quot;: &quot;eslint-config-airbnb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在就可以检查，当前项目的代码是否符合预设的规则。</p>
<p>index.js文件的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var unusued = &apos;I have no purpose!&apos;;</div><div class="line"></div><div class="line">function greet() &#123;</div><div class="line">    var message = &apos;Hello, World!&apos;;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line">greet();</div></pre></td></tr></table></figure></p>
<p>使用ESLint检查这个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ eslint index.js</div><div class="line">index.js</div><div class="line">  1:5  error  unusued is defined but never used                 no-unused-vars</div><div class="line">  4:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line">  5:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line"></div><div class="line">✖ 3 problems (3 errors, 0 warnings)</div></pre></td></tr></table></figure></p>
<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>
<h2 id="解决浏览器兼容ES6特性"><a href="#解决浏览器兼容ES6特性" class="headerlink" title="解决浏览器兼容ES6特性"></a>解决浏览器兼容ES6特性</h2><p>使用 babel 转换工具： <a href="https://babeljs.io/" target="_blank" rel="external">https://babeljs.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h2&gt;&lt;h3 id=&quot;let-取代-var&quot;&gt;&lt;a href=&quot;#let-取代-var&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Javascript" scheme="https://pengfeidai.github.io/tags/Javascript/"/>
    
      <category term="ES6" scheme="https://pengfeidai.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6，你真的知道吗</title>
    <link href="https://pengfeidai.github.io/2017/07/16/%E6%B5%85%E8%B0%88ES6%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9/"/>
    <id>https://pengfeidai.github.io/2017/07/16/浅谈ES6核心内容/</id>
    <published>2017-07-16T14:33:25.000Z</published>
    <updated>2020-05-25T17:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h2><p>ECMAScript6（简称ES6）是 JavaScript 语言的下一代标准。在2015年6月正式发布，所以又称ES2015。<br>由于目前并不是所有浏览器都能兼容 ES6 全部特性，但是 ES6 在实际项目中的广泛使用已成为一种趋势。所以作为一个前端开发者，ES6 的语法是我们必须掌握的。</p>
<p>在讲解 ES6 语法之前，我们得先了解下Babel。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。可在Babel官网 (<a href="http://babeljs.io/" target="_blank" rel="external">http://babeljs.io/</a>) 查看：</p>
<center><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ot4esom84.bkt.clouddn.com/17-8-1/80019165.jpg" alt="alt text" title="image">
                </div>
                <div class="image-caption">image</div>
            </figure></center>

<p><strong>使用Gulp 和 Babel 将 ES6 代码转换成 ES5 代码具体过程如下：</strong></p>
<p><strong>安装依赖</strong></p>
<ol>
<li><p>安装全局 Gulp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure>
</li>
<li><p>安装项目中使用的 Gulp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Gulp 上 Babel 的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp-babel</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Babel 上将 ES6 转换成 ES5 的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>Gulp 配置</strong></p>
<ol>
<li><p>gulpfile.js 的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/**/*.js"</span>)   <span class="comment">// ES6 源码存放的路径</span></div><div class="line">    .pipe(babel())</div><div class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));     <span class="comment">//转换成 ES5 存放的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果要生成 Soucemap， 则用 gulp-sourcemaps</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">"gulp-sourcemaps"</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">"default"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/**/*.js"</span>)</div><div class="line">    .pipe(sourcemaps.init())</div><div class="line">    .pipe(babel())</div><div class="line">    .pipe(concat(<span class="string">"all.js"</span>))</div><div class="line">    .pipe(sourcemaps.write(<span class="string">"."</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>Babel 配置</strong><br>在项目根路径创建文件 .babelrc。内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>执行转换</strong><br>命令行中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure></p>
<h2 id="ES6常用特性"><a href="#ES6常用特性" class="headerlink" title="ES6常用特性"></a>ES6常用特性</h2><p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code> 这些是ES6最常用的几个语法，基本上学会它们，就可以满足我们日常的使用！下面就用用最通俗易懂的语言和例子来讲解它们。</p>
<h3 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h3><p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中都有各自的特殊用途。</p>
<p>ES5只有全局作用域、函数作用域和eval作用域，没有块级作用域，这带来很多不合理的场景。</p>
<p>第一种，变量提升：就是var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部；不在函数内即在全局作用域的最顶部。这样就会引起一些误解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>而 let 就不会被变量提升<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>第二种场景就是内层变量覆盖外层变量。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Faker'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'Davis'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div></pre></td></tr></table></figure></p>
<p>而let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">'Faker'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'Davis'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//Davis</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//Faker</span></div></pre></td></tr></table></figure></p>
<p>第三种场景就是用来计数的循环变量泄露为全局变量，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，变量 i 是 var 声明的，在全局范围内都有效。所以每一次循环，新的 i 值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用 let 则不会出现这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI = <span class="number">8</span>;</div><div class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// invalid assignment to const `PI'</span></div></pre></td></tr></table></figure></p>
<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h3><p><strong>与 Array 增、删、改、查对比</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="keyword">let</span> array = [];</div><div class="line"></div><div class="line"><span class="comment">// 增</span></div><div class="line">map.set(<span class="string">'t'</span>, <span class="number">1</span>);</div><div class="line">set.add( &#123; <span class="attr">t</span> : <span class="number">1</span> &#125; );</div><div class="line">array.push( &#123; <span class="attr">t</span>:<span class="number">1</span> &#125; );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info( map, set, array );  <span class="comment">// Map &#123; 't' =&gt; 1 &#125;  Set &#123; &#123; t: 1 &#125; &#125;  [ &#123; t: 1 &#125; ]</span></div><div class="line"></div><div class="line"><span class="comment">// 查</span></div><div class="line"><span class="keyword">let</span> map_exist = map.has( <span class="string">'t'</span> );</div><div class="line"><span class="keyword">let</span> set_exist = set.has( &#123;<span class="attr">t</span>:<span class="number">1</span>&#125; );</div><div class="line"><span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(map_exist, set_exist, array_exist);  <span class="comment">//true   false   &#123; t: 1 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 改</span></div><div class="line">map.set(<span class="string">'t'</span>, <span class="number">2</span>);</div><div class="line">set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line"><span class="built_in">console</span>.info(map, set, array);  <span class="comment">// Map &#123; 't' =&gt; 2 &#125;   Set &#123; &#123; t: 2 &#125; &#125;   [ &#123; t: 2 &#125; ]</span></div><div class="line"></div><div class="line"><span class="comment">// 删</span></div><div class="line">map.delete(<span class="string">'t'</span>);</div><div class="line">set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t ? set.delete(item):<span class="string">''</span>);</div><div class="line"><span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">array.splice(index,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(map, set, array);  <span class="comment">// Map &#123;&#125;   Set &#123;&#125;   []</span></div></pre></td></tr></table></figure></p>
<h3 id="class、extends、super"><a href="#class、extends、super" class="headerlink" title="class、extends、super"></a>class、extends、super</h3><p>ES5中原型、构造函数，继承问题一直困扰我们。ES6引入了Class（类）的概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">      &#125;</div><div class="line">     sleep() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is sleeping"</span>);</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();     <span class="comment">//Davis is sleeping</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age) &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    info()&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'is '</span> + <span class="keyword">this</span>.age + <span class="string">'years old'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Boy(<span class="string">'Faker'</span>,<span class="string">'8'</span>);</div><div class="line">son.sleep();    <span class="comment">// Faker is sleeping</span></div><div class="line">son.info();     <span class="comment">//  Faker is 8 years old</span></div></pre></td></tr></table></figure></p>
<p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p>
<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Boy类，该类通过extends关键字，继承了Human类的所有属性和方法。</p>
<p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>
<p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>
<h3 id="arrow-function-箭头函数"><a href="#arrow-function-箭头函数" class="headerlink" title="arrow function 箭头函数"></a>arrow function 箭头函数</h3><p>ES6中新增的箭头操作符 <code>=&gt;</code> 简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，可以说是 ES6 最最常用的一个新特性了，看下面的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.forEach (<span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(val, key);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.forEach (</div><div class="line"><span class="function">(<span class="params">val, key</span>) =&gt;</span> <span class="built_in">console</span>.log(val, key)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>JavaScript语言的this对象指向是一个头疼的问题，在对象方法中使用this，必须非常小心。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">      &#125;</div><div class="line">     sleep() &#123;</div><div class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is sleeping"</span>);</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();    <span class="comment">//  is sleeping</span></div></pre></td></tr></table></figure></p>
<p>上面代码之所以不能输出 Davis，这是因为setTimeout中的this指向的是全局对象。为了让它能够正确的运行，传统的解决方法有两种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种，将this传给self,再用self来指代this</span></div><div class="line">sleep() &#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(self.name + <span class="string">" is sleeping"</span>);</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">// 第二种，是用bind(this)</span></div><div class="line">sleep() &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(self.name + <span class="string">" is sleeping"</span>)</div><div class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</div></pre></td></tr></table></figure></p>
<p>使用箭头函数，非常方便：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    sleep() &#123;</div><div class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"is sleeping"</span>);</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Human(<span class="string">"Davis"</span>);</div><div class="line">man.sleep();    <span class="comment">// Davis is sleeping</span></div></pre></td></tr></table></figure></p>
<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>
<h3 id="template-string-模板字符串"><a href="#template-string-模板字符串" class="headerlink" title="template string 模板字符串"></a>template string 模板字符串</h3><p>ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.random();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">` num is <span class="subst">$&#123;num&#125;</span>`</span>);  <span class="comment">//  num is xx</span></div></pre></td></tr></table></figure></p>
<p>不再通过 \ 来做多行字符串拼接，模板字符串可以多行书写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$("#main").html(`</div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很好！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>产生一个随机数$&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">`);</div></pre></td></tr></table></figure></p>
<p>模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。</p>
<h3 id="destructuring-解构"><a href="#destructuring-解构" class="headerlink" title="destructuring 解构"></a>destructuring 解构</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p>
<p>用途一，交换变量的值，不再需要中间变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">[a, b] = [b, a];</div><div class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 2 1</span></div></pre></td></tr></table></figure></p>
<p>用途二，提取JSON数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">6</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;id, title, <span class="attr">data</span>:number&#125; = jsonData;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(id, title, number); <span class="comment">// 1, "OK", [5, 6]</span></div></pre></td></tr></table></figure></p>
<p>用途三，函数参数的定义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 参数是一组有次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123;</div><div class="line"> ...</div><div class="line"> &#125;</div><div class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 参数是一组无次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="default默认参数"><a href="#default默认参数" class="headerlink" title="default默认参数"></a>default默认参数</h3><p>default很简单，就是默认值。现在可以在定义函数的时候指定参数的默认值，而不用像以前那样通过逻辑或操作符来达到目的了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  传统指定默认参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say1</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = name || <span class="string">'Faker'</span>;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'Hello '</span> + name );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  ES6默认参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say2</span>(<span class="params">name=<span class="string">'Davis'</span></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line">say1();         <span class="comment">// Hello Faker</span></div><div class="line">say1(<span class="string">'Tom'</span>);   <span class="comment">// Hello tom</span></div><div class="line">say2();        <span class="comment">//Hello Davis</span></div><div class="line">say2(<span class="string">'Bob'</span>);  <span class="comment">//  Hello Bob</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> say2(name=’tom’)这里的等号，指的是没有传这个参数，则设置默认值Davis，而不是给参数赋值。</p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>rest参数只包括那些没有给出名称的参数；</p>
<p>rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；</p>
<p>rest参数之后不能再有其它参数（即，只能是最后一个参数）；</p>
<p>函数的length属性，不包括rest参数；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, ...rest</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(rest)</div><div class="line">&#125;</div><div class="line">fn(<span class="number">1</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="number">2</span>);    <span class="comment">//["dog", 2]</span></div><div class="line"><span class="built_in">console</span>.log(fn.length);  <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><p>Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义被监听的目标对象</span></div><div class="line"><span class="keyword">let</span> man = &#123; <span class="attr">name</span>: <span class="string">'Davis'</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</div><div class="line"><span class="comment">//定义处理程序</span></div><div class="line"><span class="keyword">let</span> handle = &#123;</div><div class="line">      set(receiver, property, value) &#123;</div><div class="line">        <span class="built_in">console</span>.log(property, <span class="string">'is changed to'</span>, value);</div><div class="line">        receiver[property] = value;</div><div class="line">      &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//创建代理以进行侦听</span></div><div class="line">man = <span class="keyword">new</span> <span class="built_in">Proxy</span>(man, handle);</div><div class="line"><span class="comment">//做一些改动来触发代理</span></div><div class="line">man.age = <span class="number">22</span>;  <span class="comment">//age is change to  22</span></div><div class="line">man.name = <span class="string">"Faker"</span>;  <span class="comment">// name is change to  Faker</span></div></pre></td></tr></table></figure></p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>Promise对象状态</strong></p>
<p>Promise/A+规范, 规定Promise对象是一个有限状态机。它三个状态：</p>
<ul>
<li>pending（执行中）</li>
<li>Resolved（已完成）</li>
<li>Rejected（已失败）</li>
</ul>
<p>其中pending为初始状态，Resolved和rejected为结束状态（表示promise的生命周期已结束）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> val = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 我们假设step1, step2, step3都是ajax调用后端或者是在Node.js上查询数据库的异步操作</span></div><div class="line"><span class="comment">// 每个步骤都有对应的失败和成功处理回调</span></div><div class="line"><span class="comment">// step1、step2、step3必须按顺序执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤一：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val &gt;= <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.1'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤二：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.2'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'步骤三：执行'</span>);</div><div class="line">    <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</div><div class="line">        resolve(<span class="string">'Hello I am No.3'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">0</span>) &#123;</div><div class="line">        reject(val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(step1).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step2);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step3);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 执行之后将会打印</span></div><div class="line">步骤一：执行</div><div class="line">Hello I am No<span class="number">.1</span></div><div class="line">步骤二：执行</div><div class="line">Hello I am No<span class="number">.2</span></div><div class="line">步骤三：执行</div><div class="line">Hello I am No<span class="number">.3</span></div><div class="line">Hello I am No<span class="number">.3</span></div></pre></td></tr></table></figure></p>
<p><strong>常用关键点：</strong></p>
<ol>
<li><p>在Promise定义时，函数已经执行了；Promise构造函数只接受一个参数，即带有异步逻辑的函数。这个函数在 new Promise 时已经执行了。只不过在没有调用 then 之前不会 resolve 或 reject。</p>
</li>
<li><p>在then方法中通常传递两个参数，一个 resolve 函数，一个 reject 函数。reject就是出错的时候运行的函数。resolve 函数必须返回一个值才能把链式调用进行下去。</p>
</li>
</ol>
<ul>
<li>resolve 返回一个新 Promise<br>返回一个新Promise之后再调用的then就是新Promise中的逻辑了。</li>
<li>resolve 返回一个值<br>返回一个值会传递到下一个then的resolve方法参数中。</li>
</ul>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>Generator函数跟普通函数的写法有非常大的区别：</p>
<ol>
<li>function关键字与函数名之间有一个 *；</li>
<li>函数体内部使用yield语句，定义不同的内部状态；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'c'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> fn = f();</div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'a', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'b', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'c', done: false &#125;</span></div><div class="line"><span class="built_in">console</span>.log(fn.next()); <span class="comment">// &#123; value: 'ending', done: true &#125;</span></div></pre></td></tr></table></figure>
<p>第一次输出fn.next()返回一个简单的对象{value: “a”, done: false}，’a’就是f函数执行到第一个yield语句之后得到的值，false表示f函数还没有执行完，只是在这暂停。</p>
<p>第二次，返回的就是{value: “b”, done: false}，说明f函数运行到了第二个yield语句，返回的是该yield语句的返回值’b’。返回之后依然是暂停。</p>
<p>第三次，第四次同理，这样整个f函数就运行完毕了。</p>
<p><strong>异步操作的同步化写法</strong><br>Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield语句下面，反正要等到调用next方法时再执行。所以，Generator函数的一个重要实际意义就是用来处理异步操作，改写回调函数。</p>
<p>例子：假设我在测试服务器的某目录建了4个文件，分别是’test.html’、’a.html’、’b.html’、’c.html’，后三个文件的文件内容跟文件名相同，现在我编辑’test.html’的代码，想要先ajax-get相对网址’a.html’，然后再回调里ajax-get相对网址’b.html’，然后在回调里ajax-get相对网址’c.html’。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  $.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    it.next(res);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 生成器函数</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">ajaxs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'a.html'</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'b.html'</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">yield</span> req(<span class="string">'c.html'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> it = ajaxs();  <span class="comment">// 遍历器对象</span></div><div class="line"></div><div class="line">it.next();</div><div class="line"></div><div class="line"><span class="comment">// a.html</span></div><div class="line"><span class="comment">// b.html</span></div><div class="line"><span class="comment">// c.html</span></div></pre></td></tr></table></figure>
<p><strong>强调：</strong>只有当yield后面跟的函数先执行完，无论执行体里面有多少异步回调，都要等所有回调先执行完，才会执行等号赋值，以及再后面的操作。这也是yield最大的特性。</p>
<h3 id="export、import"><a href="#export、import" class="headerlink" title="export、import"></a>export、import</h3><p>export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口；</p>
<p>import用于在一个模块中加载另一个含有export接口的模块。</p>
<p><strong>导出一组对象</strong></p>
<p>导出模块文件app.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Human&#123;</div><div class="line">    constructor(name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    sleep() &#123;</div><div class="line">        console.log(this.name + &quot; is sleeping&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function walk() &#123;</div><div class="line">    console.log(&apos;i am walking&apos;);</div><div class="line">&#125;</div><div class="line">function play() &#123;</div><div class="line">    console.log(&apos;i am playing&apos;);</div><div class="line">&#125;</div><div class="line">export &#123; Human, walk &#125;</div></pre></td></tr></table></figure></p>
<p>模块导出了两个对象：Human类和walk函数，能被其他文件使用。而play函数没有导出，为此模块私有，不能被其他文件使用。</p>
<p>main.js导入app.js模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; Human, walk &#125; from &apos;app.js&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>Default导出</strong><br>使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">... //类，函数等</div><div class="line">export default App;</div></pre></td></tr></table></figure></p>
<p>main.js导入app.js模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import App from &apos;app.js&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上这些是ES6最常用的几个语法，基本上学会它们，就可以满足我们日常的使用！ES6的新语法特性让前端和后端的差异越来越小了，我们必须要了解这些新的前沿知识（虽然ES8已经到来，但我相信目前还是ES6的时代），才能更好运用于项目中。</p>
<p>项目源码：<a href="https://github.com/pengfeidai/lottery-es6" target="_blank" rel="external">https://github.com/pengfeidai/lottery-es6</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h2&gt;&lt;p&gt;ECMAScript6（简称ES6）是 JavaScript 语言的下一代标准。在2015年6月正式发布，所以又称E
    
    </summary>
    
    
      <category term="Javascript" scheme="https://pengfeidai.github.io/tags/Javascript/"/>
    
      <category term="ES6" scheme="https://pengfeidai.github.io/tags/ES6/"/>
    
      <category term="gulp" scheme="https://pengfeidai.github.io/tags/gulp/"/>
    
  </entry>
  
</feed>
